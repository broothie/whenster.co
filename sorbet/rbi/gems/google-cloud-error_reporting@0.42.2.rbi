# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-cloud-error_reporting` gem.
# Please instead update this file by running `bin/tapioca gem google-cloud-error_reporting`.

# source://google-cloud-error_reporting//lib/google-cloud-error_reporting.rb#25
module Google; end

# source://google-cloud-error_reporting//lib/google-cloud-error_reporting.rb#26
module Google::Cloud
  # Create a new object for connecting to the Stackdriver Error Reporting
  # service. Each call creates a new connection.
  #
  # For more information on connecting to Google Cloud see the
  # {file:AUTHENTICATION.md Authentication Guide}.
  #
  # @example
  #   require "google/cloud/error_reporting"
  #
  #   gcloud = Google::Cloud.new "GCP_Project_ID",
  #   "/path/to/gcp/secretkey.json"
  #   error_reporting = gcloud.error_reporting
  #
  #   error_event = error_reporting.error_event "Error with Backtrace",
  #   event_time: Time.now,
  #   service_name: "my_app_name",
  #   service_version: "v8"
  #   error_reporting.report error_event
  # @param scope [String, Array<String>] The OAuth 2.0 scopes controlling the
  #   set of resources and operations that the connection can access. See
  #   [Using OAuth 2.0 to Access Google
  #   APIs](https://developers.google.com/identity/protocols/OAuth2).
  #
  #   The default scope is:
  #
  #   * `https://www.googleapis.com/auth/cloud-platform`
  # @param timeout [Integer] Default timeout to use in requests. Optional.
  # @return [Google::Cloud::ErrorReporting::Project]
  #
  # source://google-cloud-error_reporting//lib/google-cloud-error_reporting.rb#60
  def error_reporting(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # source://google-cloud-logging/2.3.2/lib/google-cloud-logging.rb#67
  def logging(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # source://google-cloud-storage/1.44.0/lib/google-cloud-storage.rb#76
  def storage(scope: T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil), open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), send_timeout: T.unsafe(nil), max_elapsed_time: T.unsafe(nil), base_interval: T.unsafe(nil), max_interval: T.unsafe(nil), multiplier: T.unsafe(nil)); end

  # source://google-cloud-trace/0.42.1/lib/google-cloud-trace.rb#60
  def trace(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  class << self
    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#158
    def auto_load_files; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#128
    def auto_load_gems; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#91
    def configure; end

    # source://google-cloud-env/1.6.0/lib/google/cloud/env.rb#490
    def env; end

    # Create a new object for connecting to the Stackdriver Error Reporting
    # service. Each call creates a new connection.
    #
    # For more information on connecting to Google Cloud see the
    # {file:AUTHENTICATION.md Authentication Guide}.
    #
    # @example
    #   require "google/cloud/error_reporting"
    #
    #   error_reporting =
    #   Google::Cloud.error_reporting "GCP_Project_ID",
    #   "/path/to/gcp/secretkey.json"
    #
    #   error_event = error_reporting.error_event "Error with Backtrace",
    #   event_time: Time.now,
    #   service_name: "my_app_name",
    #   service_version: "v8"
    #   error_reporting.report error_event
    # @param project_id [String] Google Cloud Platform project identifier for
    #   the Stackdriver Error Reporting service you are connecting to. If not
    #   present, the default project for the credentials is used.
    # @param credentials [String, Hash, Google::Auth::Credentials] The path to
    #   the keyfile as a String, the contents of the keyfile as a Hash, or a
    #   Google::Auth::Credentials object. (See {ErrorReporting::Credentials})
    # @param scope [String, Array<String>] The OAuth 2.0 scopes controlling the
    #   set of resources and operations that the connection  can access. See
    #   [Using OAuth 2.0 to Access Google
    #   APIs](https://developers.google.com/identity/protocols/OAuth2).
    #
    #   The default scope is:
    #
    #   * `https://www.googleapis.com/auth/cloud-platform`
    # @param timeout [Integer] Default timeout to use in requests. Optional.
    # @return [Google::Cloud::ErrorReporting::Project]
    #
    # source://google-cloud-error_reporting//lib/google-cloud-error_reporting.rb#105
    def error_reporting(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#103
    def init_configuration; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#142
    def loaded_files; end

    # source://google-cloud-logging/2.3.2/lib/google-cloud-logging.rb#109
    def logging(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#62
    def new(project_id = T.unsafe(nil), credentials = T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-storage/1.44.0/lib/google-cloud-storage.rb#135
    def storage(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil), open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), send_timeout: T.unsafe(nil), max_elapsed_time: T.unsafe(nil), base_interval: T.unsafe(nil), max_interval: T.unsafe(nil), multiplier: T.unsafe(nil)); end

    # source://google-cloud-trace/0.42.1/lib/google-cloud-trace.rb#101
    def trace(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end
  end
end

# # Error Reporting
#
# Stackdriver Error Reporting counts, analyzes and aggregates the crashes in
# your running cloud services.
#
# See {file:OVERVIEW.md Error Reporting Overview}.
#
# source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#21
module Google::Cloud::ErrorReporting
  class << self
    # Configure the default {Google::Cloud::ErrorReporting::Project}
    # client, allows the {.report} public method to reuse these
    # configured parameters.
    #
    # The following Stackdriver ErrorReporting configuration parameters are
    # supported:
    #
    # * `project_id` - (String)  Google Cloud Platform project identifier for
    #   the Stackdriver Error Reporting service you are connecting to. (The
    #   parameter `project` is considered deprecated, but may also be used.)
    # * `credentials` - (String, Hash, Google::Auth::Credentials) The path to
    #   the keyfile as a String, the contents of the keyfile as a Hash, or a
    #   Google::Auth::Credentials object. (See {ErrorReporting::Credentials})
    #   (The parameter `keyfile` is considered deprecated, but may also be
    #   used.)
    # * `scope` - (String, Array<String>) The OAuth 2.0 scopes controlling
    #   the set of resources and operations that the connection can access.
    # * `quota_project` - (String) The project ID for a project that can be
    #   used by client libraries for quota and billing purposes.
    # * `timeout` - (Integer) Default timeout to use in requests.
    # * `endpoint` - (String) Override of the endpoint host name, or `nil`
    #   to use the default endpoint.
    # * `service_name` - (String) Name for the application.
    # * `service_version` - (String) Version identifier for the application.
    # * `ignore_classes` - (Array<Exception>) Array of exception types that
    #   should not be reported.
    # * `on_error` - (Proc) A Proc to be run when an error is encountered
    #   on a background thread, such as {ErrorReporting.report} or
    #   {Middleware}. The Proc must take the error object as the single
    #   argument. If ErrorReporting is being used to report errors using
    #   `Google::Cloud::cofigure.on_error`, then this `on_error` should be
    #   configured to report errors raised when reporting through
    #   ErrorReporting.
    #
    # See the [Configuration
    # Guide](https://googleapis.dev/ruby/stackdriver/latest/file.INSTRUMENTATION_CONFIGURATION.html)
    # for full configuration parameters.
    #
    # @example
    #   # in app.rb
    #   require "google/cloud/error_reporting"
    #
    #   Google::Cloud::ErrorReporting.configure do |config|
    #   config.project_id = "my-project"
    #   config.credentials = "/path/to/keyfile.json"
    #   config.service_name = "my-service"
    #   config.service_version = "v8"
    #   end
    #
    #   begin
    #   fail "boom"
    #   rescue => exception
    #   # Report exception using configuration parameters provided above
    #   Google::Cloud::ErrorReporting.report exception
    #   end
    # @return [Google::Cloud::Config] The configuration object
    #   the Google::Cloud::ErrorReporting module uses.
    # @yield [Google::Cloud.configure.error_reporting]
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting.rb#160
    def configure; end

    # Returns the global default reporter used by middleware and the
    # {Google::Cloud::ErrorReporting.report} convenience method.
    #
    # If the default reporter is already defined, returns it. Otherwise, if
    # a block is given, it is called and the result is set as the default
    # reporter. Otherwise, if no block is given, a reporter is constructed
    # from the default project and credentials.
    #
    # @return [#report]
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting.rb#266
    def default_reporter(&block); end

    # Creates a new object for connecting to the Stackdriver Error Reporting
    # service. Each call creates a new connection.
    #
    # For more information on connecting to Google Cloud see the
    # {file:AUTHENTICATION.md Authentication Guide}.
    #
    # @example
    #   require "google/cloud/error_reporting"
    #
    #   error_reporting = Google::Cloud::ErrorReporting.new
    #   # ...
    # @param project_id [String] Google Cloud Platform project identifier for
    #   the Stackdriver Error Reporting service you are connecting to. If not
    #   present, the default project for the credentials is used.
    # @param credentials [String, Hash, Google::Auth::Credentials] The path to
    #   the keyfile as a String, the contents of the keyfile as a Hash, or a
    #   Google::Auth::Credentials object. (See {ErrorReporting::Credentials})
    # @param scope [String, Array<String>] The OAuth 2.0 scopes controlling
    #   the set of resources and operations that the connection can access.
    #   See [Using OAuth 2.0 to Access Google
    #   APIs](https://developers.google.com/identity/protocols/OAuth2).
    #
    #   The default scope is:
    #
    #   * `https://www.googleapis.com/auth/cloud-platform`
    # @param endpoint [String] Override of the endpoint host name. Optional.
    #   If the param is nil, uses the default endpoint.
    # @param project [String] Alias for the `project_id` argument. Deprecated.
    # @param keyfile [String] Alias for the `credentials` argument.
    #   Deprecated.
    # @param timeout [Integer] Default timeout to use in requests. Optional.
    # @return [Google::Cloud::ErrorReporting::Project]
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting.rb#79
    def new(project_id: T.unsafe(nil), credentials: T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil), endpoint: T.unsafe(nil), project: T.unsafe(nil), keyfile: T.unsafe(nil)); end

    # Provides an easy-to-use interface to Report a Ruby exception object to
    # Stackdriver ErrorReporting service. This method helps users to
    # transform the Ruby exception into an Stackdriver ErrorReporting
    # ErrorEvent gRPC structure, so users don't need to. This should be the
    # prefered method to use when users wish to report captured exception in
    # applications.
    #
    # This public method creates a default Stackdriver ErrorReporting client
    # and reuse that between calls. The default client is initialized with
    # parameters defined in {.configure}.
    #
    # The error event can be customized before reporting. See the example
    # below and {Google::Cloud::ErrorReporting::ErrorEvent} class for avaiable
    # error event fields.
    #
    # @example Basic usage
    #   # in app.rb
    #   require "google/cloud/error_reporting"
    #
    #   begin
    #   fail "boom"
    #   rescue => exception
    #   # Report exception using configuration parameters provided above
    #   Google::Cloud::ErrorReporting.report exception
    #   end
    # @example The error event can be customized if needed
    #   require "google/cloud/error_reporting"
    #
    #   begin
    #   fail "boom"
    #   rescue => exception
    #   Google::Cloud::ErrorReporting.report exception do |error_event|
    #   error_event.user = "johndoh@example.com"
    #   error_event.http_status = "502"
    #   end
    #   end
    # @param exception [Exception] The captured Ruby Exception object
    # @param service_name [String] An identifier for running service.
    #   Optional.
    # @param service_version [String] A version identifier for running
    #   service.
    # @yield [error_event]
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting.rb#211
    def report(exception, service_name: T.unsafe(nil), service_version: T.unsafe(nil)); end

    private

    # @private Default credentials.
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting.rb#284
    def default_credentials(scope: T.unsafe(nil)); end

    # @private Resolve credentials
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting.rb#232
    def resolve_credentials(credentials, scope); end

    # @private Resolve project.
    # @raise [ArgumentError]
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting.rb#244
    def resolve_project_id(project_id, credentials); end
  end
end

# # AsyncErrorReporter
#
# {Google::Cloud::ErrorReporting::Middleware} to asynchronously submit
# error events to Stackdriver Error Reporting service when used in
# Ruby applications.
#
# @private Used by {Google::Cloud::ErrorReporting} and
#
# source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#68
class Google::Cloud::ErrorReporting::AsyncErrorReporter
  # @private Creates a new AsyncErrorReporter instance.
  # @return [AsyncErrorReporter] a new instance of AsyncErrorReporter
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#75
  def initialize(error_reporting, max_queue: T.unsafe(nil), threads: T.unsafe(nil)); end

  # @private Implementation accessors
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#71
  def error_reporting; end

  # @private Implementation accessors
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#71
  def max_queue; end

  # Register to be notified of errors when raised.
  #
  # If an unhandled error has occurred the reporter will attempt to
  # recover from the error and resume reporting error_events.
  #
  # Multiple error handlers can be added.
  #
  # @yield [callback] The block to be called when an error is raised.
  # @yieldparam error [Exception] The error raised.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#171
  def on_error(&block); end

  # Add the error event to the queue. This will raise if there are no
  # resources available to make the API call.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#93
  def report(error_event); end

  # Whether the reporter has been started.
  #
  # @return [boolean] `true` when started, `false` otherwise.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#147
  def started?; end

  # Begins the process of stopping the reporter. ErrorEvents already
  # in the queue will be published, but no new ErrorEvent can be added.
  # Use {#wait!} to block until the reporter is fully stopped and all
  # pending error_events have been pushed to the API.
  #
  # @return [AsyncErrorReporter] returns self so calls can be chained.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#110
  def stop; end

  # Stop this asynchronous reporter and block until it has been stopped.
  #
  # @param timeout [Number] Timeout in seconds.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#121
  def stop!(timeout = T.unsafe(nil)); end

  # Whether the reporter has been stopped.
  #
  # @return [boolean] `true` when stopped, `false` otherwise.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#156
  def stopped?; end

  # @private Implementation accessors
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#71
  def thread_pool; end

  # @private Implementation accessors
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#71
  def threads; end

  # Blocks until the reporter is fully stopped, all pending error_events
  # have been published, and all callbacks have completed. Does not stop
  # the reporter. To stop the reporter, first call {#stop} and then call
  # {#wait!} to block until the reporter is stopped.
  #
  # @return [AsyncErrorReporter] returns self so calls can be chained.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#133
  def wait!(timeout = T.unsafe(nil)); end

  protected

  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#184
  def default_error_callbacks; end

  # Calls all error callbacks.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#178
  def error!(error); end

  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#197
  def report_sync(error_event); end
end

# # AsyncErrorReporterError
#
# This can occur when there are not enough resources allocated for the
# amount of usage.
#
# @private Used to indicate a problem reporting errors asynchronously.
#
# source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#29
class Google::Cloud::ErrorReporting::AsyncErrorReporterError < ::Google::Cloud::Error
  # @return [AsyncErrorReporterError] a new instance of AsyncErrorReporterError
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#36
  def initialize(message, error_event = T.unsafe(nil)); end

  # Returns the value of attribute error_event.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#34
  def error_event; end
end

# # Credentials
#
# Represents the authentication and authorization used to connect to the
# Stackdriver Error Reporting service.
#
# @example
#   require "google/cloud/error_reporting"
#
#   keyfile = "/path/to/keyfile.json"
#   creds = Google::Cloud::ErrorReporting::Credentials.new keyfile
#
#   error_reporting = Google::Cloud::ErrorReporting.new(
#   project_id: "my-project",
#   credentials: creds
#   )
#
#   error_reporting.project_id #=> "my-project"
#
# source://google-cloud-error_reporting//lib/google/cloud/error_reporting/credentials.rb#40
class Google::Cloud::ErrorReporting::Credentials < ::Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Credentials; end

# # ErrorEvent
#
# An individual error event to report to Stackdriver Error Reporting
# service.
#
# Google::Cloud::ErrorReporting::ErrorEvent is able to be transformed
# into the `Google::Cloud::ErrorReporting::V1beta1::ReportedErrorEvent`
# gRPC structure. Once an error event is reported, the GCP
# Stackdriver ErrorReporting service is able to parse the message and
# backtrace, then group the error events by content.
#
# @example
#   require "google/cloud/error_reporting"
#
#   error_reporting = Google::Cloud::ErrorReporting.new
#
#   error_event = error_reporting.error_event "Error with Backtrace",
#   event_time: Time.now,
#   service_name: "my_app_name",
#   service_version: "v8"
#   error_reporting.report error_event
# @see https://cloud.google.com/error-reporting/reference/rest/v1beta1/projects.events
#
# source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#44
class Google::Cloud::ErrorReporting::ErrorEvent
  # Time when the event occurred. If not provided, the time when the event
  # was received by the Error Reporting system will be used.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#48
  def event_time; end

  # Time when the event occurred. If not provided, the time when the event
  # was received by the Error Reporting system will be used.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#48
  def event_time=(_arg0); end

  # The source code filename, which can include a truncated relative path,
  # or a full path from a production machine.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#107
  def file_path; end

  # The source code filename, which can include a truncated relative path,
  # or a full path from a production machine.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#107
  def file_path=(_arg0); end

  # Human-readable name of a function or method. The value can include
  # optional context like the class or package name. For example,
  # my.package.MyClass.method in case of Java.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#117
  def function_name; end

  # Human-readable name of a function or method. The value can include
  # optional context like the class or package name. For example,
  # my.package.MyClass.method in case of Java.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#117
  def function_name=(_arg0); end

  # The type of HTTP request, such as GET, POST, etc.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#71
  def http_method; end

  # The type of HTTP request, such as GET, POST, etc.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#71
  def http_method=(_arg0); end

  # The referrer information that is provided with the request.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#83
  def http_referrer; end

  # The referrer information that is provided with the request.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#83
  def http_referrer=(_arg0); end

  # The IP address from which the request originated. This can be IPv4,
  # IPv6, or a token which is derived from the IP address, depending on
  # the data that has been provided in the error report.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#93
  def http_remote_ip; end

  # The IP address from which the request originated. This can be IPv4,
  # IPv6, or a token which is derived from the IP address, depending on
  # the data that has been provided in the error report.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#93
  def http_remote_ip=(_arg0); end

  # The HTTP response status code for the request.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#87
  def http_status; end

  # The HTTP response status code for the request.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#87
  def http_status=(_arg0); end

  # The URL of the request.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#75
  def http_url; end

  # The URL of the request.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#75
  def http_url=(_arg0); end

  # The user agent information that is provided with the request.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#79
  def http_user_agent; end

  # The user agent information that is provided with the request.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#79
  def http_user_agent=(_arg0); end

  # 1-based. 0 indicates that the line number is unknown.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#111
  def line_number; end

  # 1-based. 0 indicates that the line number is unknown.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#111
  def line_number=(_arg0); end

  # A message describing the error. The message can contain an exception
  # stack in one of the supported programming languages and formats. In
  # that case, the message is parsed and detailed exception information is
  # returned when retrieving the error event again.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#55
  def message; end

  # A message describing the error. The message can contain an exception
  # stack in one of the supported programming languages and formats. In
  # that case, the message is parsed and detailed exception information is
  # returned when retrieving the error event again.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#55
  def message=(_arg0); end

  # An identifier of the service, such as the name of the executable, job,
  # or Google App Engine service name. This field is expected to have a
  # low number of values that are relatively stable over time, as opposed
  # to version, which can be changed whenever new code is deployed.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#62
  def service_name; end

  # An identifier of the service, such as the name of the executable, job,
  # or Google App Engine service name. This field is expected to have a
  # low number of values that are relatively stable over time, as opposed
  # to version, which can be changed whenever new code is deployed.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#62
  def service_name=(_arg0); end

  # Represents the source code version that the developer provided, which
  # could represent a version label or a Git SHA-1 hash, for example.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#67
  def service_version; end

  # Represents the source code version that the developer provided, which
  # could represent a version label or a Git SHA-1 hash, for example.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#67
  def service_version=(_arg0); end

  # Convert ErrorEvent object to gRPC struct.
  #
  # @return [Google::Cloud::ErrorReporting::V1beta1::ReportedErrorEvent] gRPC struct that represent an ErrorEvent.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#234
  def to_grpc; end

  # The user who caused or was affected by the crash. This can be a user
  # ID, an email address, or an arbitrary token that uniquely identifies
  # the user. When sending an error report, leave this field empty if the
  # user was not logged in. In this case the Error Reporting system will
  # use other data, such as remote IP address, to distinguish affected
  # users. See affectedUsersCount in ErrorGroupStats.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#102
  def user; end

  # The user who caused or was affected by the crash. This can be a user
  # ID, an email address, or an arbitrary token that uniquely identifies
  # the user. When sending an error report, leave this field empty if the
  # user was not logged in. In this case the Error Reporting system will
  # use other data, such as remote IP address, to distinguish affected
  # users. See affectedUsersCount in ErrorGroupStats.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#102
  def user=(_arg0); end

  private

  # Google::Cloud::ErrorReporting::V1beta1::ErrorContext
  #
  # @private Formats the error context info as a
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#302
  def error_context_grpc; end

  # @private Formats the event_time as a Google::Protobuf::Timestamp.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#248
  def event_time_grpc; end

  # Google::Cloud::ErrorReporting::V1beta1::HttpRequestContext
  #
  # @private Formats the http request context as a
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#272
  def http_request_grpc; end

  # Google::Cloud::ErrorReporting::V1beta1::ServiceContext.
  #
  # @private Formats the service_name and service_version as a
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#260
  def service_context_grpc; end

  # Google::Cloud::ErrorReporting::V1beta1::SourceLocation
  #
  # @private Formats the source location as a
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#289
  def source_location_grpc; end

  class << self
    # Construct an ErrorEvent object based on a given exception.
    #
    # @param exception [Exception] A Ruby exception.
    # @return [ErrorEvent] An ErrorEvent object containing information
    #   from the given exception.
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#210
    def from_exception(exception); end

    # Build a new ErrorEvent from a
    # `Google::Cloud::ErrorReporting::V1beta1::ReportedErrorEvent` object.
    #
    # @param grpc [Google::Cloud::ErrorReporting::V1beta1::ReportedErrorEvent] A `Google::Cloud::ErrorReporting::V1beta1::ReportedErrorEvent`
    #   object
    # @return [ErrorEvent] A new ErrorEvent instance derived from given grpc
    #   object
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#130
    def from_grpc(grpc); end

    private

    # @private Extract error context info from gRPC into an ErrorEvent.
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#165
    def extract_error_context(error_event, error_context_grpc); end

    # @private Extract http request info from gRPC into an ErrorEvent.
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#176
    def extract_http_request(error_event, http_request_grpc); end

    # @private Extract service context info from gRPC into an ErrorEvent.
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#156
    def extract_service_context(error_event, service_context_grpc); end

    # @private Extract source location info from gRPC into an ErrorEvent.
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#189
    def extract_source_location(error_event, source_location_grpc); end

    # @param timestamp_grpc [Google::Protobuf::Timestamp] A protobuf
    #   Timestamp object
    # @private Get a Time object from a Google::Protobuf::Timestamp object.
    # @return [Time] The time object derived from input grpc timestamp
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/error_event.rb#149
    def extract_timestamp(timestamp_grpc); end
  end
end

# # ErrorReporterError
#
# when the calling the API returns an error.
#
# @private Used to indicate a problem reporting errors. This can occur
#
# source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#48
class Google::Cloud::ErrorReporting::ErrorReporterError < ::Google::Cloud::Error
  # @return [ErrorReporterError] a new instance of ErrorReporterError
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#55
  def initialize(message, error_event = T.unsafe(nil)); end

  # Returns the value of attribute error_event.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/async_error_reporter.rb#53
  def error_event; end
end

# # Middleware
#
# Google::Cloud::ErrorReporting::Middleware defines a Rack Middleware
# that can automatically catch upstream exceptions and report them
# to Stackdriver Error Reporting.
#
# source://google-cloud-error_reporting//lib/google/cloud/error_reporting/middleware.rb#26
class Google::Cloud::ErrorReporting::Middleware
  # Construct a new instance of Middleware.
  #
  # @param app [Rack::Application] The Rack application
  # @param error_reporting [Google::Cloud::ErrorReporting::Project] A
  #   Google::Cloud::ErrorReporting::Project client for reporting
  #   exceptions
  # @param kwargs [Hash] Hash of configuration settings. Used for backward
  #   API compatibility. See the [Configuration
  #   Guide](https://googleapis.dev/ruby/stackdriver/latest/file.INSTRUMENTATION_CONFIGURATION.html)
  #   for the prefered way to set configuration parameters.
  # @return [Google::Cloud::ErrorReporting::Middleware] A new instance of
  #   Middleware
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/middleware.rb#48
  def initialize(app, error_reporting: T.unsafe(nil), **kwargs); end

  # Implements the mandatory Rack Middleware call method.
  #
  # Catch all Exceptions from upstream and report them to Stackdriver
  # Error Reporting. Unless the exception's class is defined to be ignored
  # by this Middleware.
  #
  # @param env [Hash] Rack environment hash
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/middleware.rb#74
  def call(env); end

  # Creates a {Google::Cloud::ErrorReporting::ErrorEvent} based on the
  # exception. Fill in the HttpRequestContext section of the ErrorEvent
  # based on the HTTP Request headers.
  #
  # When used in Rails environment. It replies on
  # ActionDispatch::ExceptionWrapper class to derive a HTTP status code
  # based on the exception's class.
  #
  # @param env [Hash] Rack environment hash
  # @param exception [Exception] Exception to convert from
  # @return [Google::Cloud::ErrorReporting::ErrorEvent] The gRPC
  #   ErrorEvent object that's based on given env and exception
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/middleware.rb#135
  def error_event_from_exception(env, exception); end

  # A Google::Cloud::ErrorReporting::Project client used to report
  # error events.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/middleware.rb#31
  def error_reporting; end

  # Report an given exception to Stackdriver Error Reporting.
  #
  # While it reports most of the exceptions. Certain Rails exceptions that
  # maps to a HTTP status code less than 500 will be treated as not the
  # app fault and ignored.
  #
  # @param env [Hash] Rack environment hash
  # @param exception [Exception] The Ruby exception to report.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/middleware.rb#106
  def report_exception(env, exception); end

  private

  # @private Get Google::Cloud::ErrorReporting.configure
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/middleware.rb#216
  def configuration; end

  # Helper method to derive HTTP status code base on exception class in
  # Rails. Returns nil if not in Rails environment.
  #
  # @param exception [Exception] An Ruby exception
  # @return [Integer] A number that represents HTTP status code or nil if
  #   status code can't be determined
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/middleware.rb#199
  def http_status(exception); end

  # Fallback to default configuration values if not defined already
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/middleware.rb#182
  def init_default_config; end

  # Consolidate configurations from various sources. Also set
  # instrumentation config parameters to default values if not set
  # already.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/middleware.rb#161
  def load_config(**kwargs); end
end

# source://google-cloud-error_reporting//lib/google/cloud/error_reporting/middleware.rb#27
Google::Cloud::ErrorReporting::Middleware::EXCEPTION_KEYS = T.let(T.unsafe(nil), Array)

# Project
#
# Projects are top-level containers in Google Cloud Platform. They store
# information about billing and authorized users, and they control access
# to Stackdriver ErrorReporting. Each project has a friendly name and a
# unique ID. Projects can be created only in the [Google Developers
# Console](https://console.developers.google.com).
#
# See {Google::Cloud::ErrorReporting.new}
#
# @example
#   require "google/cloud/error_reporting"
#
#   error_reporting = Google::Cloud::ErrorReporting.new
#   error_event = error_reporting.error_event "Error with Backtrace",
#   event_time: Time.now,
#   service_name: "my_app_name"
#   error_reporting.report error_event
#
# source://google-cloud-error_reporting//lib/google/cloud/error_reporting/project.rb#44
class Google::Cloud::ErrorReporting::Project
  # @param service [Google::Cloud::ErrorReporting::Service] The underlying
  #   Service object
  # @private Create a new Project instance.
  # @return [Google::Cloud::ErrorReporting::Project] A new Project
  #   instance
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/project.rb#98
  def initialize(service); end

  # Create a new {Google::Cloud::ErrorReporting::ErrorEvent} instance
  # with given parameters.
  #
  # @example
  #   require "google/cloud/error_reporting"
  #
  #   error_reporting = Google::Cloud::ErrorReporting.new
  #
  #   error_event =
  #   error_reporting.error_event "Error Message with Backtrace",
  #   event_time: Time.now,
  #   service_name: "my_app_name",
  #   service_version: "v8",
  #   user: "johndoh",
  #   file_path: "MyController.rb",
  #   line_number: 123,
  #   function_name: "index"
  #   error_reporting.report error_event
  # @param message [String] The error message along with backtrace
  # @param service_name [String] The service's name.
  #   Default to {default_service_name}
  # @param service_version [String] The service's version.
  #   Default to {default_service_version}
  # @param event_time [Time] Time when the event occurred. If not
  #   provided, the time when the event was received by the Error
  #   Reporting system will be used.
  # @param file_path [String] The source code filename, which can include
  #   a truncated relative path, or a full path from a production machine.
  # @param line_number [Number] 1-based. 0 indicates that the line number
  #   is unknown.
  # @param function_name [String] Human-readable name of a function or
  #   method. The value can include optional context like the class or
  #   package name. For example, my.package.MyClass.method in case of
  #   Java.
  # @param user [String] The user who caused or was affected by the crash.
  #   This can be a user ID, an email address, or an arbitrary token that
  #   uniquely identifies the user. When sending an error report, leave
  #   this field empty if the user was not logged in. In this case the
  #   Error Reporting system will use other data, such as remote IP
  #   address, to distinguish affected users.
  # @return [ErrorEvent] A new ErrorEvent instance
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/project.rb#211
  def error_event(message = T.unsafe(nil), service_name: T.unsafe(nil), service_version: T.unsafe(nil), event_time: T.unsafe(nil), user: T.unsafe(nil), file_path: T.unsafe(nil), line_number: T.unsafe(nil), function_name: T.unsafe(nil)); end

  # Get the name of current project_id from underneath gRPC Service
  # object.
  #
  # @return [String] The current project_id
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/project.rb#108
  def project; end

  # Get the name of current project_id from underneath gRPC Service
  # object.
  #
  # @return [String] The current project_id
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/project.rb#108
  def project_id; end

  # Report a {Google::Cloud::ErrorReporting::ErrorEvent} to Stackdriver
  # Error Reporting service.
  #
  # @example
  #   require "google/cloud/error_reporting"
  #
  #   error_reporting = Google::Cloud::ErrorReporting.new
  #
  #   error_event = error_reporting.error_event "Error with Backtrace"
  #   error_reporting.report error_event
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/project.rb#125
  def report(*args, &block); end

  # Create a {Google::Cloud::ErrorReporting::ErrorEvent} from the
  # given exception, and report this ErrorEvent to Stackdriver Error
  # Reporting service.
  #
  # @example
  #   require "google/cloud/error_reporting"
  #
  #   error_reporting = Google::Cloud::ErrorReporting.new
  #
  #   begin
  #   fail StandardError, "A serious problem"
  #   rescue => exception
  #   error_reporting.report_exception exception,
  #   service_name: "my_app_name",
  #   service_version: "v8"
  #   end
  # @param exception [Exception] A Ruby exception
  # @param service_name [String] The service's name.
  #   Default to {default_service_name}
  # @param service_version [String] The service's version.
  #   Default to {default_service_version}
  # @yield [error_event]
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/project.rb#153
  def report_exception(exception, service_name: T.unsafe(nil), service_version: T.unsafe(nil)); end

  # @private The Service object
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/project.rb#87
  def service; end

  # @private The Service object
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/project.rb#87
  def service=(_arg0); end

  class << self
    # Find default project_id from the configuration, environment
    # varaibles, or query from GCE meta service.
    #
    # @return [String] default valid GCP project_id
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/project.rb#51
    def default_project; end

    # Find default project_id from the configuration, environment
    # varaibles, or query from GCE meta service.
    #
    # @return [String] default valid GCP project_id
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/project.rb#51
    def default_project_id; end

    # Find default service_name from the configuration, environment
    # varaibles, or query from GCE meta service, or just "ruby".
    #
    # @return [String] default GCP service_name
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/project.rb#66
    def default_service_name; end

    # Find default service_version from the configuration, environment
    # varaibles, or query from GCE meta service.
    #
    # @return [String] default GCP service_version
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/project.rb#79
    def default_service_version; end
  end
end

# # Railtie
#
# Google::Cloud::ErrorReporting::Railtie automatically add the
# {Google::Cloud::ErrorReporting::Middleware} to Rack in a Rails
# environment. It will automatically capture Exceptions from the Rails app
# and report them to the Stackdriver Error Reporting service.
#
# The Middleware is only added when certain conditions are met. See
# `Google::Cloud.configure.use_error_reporting` for detail.
#
# When loaded, the {Google::Cloud::ErrorReporting::Middleware} will be
# inserted after ActionDispatch::DebugExceptions or
# ActionDispatch::ShowExceptions Middleware, which allows it to intercept
# and handle all Exceptions without interfering with Rails's normal error
# pages.
# See the [Configuration
# Guide](https://googleapis.dev/ruby/stackdriver/latest/file.INSTRUMENTATION_CONFIGURATION.html)
# on how to configure the Railtie and Middleware.
#
# source://google-cloud-error_reporting//lib/google/cloud/error_reporting/rails.rb#41
class Google::Cloud::ErrorReporting::Railtie < ::Rails::Railtie
  class << self
    # instrumentation configuration. Also consolidate the
    # `use_error_reporting` setting by verifying credentials and Rails
    # environment. The `use_error_reporting` setting will be true if
    # credentials are valid, and the setting is manually set to true or
    # Rails is in production environment.
    #
    # @param config [Rails::Railtie::Configuration] The
    #   Rails.application.config
    # @private Consolidate Rails configuration into Error Reporting
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/rails.rb#81
    def consolidate_rails_config(config); end

    # configuration and insert the Middleware.
    #
    # @private Init Error Reporting integration for Rails. Setup
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/rails.rb#55
    def init_middleware(app); end

    private

    # Fallback to default config values if config parameters not provided.
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/rails.rb#134
    def init_default_config; end

    # instrumentation configuration.
    #
    # @private Merge Rails configuration into Error Reporting
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/rails.rb#108
    def merge_rails_config(rails_config); end

    # @private Verify credentials
    # @return [Boolean]
    #
    # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/rails.rb#144
    def valid_credentials?(project_id, credentials); end
  end
end

# @private Represents the gRPC Error Reporting service, including all the
#   API methods.
#
# source://google-cloud-error_reporting//lib/google/cloud/error_reporting/service.rb#27
class Google::Cloud::ErrorReporting::Service
  # Creates a new Service instance.
  #
  # @return [Service] a new instance of Service
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/service.rb#35
  def initialize(project, credentials, timeout: T.unsafe(nil), host: T.unsafe(nil)); end

  # Returns the value of attribute credentials.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/service.rb#29
  def credentials; end

  # Sets the attribute credentials
  #
  # @param value the value to set the attribute credentials to.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/service.rb#29
  def credentials=(_arg0); end

  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/service.rb#42
  def error_reporting; end

  # Returns the value of attribute host.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/service.rb#31
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/service.rb#31
  def host=(_arg0); end

  # Returns the value of attribute mocked_error_reporting.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/service.rb#53
  def mocked_error_reporting; end

  # Sets the attribute mocked_error_reporting
  #
  # @param value the value to set the attribute mocked_error_reporting to.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/service.rb#53
  def mocked_error_reporting=(_arg0); end

  # Returns the value of attribute project.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/service.rb#28
  def project; end

  # Sets the attribute project
  #
  # @param value the value to set the attribute project to.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/service.rb#28
  def project=(_arg0); end

  # Report a {Google::Cloud::ErrorReporting::ErrorEvent} to Stackdriver
  # Error Reporting service.
  #
  # @example
  #   require "google/cloud/error_reporting"
  #
  #   error_reporting = Google::Cloud::ErrorReporting.new
  #
  #   error_event =
  #   error_reporting.error_event "Error Message with Backtrace",
  #   event_time: Time.now,
  #   service_name: "my_app_name",
  #   service_version: "v8",
  #   user: "johndoh",
  #   file_path: "MyController.rb",
  #   line_number: 123,
  #   function_name: "index"
  #   error_reporting.report error_event
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/service.rb#75
  def report(error_event); end

  # Returns the value of attribute timeout.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/service.rb#30
  def timeout; end

  # Sets the attribute timeout
  #
  # @param value the value to set the attribute timeout to.
  #
  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/service.rb#30
  def timeout=(_arg0); end

  protected

  # source://google-cloud-error_reporting//lib/google/cloud/error_reporting/service.rb#87
  def project_path; end
end

# source://google-cloud-error_reporting//lib/google/cloud/error_reporting/version.rb#19
Google::Cloud::ErrorReporting::VERSION = T.let(T.unsafe(nil), String)

# Aliases for compatibility with older spellings.
#
# @private
#
# source://google-cloud-error_reporting//lib/google/cloud/error_reporting.rb#296
module Google::Devtools; end

# @private
#
# source://google-cloud-error_reporting//lib/google/cloud/error_reporting.rb#298
Google::Devtools::Clouderrorreporting = Google::Cloud::ErrorReporting

# source://google-cloud-trace/0.42.1/lib/google/cloud/trace.rb#290
Google::Devtools::Cloudtrace = Google::Cloud::Trace
