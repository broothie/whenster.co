# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `grpc` gem.
# Please instead update this file by running `bin/tapioca gem grpc`.

# GRPC is the general RPC module
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#16
module GRPC; end

# GRPC status code corresponding to status ABORTED
#
# source://grpc//src/ruby/lib/grpc/errors.rb#219
class GRPC::Aborted < ::GRPC::BadStatus
  # @return [Aborted] a new instance of Aborted
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#220
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end

# GRPC status code corresponding to status ALREADY_EXISTS
#
# source://grpc//src/ruby/lib/grpc/errors.rb#169
class GRPC::AlreadyExists < ::GRPC::BadStatus
  # @return [AlreadyExists] a new instance of AlreadyExists
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#170
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end

# BadStatus is an exception class that indicates that an error occurred at
# either end of a GRPC connection.  When raised, it indicates that a status
# error should be returned to the other end of a GRPC connection; when
# caught it means that this end received a status error.
#
# There is also subclass of BadStatus in this module for each GRPC status.
# E.g., the GRPC::Cancelled class corresponds to status CANCELLED.
#
# See
# https://github.com/grpc/grpc/blob/master/include/grpc/impl/codegen/status.h
# for detailed descriptions of each status code.
#
# source://grpc//src/ruby/lib/grpc/errors.rb#32
class GRPC::BadStatus < ::StandardError
  include ::GRPC::Core::StatusCodes

  # @param code [Numeric] the status code
  # @param details [String] the details of the exception
  # @param metadata [Hash] the error's metadata
  # @return [BadStatus] a new instance of BadStatus
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#40
  def initialize(code, details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end

  # Returns the value of attribute code.
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#33
  def code; end

  # Returns the value of attribute debug_error_string.
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#33
  def debug_error_string; end

  # Returns the value of attribute details.
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#33
  def details; end

  # Returns the value of attribute metadata.
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#33
  def metadata; end

  # Converts the exception to a deserialized {Google::Rpc::Status} object.
  # Returns `nil` if the `grpc-status-details-bin` trailer could not be
  # converted to a {Google::Rpc::Status} due to the server not providing
  # the necessary trailers.
  #
  # @return [Google::Rpc::Status, nil]
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#69
  def to_rpc_status; end

  # Converts the exception to a {Struct::Status} for use in the networking
  # wrapper layer.
  #
  # @return [Struct::Status] with the same code and details
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#59
  def to_status; end

  class << self
    # source://grpc//src/ruby/lib/grpc/errors.rb#77
    def new_status_exception(code, details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
  end
end

# GRPC status code corresponding to status CANCELLED
#
# source://grpc//src/ruby/lib/grpc/errors.rb#119
class GRPC::Cancelled < ::GRPC::BadStatus
  # @return [Cancelled] a new instance of Cancelled
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#120
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end

# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#17
module GRPC::Core; end

# StatusCodes defines the canonical error codes used by gRPC for the RPC
# API.
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#20
module GRPC::Core::StatusCodes; end

# Aborted indicates the operation was aborted, typically due to a
# concurrency issue like sequencer check failures, transaction aborts,
# etc.
#
# See litmus test above for deciding between FailedPrecondition, Aborted,
# and Unavailable.
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#93
GRPC::Core::StatusCodes::ABORTED = T.let(T.unsafe(nil), Integer)

# AlreadyExists means an attempt to create an entity failed because one
# already exists.
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#53
GRPC::Core::StatusCodes::ALREADY_EXISTS = T.let(T.unsafe(nil), Integer)

# Canceled indicates the operation was canceled (typically by the caller).
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#25
GRPC::Core::StatusCodes::CANCELLED = T.let(T.unsafe(nil), Integer)

# DataLoss indicates unrecoverable data loss or corruption.
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#128
GRPC::Core::StatusCodes::DATA_LOSS = T.let(T.unsafe(nil), Integer)

# DeadlineExceeded means operation expired before completion. For
# operations that change the state of the system, this error may be
# returned even if the operation has completed successfully. For example,
# a successful response from a server could have been delayed long enough
# for the deadline to expire.
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#45
GRPC::Core::StatusCodes::DEADLINE_EXCEEDED = T.let(T.unsafe(nil), Integer)

# FailedPrecondition indicates operation was rejected because the system
# is not in a state required for the operation's execution. For example,
# directory to be deleted may be non-empty, an rmdir operation is applied
# to a non-directory, etc.
#
# A litmus test that may help a service implementor in deciding between
# FailedPrecondition, Aborted, and Unavailable:
#  (a) Use Unavailable if the client can retry just the failing call.
#  (b) Use Aborted if the client should retry at a higher-level (e.g.,
#      restarting a read-modify-write sequence).
#  (c) Use FailedPrecondition if the client should not retry until the
#      system state has been explicitly fixed. E.g., if an "rmdir" fails
#      because the directory is non-empty, FailedPrecondition should be
#      returned since the client should not retry unless they have first
#      fixed up the directory by deleting files from it.
#  (d) Use FailedPrecondition if the client performs conditional REST
#      Get/Update/Delete on a resource and the resource on the server does
#      not match the condition. E.g., conflicting read-modify-write on the
#      same resource.
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#85
GRPC::Core::StatusCodes::FAILED_PRECONDITION = T.let(T.unsafe(nil), Integer)

# Internal errors. Means some invariants expected by underlying system has
# been broken. If you see one of these errors, something is very broken.
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#116
GRPC::Core::StatusCodes::INTERNAL = T.let(T.unsafe(nil), Integer)

# InvalidArgument indicates client specified an invalid argument. Note
# that this differs from FailedPrecondition. It indicates arguments that
# are problematic regardless of the state of the system (e.g., a malformed
# file name).
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#38
GRPC::Core::StatusCodes::INVALID_ARGUMENT = T.let(T.unsafe(nil), Integer)

# NotFound means some requested entity (e.g., file or directory) was not
# found.
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#49
GRPC::Core::StatusCodes::NOT_FOUND = T.let(T.unsafe(nil), Integer)

# OK is returned on success.
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#22
GRPC::Core::StatusCodes::OK = T.let(T.unsafe(nil), Integer)

# OutOfRange means operation was attempted past the valid range. E.g.,
# seeking or reading past end of file.
#
# Unlike InvalidArgument, this error indicates a problem that may be fixed
# if the system state changes. For example, a 32-bit file system will
# generate InvalidArgument if asked to read at an offset that is not in
# the range [0,2^32-1], but it will generate OutOfRange if asked to read
# from an offset past the current file size.
#
# There is a fair bit of overlap between FailedPrecondition and
# OutOfRange. We recommend using OutOfRange (the more specific error) when
# it applies so that callers who are iterating through a space can easily
# look for an OutOfRange error to detect when they are done.
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#108
GRPC::Core::StatusCodes::OUT_OF_RANGE = T.let(T.unsafe(nil), Integer)

# PermissionDenied indicates the caller does not have permission to
# execute the specified operation. It must not be used for rejections
# caused by exhausting some resource (use ResourceExhausted instead for
# those errors). It must not be used if the caller cannot be identified
# (use Unauthenticated instead for those errors).
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#60
GRPC::Core::StatusCodes::PERMISSION_DENIED = T.let(T.unsafe(nil), Integer)

# ResourceExhausted indicates some resource has been exhausted, perhaps a
# per-user quota, or perhaps the entire file system is out of space.
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#64
GRPC::Core::StatusCodes::RESOURCE_EXHAUSTED = T.let(T.unsafe(nil), Integer)

# Unauthenticated indicates the request does not have valid authentication
# credentials for the operation.
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#132
GRPC::Core::StatusCodes::UNAUTHENTICATED = T.let(T.unsafe(nil), Integer)

# Unavailable indicates the service is currently unavailable. This is a
# most likely a transient condition and may be corrected by retrying with
# a backoff. Note that it is not always safe to retry non-idempotent
# operations.
#
# See litmus test above for deciding between FailedPrecondition, Aborted,
# and Unavailable.
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#125
GRPC::Core::StatusCodes::UNAVAILABLE = T.let(T.unsafe(nil), Integer)

# Unimplemented indicates operation is not implemented or not
# supported/enabled in this service.
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#112
GRPC::Core::StatusCodes::UNIMPLEMENTED = T.let(T.unsafe(nil), Integer)

# Unknown error. An example of where this error may be returned is if a
# Status value received from another address space belongs to an
# error-space that is not known in this address space. Also errors raised
# by APIs that do not return enough error information may be converted to
# this error.
#
# source://grpc//src/ruby/lib/grpc/core/status_codes.rb#32
GRPC::Core::StatusCodes::UNKNOWN = T.let(T.unsafe(nil), Integer)

# GRPC status code corresponding to status DATA_LOSS
#
# source://grpc//src/ruby/lib/grpc/errors.rb#269
class GRPC::DataLoss < ::GRPC::BadStatus
  # @return [DataLoss] a new instance of DataLoss
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#270
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end

# GRPC status code corresponding to status DEADLINE_EXCEEDED
#
# source://grpc//src/ruby/lib/grpc/errors.rb#149
class GRPC::DeadlineExceeded < ::GRPC::BadStatus
  # @return [DeadlineExceeded] a new instance of DeadlineExceeded
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#150
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end

# GRPC status code corresponding to status FAILED_PRECONDITION
#
# source://grpc//src/ruby/lib/grpc/errors.rb#209
class GRPC::FailedPrecondition < ::GRPC::BadStatus
  # @return [FailedPrecondition] a new instance of FailedPrecondition
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#210
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end

# GoogleRpcStatusUtils provides utilities to convert between a
# GRPC::Core::Status and a deserialized Google::Rpc::Status proto
# Returns nil if the grpc-status-details-bin trailer could not be
# converted to a GoogleRpcStatus due to the server not providing
# the necessary trailers.
# Raises an error if the server did provide the necessary trailers
# but they fail to deseriliaze into a GoogleRpcStatus protobuf.
#
# source://grpc//src/ruby/lib/grpc/google_rpc_status_utils.rb#26
class GRPC::GoogleRpcStatusUtils
  class << self
    # source://grpc//src/ruby/lib/grpc/google_rpc_status_utils.rb#27
    def extract_google_rpc_status(status); end
  end
end

# GRPC status code corresponding to status INTERNAL
#
# source://grpc//src/ruby/lib/grpc/errors.rb#249
class GRPC::Internal < ::GRPC::BadStatus
  # @return [Internal] a new instance of Internal
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#250
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end

# GRPC status code corresponding to status INVALID_ARGUMENT
#
# source://grpc//src/ruby/lib/grpc/errors.rb#139
class GRPC::InvalidArgument < ::GRPC::BadStatus
  # @return [InvalidArgument] a new instance of InvalidArgument
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#140
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end

# GRPC status code corresponding to status NOT_FOUND
#
# source://grpc//src/ruby/lib/grpc/errors.rb#159
class GRPC::NotFound < ::GRPC::BadStatus
  # @return [NotFound] a new instance of NotFound
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#160
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end

# GRPC status code corresponding to status OK
#
# source://grpc//src/ruby/lib/grpc/errors.rb#109
class GRPC::Ok < ::GRPC::BadStatus
  # @return [Ok] a new instance of Ok
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#110
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end

# GRPC status code corresponding to status OUT_OF_RANGE
#
# source://grpc//src/ruby/lib/grpc/errors.rb#229
class GRPC::OutOfRange < ::GRPC::BadStatus
  # @return [OutOfRange] a new instance of OutOfRange
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#230
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end

# GRPC status code corresponding to status PERMISSION_DENIED
#
# source://grpc//src/ruby/lib/grpc/errors.rb#179
class GRPC::PermissionDenied < ::GRPC::BadStatus
  # @return [PermissionDenied] a new instance of PermissionDenied
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#180
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end

# GRPC status code corresponding to status RESOURCE_EXHAUSTED
#
# source://grpc//src/ruby/lib/grpc/errors.rb#199
class GRPC::ResourceExhausted < ::GRPC::BadStatus
  # @return [ResourceExhausted] a new instance of ResourceExhausted
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#200
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end

# GRPC status code corresponding to status UNAUTHENTICATED
#
# source://grpc//src/ruby/lib/grpc/errors.rb#189
class GRPC::Unauthenticated < ::GRPC::BadStatus
  # @return [Unauthenticated] a new instance of Unauthenticated
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#190
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end

# GRPC status code corresponding to status UNAVAILABLE
#
# source://grpc//src/ruby/lib/grpc/errors.rb#259
class GRPC::Unavailable < ::GRPC::BadStatus
  # @return [Unavailable] a new instance of Unavailable
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#260
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end

# GRPC status code corresponding to status UNIMPLEMENTED
#
# source://grpc//src/ruby/lib/grpc/errors.rb#239
class GRPC::Unimplemented < ::GRPC::BadStatus
  # @return [Unimplemented] a new instance of Unimplemented
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#240
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end

# GRPC status code corresponding to status UNKNOWN
#
# source://grpc//src/ruby/lib/grpc/errors.rb#129
class GRPC::Unknown < ::GRPC::BadStatus
  # @return [Unknown] a new instance of Unknown
  #
  # source://grpc//src/ruby/lib/grpc/errors.rb#130
  def initialize(details = T.unsafe(nil), metadata = T.unsafe(nil), debug_error_string = T.unsafe(nil)); end
end
