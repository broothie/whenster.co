# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-cloud-trace` gem.
# Please instead update this file by running `bin/tapioca gem google-cloud-trace`.

# source://google-cloud-trace//lib/google-cloud-trace.rb#27
module Google; end

# source://google-cloud-trace//lib/google-cloud-trace.rb#28
module Google::Cloud
  # source://google-cloud-error_reporting/0.42.2/lib/google-cloud-error_reporting.rb#60
  def error_reporting(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # source://google-cloud-logging/2.3.2/lib/google-cloud-logging.rb#67
  def logging(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # source://google-cloud-storage/1.44.0/lib/google-cloud-storage.rb#76
  def storage(scope: T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil), open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), send_timeout: T.unsafe(nil), max_elapsed_time: T.unsafe(nil), base_interval: T.unsafe(nil), max_interval: T.unsafe(nil), multiplier: T.unsafe(nil)); end

  # Creates a new object for connecting to the Stackdriver Trace service.
  # Each call creates a new connection.
  #
  # For more information on connecting to Google Cloud see the
  # {file:AUTHENTICATION.md Authentication Guide}.
  #
  # @example
  #   require "google/cloud"
  #
  #   gcloud = Google::Cloud.new
  #   trace_client = gcloud.trace
  #
  #   traces = trace_client.list_traces Time.now - 3600, Time.now
  #   traces.each do |trace|
  #   puts "Retrieved trace ID: #{trace.trace_id}"
  #   end
  # @param scope [String, Array<String>] The OAuth 2.0 scopes controlling the
  #   set of resources and operations that the connection can access. See
  #   [Using OAuth 2.0 to Access Google
  #   APIs](https://developers.google.com/identity/protocols/OAuth2).
  #
  #   The default scope is:
  #
  #   * `https://www.googleapis.com/auth/cloud-platform`
  # @param timeout [Integer] Default timeout to use in requests. Optional.
  # @return [Google::Cloud::Trace::Project]
  #
  # source://google-cloud-trace//lib/google-cloud-trace.rb#60
  def trace(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  class << self
    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#158
    def auto_load_files; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#128
    def auto_load_gems; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#91
    def configure; end

    # source://google-cloud-env/1.6.0/lib/google/cloud/env.rb#490
    def env; end

    # source://google-cloud-error_reporting/0.42.2/lib/google-cloud-error_reporting.rb#105
    def error_reporting(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#103
    def init_configuration; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#142
    def loaded_files; end

    # source://google-cloud-logging/2.3.2/lib/google-cloud-logging.rb#109
    def logging(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#62
    def new(project_id = T.unsafe(nil), credentials = T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-storage/1.44.0/lib/google-cloud-storage.rb#135
    def storage(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil), open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), send_timeout: T.unsafe(nil), max_elapsed_time: T.unsafe(nil), base_interval: T.unsafe(nil), max_interval: T.unsafe(nil), multiplier: T.unsafe(nil)); end

    # Creates a new object for connecting to the Stackdriver Trace service.
    # Each call creates a new connection.
    #
    # For more information on connecting to Google Cloud see the
    # {file:AUTHENTICATION.md Authentication Guide}.
    #
    # @example
    #   require "google/cloud"
    #
    #   trace_client = Google::Cloud.trace
    #
    #   traces = trace_client.list_traces Time.now - 3600, Time.now
    #   traces.each do |trace|
    #   puts "Retrieved trace ID: #{trace.trace_id}"
    #   end
    # @param project_id [String] Project identifier for the Stackdriver Trace
    #   service you are connecting to. If not present, the default project for
    #   the credentials is used.
    # @param credentials [String, Hash, Google::Auth::Credentials] The path to
    #   the keyfile as a String, the contents of the keyfile as a Hash, or a
    #   Google::Auth::Credentials object. (See {Trace::Credentials})
    # @param scope [String, Array<String>] The OAuth 2.0 scopes controlling the
    #   set of resources and operations that the connection can access. See
    #   [Using OAuth 2.0 to Access Google
    #   APIs](https://developers.google.com/identity/protocols/OAuth2).
    #
    #   The default scope is:
    #
    #   * `https://www.googleapis.com/auth/cloud-platform`
    # @param timeout [Integer] Default timeout to use in requests. Optional.
    # @return [Google::Cloud::Trace::Project]
    #
    # source://google-cloud-trace//lib/google-cloud-trace.rb#101
    def trace(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end
  end
end

# # Stackdriver Trace
#
# The Stackdriver Trace service collects and stores latency data from your
# application and displays it in the Google Cloud Platform Console, giving
# you detailed near-real-time insight into application performance.
#
# See {file:OVERVIEW.md Stackdriver Trace Overview}.
#
# source://google-cloud-trace//lib/google/cloud/trace/version.rb#18
module Google::Cloud::Trace
  class << self
    # Configure the Stackdriver Trace instrumentation Middleware.
    #
    # The following Stackdriver Trace configuration parameters are
    # supported:
    #
    # * `project_id` - (String) Project identifier for the Stackdriver
    #   Trace service you are connecting to. (The parameter `project` is
    #   considered deprecated, but may also be used.)
    # * `credentials` - (String, Hash, Google::Auth::Credentials) The path to
    #   the keyfile as a String, the contents of the keyfile as a Hash, or a
    #   Google::Auth::Credentials object. (See {Trace::Credentials}) (The
    #   parameter `keyfile` is considered deprecated, but may also be used.)
    # * `scope` - (String, Array<String>) The OAuth 2.0 scopes controlling
    #   the set of resources and operations that the connection can access.
    # * `timeout` - (Integer) Default timeout to use in requests.
    # * `endpoint` - (String) Override of the endpoint host name, or `nil`
    #   to use the default endpoint.
    # * `capture_stack` - (Boolean) Whether to capture stack traces for each
    #   span. Default: `false`
    # * `sampler` - (Proc) A sampler Proc makes the decision whether to record
    #   a trace for each request. Default: `Google::Cloud::Trace::TimeSampler`
    # * `span_id_generator` - (Proc) A generator Proc that generates the name
    #   String for new TraceRecord. Default: `random numbers`
    # * `notifications` - (Array) An array of ActiveSupport notification types
    #   to include in traces. Rails-only option. Default:
    #   `Google::Cloud::Trace::Railtie::DEFAULT_NOTIFICATIONS`
    # * `max_data_length` - (Integer) The maximum length of span properties
    #   recorded with ActiveSupport notification events. Rails-only option.
    #   Default:
    #   `Google::Cloud::Trace::Notifications::DEFAULT_MAX_DATA_LENGTH`
    # * `on_error` - (Proc) A Proc to be run when an error is encountered
    #   during the reporting of traces by the middleware. The Proc must take
    #   the error object as the single argument.
    #
    # See the {file:INSTRUMENTATION.md Configuration Guide} for full
    # configuration parameters.
    #
    # @return [Google::Cloud::Config] The configuration object
    #   the Google::Cloud::Trace module uses.
    # @yield [Google::Cloud.configure.trace]
    #
    # source://google-cloud-trace//lib/google/cloud/trace.rb#154
    def configure; end

    # @private Default credentials.
    #
    # source://google-cloud-trace//lib/google/cloud/trace.rb#170
    def default_credentials(scope: T.unsafe(nil)); end

    # @private Default project.
    #
    # source://google-cloud-trace//lib/google/cloud/trace.rb#162
    def default_project_id; end

    # Retrieve the current trace span or trace object for the current thread.
    # This data should previously have been set using
    # {Google::Cloud::Trace.set}.
    #
    # @example
    #   require "google/cloud/trace"
    #
    #   trace_client = Google::Cloud::Trace.new
    #   trace = trace_client.new_trace
    #   Google::Cloud::Trace.set trace
    #
    #   # Later...
    #   Google::Cloud::Trace.get.create_span "my_span"
    # @return [Google::Cloud::Trace::TraceSpan, Google::Cloud::Trace::TraceRecord, nil] The span or trace object,
    #   or `nil`.
    #
    # source://google-cloud-trace//lib/google/cloud/trace.rb#231
    def get; end

    # Open a new span for the current thread, instrumenting the given block.
    # The span is created within the current thread's trace context as set by
    # {Google::Cloud::Trace.set}. The context is updated so any further calls
    # within the block will create subspans. The new span is also yielded to
    # the block.
    #
    # Does nothing if there is no trace context for the current thread.
    #
    # @example
    #   require "google/cloud/trace"
    #
    #   trace_client = Google::Cloud::Trace.new
    #   trace = trace_client.new_trace
    #   Google::Cloud::Trace.set trace
    #
    #   Google::Cloud::Trace.in_span "my_span" do |span|
    #   span.labels["foo"] = "bar"
    #   # Do stuff...
    #
    #   Google::Cloud::Trace.in_span "my_subspan" do |subspan|
    #   subspan.labels["foo"] = "sub-bar"
    #   # Do other stuff...
    #   end
    #   end
    # @param name [String] Name of the span to create
    # @param kind [Google::Cloud::Trace::SpanKind] Kind of span to create.
    #   Optional.
    # @param labels [Hash{String => String}] Labels for the span
    #
    # source://google-cloud-trace//lib/google/cloud/trace.rb#266
    def in_span(name, kind: T.unsafe(nil), labels: T.unsafe(nil)); end

    # Creates a new object for connecting to the Stackdriver Trace service.
    # Each call creates a new connection.
    #
    # For more information on connecting to Google Cloud see the
    # {file:AUTHENTICATION.md Authentication Guide}.
    #
    # @example
    #   require "google/cloud/trace"
    #
    #   trace_client = Google::Cloud::Trace.new
    #
    #   traces = trace_client.list_traces Time.now - 3600, Time.now
    #   traces.each do |trace|
    #   puts "Retrieved trace ID: #{trace.trace_id}"
    #   end
    # @param project_id [String] Project identifier for the Stackdriver Trace
    #   service you are connecting to. If not present, the default project for
    #   the credentials is used.
    # @param credentials [String, Hash, Google::Auth::Credentials] The path to
    #   the keyfile as a String, the contents of the keyfile as a Hash, or a
    #   Google::Auth::Credentials object. (See {Trace::Credentials})
    # @param scope [String, Array<String>] The OAuth 2.0 scopes controlling
    #   the set of resources and operations that the connection can access.
    #   See [Using OAuth 2.0 to Access Google
    #   APIs](https://developers.google.com/identity/protocols/OAuth2).
    #
    #   The default scope is:
    #
    #   * `https://www.googleapis.com/auth/cloud-platform`
    # @param timeout [Integer] Default timeout to use in requests. Optional.
    # @param project [String] Alias for the `project_id` argument. Deprecated.
    # @param keyfile [String] Alias for the `credentials` argument.
    #   Deprecated.
    # @param endpoint [String] Override of the endpoint host name. Optional.
    #   If the param is nil, uses the default endpoint.
    # @raise [ArgumentError]
    # @return [Google::Cloud::Trace::Project]
    #
    # source://google-cloud-trace//lib/google/cloud/trace.rb#89
    def new(project_id: T.unsafe(nil), credentials: T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil), endpoint: T.unsafe(nil), project: T.unsafe(nil), keyfile: T.unsafe(nil)); end

    # @private Resolve credentials
    #
    # source://google-cloud-trace//lib/google/cloud/trace.rb#178
    def resolve_credentials(credentials, scope); end

    # Set the current trace span being measured for the current thread, or
    # the current trace if no span is currently open. This may be used with
    # web frameworks that assign a thread to each request, to track the
    # trace instrumentation state for the request being handled. You may use
    # {Google::Cloud::Trace.get} to retrieve the data.
    #
    # @example
    #   require "google/cloud/trace"
    #
    #   trace_client = Google::Cloud::Trace.new
    #   trace = trace_client.new_trace
    #   Google::Cloud::Trace.set trace
    #
    #   # Later...
    #   Google::Cloud::Trace.get.create_span "my_span"
    # @param trace [Google::Cloud::Trace::TraceSpan, Google::Cloud::Trace::TraceRecord, nil] The current span
    #   being measured, the current trace object, or `nil` if none.
    #
    # source://google-cloud-trace//lib/google/cloud/trace.rb#206
    def set(trace); end
  end
end

# # AsyncPatchTracesError
#
# Used to indicate a problem when patching traces to the API. This can
# occur when the API returns an error.
#
# source://google-cloud-trace//lib/google/cloud/trace/errors.rb#46
class Google::Cloud::Trace::AsyncPatchTracesError < ::Google::Cloud::Error
  # @return [AsyncPatchTracesError] a new instance of AsyncPatchTracesError
  #
  # source://google-cloud-trace//lib/google/cloud/trace/errors.rb#52
  def initialize(message, traces = T.unsafe(nil)); end

  # Returns the value of attribute traces.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/errors.rb#50
  def traces; end
end

# # AsyncReporter
#
# asynchronously buffer traces and push batches to Stackdriver Trace
# service when used in a Rack-based application.
#
# @private Used by the {Google::Cloud::Trace::Middleware} to
#
# source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#29
class Google::Cloud::Trace::AsyncReporter
  include ::MonitorMixin

  # @private Creates a new AsyncReporter instance.
  # @return [AsyncReporter] a new instance of AsyncReporter
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#39
  def initialize(service, max_count: T.unsafe(nil), max_bytes: T.unsafe(nil), max_queue: T.unsafe(nil), interval: T.unsafe(nil), threads: T.unsafe(nil)); end

  # Forces all traces in the current batch to be patched to the API
  # immediately.
  #
  # @return [AsyncReporter] returns self so calls can be chained.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#154
  def flush!; end

  # @private Implementation accessors
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#34
  def interval; end

  # @private Implementation accessors
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#34
  def max_bytes; end

  # @private Implementation accessors
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#34
  def max_count; end

  # @private Implementation accessors
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#34
  def max_queue; end

  # Register to be notified of errors when raised.
  #
  # If an unhandled error has occurred the reporter will attempt to
  # recover from the error and resume buffering, batching, and patching
  # traces.
  #
  # Multiple error handlers can be added.
  #
  # @yield [callback] The block to be called when an error is raised.
  # @yieldparam error [Exception] The error raised.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#193
  def on_error(&block); end

  # Add the traces to the queue to be reported to Stackdriver Trace
  # asynchronously. Signal the child thread to start processing the queue.
  #
  # @param traces [Google::Cloud::Trace::TraceRecord, Array{Google::Cloud::Trace::TraceRecord}] Either a single
  #   trace object or an array of trace objects.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#67
  def patch_traces(traces); end

  # Get the project id from underlying service object.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#96
  def project; end

  # @private Implementation accessors
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#34
  def service; end

  # Whether the reporter has been started.
  #
  # @return [boolean] `true` when started, `false` otherwise.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#168
  def started?; end

  # Begins the process of stopping the reporter. Traces already in the
  # queue will be published, but no new traces can be added. Use {#wait!}
  # to block until the reporter is fully stopped and all pending traces
  # have been pushed to the API.
  #
  # @return [AsyncReporter] returns self so calls can be chained.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#107
  def stop; end

  # Stop this asynchronous reporter and block until it has been stopped.
  #
  # @param timeout [Number] Timeout in seconds.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#125
  def stop!(timeout = T.unsafe(nil)); end

  # Whether the reporter has been stopped.
  #
  # @return [boolean] `true` when stopped, `false` otherwise.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#177
  def stopped?; end

  # @private Implementation accessors
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#34
  def threads; end

  # Blocks until the reporter is fully stopped, all pending traces have
  # been published, and all callbacks have completed. Does not stop the
  # reporter. To stop the reporter, first call {#stop} and then call
  # {#wait!} to block until the reporter is stopped.
  #
  # @return [AsyncReporter] returns self so calls can be chained.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#137
  def wait!(timeout = T.unsafe(nil)); end

  protected

  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#282
  def default_error_callbacks; end

  # Calls all error callbacks.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#275
  def error!(error); end

  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#201
  def init_resources!; end

  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#228
  def patch_batch!; end

  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#236
  def patch_traces_async(batch); end

  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#252
  def patch_traces_with(traces); end

  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#264
  def raise_stopped_error(traces); end

  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#208
  def run_background; end
end

# @private
#
# source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#297
class Google::Cloud::Trace::AsyncReporter::Batch
  # @return [Batch] a new instance of Batch
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#301
  def initialize(reporter); end

  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#308
  def add(trace, addl_bytes: T.unsafe(nil)); end

  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#345
  def addl_bytes_for(trace); end

  # Returns the value of attribute created_at.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#298
  def created_at; end

  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#334
  def publish_at; end

  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#339
  def publish_wait; end

  # @return [Boolean]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#328
  def ready?; end

  # Returns the value of attribute traces.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#299
  def traces; end

  # source://google-cloud-trace//lib/google/cloud/trace/async_reporter.rb#316
  def try_add(trace); end
end

# # AsyncReporterError
#
# Used to indicate a problem preventing traces from being buffered
# asynchronously. This can occur when there are not enough resources
# allocated for the amount of usage.
#
# source://google-cloud-trace//lib/google/cloud/trace/errors.rb#28
class Google::Cloud::Trace::AsyncReporterError < ::Google::Cloud::Error
  # @return [AsyncReporterError] a new instance of AsyncReporterError
  #
  # source://google-cloud-trace//lib/google/cloud/trace/errors.rb#34
  def initialize(message, traces = T.unsafe(nil)); end

  # Returns the value of attribute traces.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/errors.rb#32
  def traces; end
end

# # Credentials
#
# Represents the authentication and authorization used to connect to the
# Stackdriver Trace API.
#
# @example
#   require "google/cloud/trace"
#
#   keyfile = "/path/to/keyfile.json"
#   creds = Google::Cloud::Trace::Credentials.new keyfile
#
#   trace = Google::Cloud::Trace.new(
#   project_id: "my-project",
#   credentials: creds
#   )
#
#   trace.project_id #=> "my-project"
#
# source://google-cloud-trace//lib/google/cloud/trace/credentials.rb#40
class Google::Cloud::Trace::Credentials < ::Google::Cloud::Trace::V1::TraceService::Credentials; end

# A collection of well-known label keys for trace spans.
#
# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#24
module Google::Cloud::Trace::LabelKey
  class << self
    # Set the stack trace label in the given labels hash. The current call
    # stack is formatted so the Stackdriver UI will display it.
    #
    # @example
    #   require "google/cloud/trace"
    #
    #   trace_record = Google::Cloud::Trace::TraceRecord.new "my-project"
    #   span = trace_record.create_span "root_span"
    #   Google::Cloud::Trace::LabelKey.set_stack_trace span.labels
    # @param labels [Hash] The labels hash in which to set the stack trace
    #   label value.
    # @param stack_frames [Array<Thread::Backtrace::Location>] The current
    #   caller stack as returned from `::Kernel.caller_locations`. If
    #   not set, `::Kernel.caller_locations` is called internally.
    # @param skip_frames [Integer] Passed to the internal invocation of
    #   `::Kernel.caller_locations` if one is needed.
    # @param truncate_stack [Proc] A procedure that allows skipping of
    #   the "topmost" stack frames. Stack frames, represented by
    #   instances of `Thread::Backtrace::Location`, are passed to this
    #   proc beginning with the topmost frame. As long as the proc
    #   returns a falsy value, those frames are dropped. Once the proc
    #   returns true for the first time, that frame and all remaining
    #   frames (possibly subject to `filter_stack`) are used. If not set,
    #   no frames are skipped.
    # @param filter_stack [Proc] A procedure that allows skipping of
    #   stack frames in the middle of the stack trace. After possibly
    #   skipping frames using `truncate_stack`, all remaining frames are
    #   passed to this proc as `Thread::Backtrace::Location` objects.
    #   Those for whom the proc returns a falsy value are skipped. If
    #   this parameter is not set, no filtering is done and all frames
    #   are presented in the stack trace.
    #
    # source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#114
    def set_stack_trace(labels, stack_frames: T.unsafe(nil), skip_frames: T.unsafe(nil), truncate_stack: T.unsafe(nil), filter_stack: T.unsafe(nil)); end
  end
end

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#25
Google::Cloud::Trace::LabelKey::AGENT = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#26
Google::Cloud::Trace::LabelKey::COMPONENT = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#27
Google::Cloud::Trace::LabelKey::ERROR_MESSAGE = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#28
Google::Cloud::Trace::LabelKey::ERROR_NAME = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#45
Google::Cloud::Trace::LabelKey::GAE_APPLICATION_ERROR = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#46
Google::Cloud::Trace::LabelKey::GAE_APP_MODULE = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#47
Google::Cloud::Trace::LabelKey::GAE_APP_MODULE_VERSION = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#48
Google::Cloud::Trace::LabelKey::GAE_APP_VERSION = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#49
Google::Cloud::Trace::LabelKey::GAE_DATASTORE_COUNT = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#50
Google::Cloud::Trace::LabelKey::GAE_DATASTORE_CURSOR = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#51
Google::Cloud::Trace::LabelKey::GAE_DATASTORE_ENTITY_WRITES = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#52
Google::Cloud::Trace::LabelKey::GAE_DATASTORE_HAS_ANCESTOR = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#53
Google::Cloud::Trace::LabelKey::GAE_DATASTORE_HAS_CURSOR = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#54
Google::Cloud::Trace::LabelKey::GAE_DATASTORE_HAS_TRANSACTION = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#56
Google::Cloud::Trace::LabelKey::GAE_DATASTORE_INDEX_WRITES = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#57
Google::Cloud::Trace::LabelKey::GAE_DATASTORE_KIND = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#58
Google::Cloud::Trace::LabelKey::GAE_DATASTORE_LIMIT = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#59
Google::Cloud::Trace::LabelKey::GAE_DATASTORE_MORE_RESULTS = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#60
Google::Cloud::Trace::LabelKey::GAE_DATASTORE_OFFSET = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#61
Google::Cloud::Trace::LabelKey::GAE_DATASTORE_REQUESTED_ENTITY_DELETES = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#63
Google::Cloud::Trace::LabelKey::GAE_DATASTORE_REQUESTED_ENTITY_PUTS = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#65
Google::Cloud::Trace::LabelKey::GAE_DATASTORE_SIZE = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#66
Google::Cloud::Trace::LabelKey::GAE_DATASTORE_SKIPPED = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#67
Google::Cloud::Trace::LabelKey::GAE_DATASTORE_TRANSACTION_HANDLE = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#69
Google::Cloud::Trace::LabelKey::GAE_ERROR_MESSAGE = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#70
Google::Cloud::Trace::LabelKey::GAE_MEMCACHE_COUNT = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#71
Google::Cloud::Trace::LabelKey::GAE_MEMCACHE_SIZE = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#72
Google::Cloud::Trace::LabelKey::GAE_REQUEST_LOG_ID = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#29
Google::Cloud::Trace::LabelKey::HTTP_CLIENT_CITY = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#30
Google::Cloud::Trace::LabelKey::HTTP_CLIENT_COUNTRY = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#31
Google::Cloud::Trace::LabelKey::HTTP_CLIENT_PROTOCOL = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#32
Google::Cloud::Trace::LabelKey::HTTP_CLIENT_REGION = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#33
Google::Cloud::Trace::LabelKey::HTTP_HOST = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#34
Google::Cloud::Trace::LabelKey::HTTP_METHOD = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#35
Google::Cloud::Trace::LabelKey::HTTP_REDIRECTED_URL = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#36
Google::Cloud::Trace::LabelKey::HTTP_REQUEST_SIZE = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#37
Google::Cloud::Trace::LabelKey::HTTP_RESPONSE_SIZE = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#38
Google::Cloud::Trace::LabelKey::HTTP_STATUS_CODE = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#39
Google::Cloud::Trace::LabelKey::HTTP_URL = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#40
Google::Cloud::Trace::LabelKey::HTTP_USER_AGENT = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#41
Google::Cloud::Trace::LabelKey::PID = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#74
Google::Cloud::Trace::LabelKey::RPC_HOST = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#76
Google::Cloud::Trace::LabelKey::RPC_REQUEST_SIZE = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#75
Google::Cloud::Trace::LabelKey::RPC_REQUEST_TYPE = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#77
Google::Cloud::Trace::LabelKey::RPC_RESPONSE_SIZE = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#78
Google::Cloud::Trace::LabelKey::RPC_STATUS_CODE = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#42
Google::Cloud::Trace::LabelKey::STACKTRACE = T.let(T.unsafe(nil), String)

# source://google-cloud-trace//lib/google/cloud/trace/label_key.rb#43
Google::Cloud::Trace::LabelKey::TID = T.let(T.unsafe(nil), String)

# # Trace Middleware
#
# A Rack middleware that manages trace context and captures a trace of
# the request. Specifically, it:
#
# *   Reads the trace context from the request headers, if present.
#     Otherwise, generates a new trace context.
# *   Makes a sampling decision if one is not already specified.
# *   Records a span measuring the entire handling of the request,
#     annotated with a set of standard request data.
# *   Makes the trace context available so downstream middlewares and the
#     app can add further spans to the trace.
# *   Sends the completed trace to the Stackdriver service.
#
# ## Installing
#
# To use this middleware, simply install it in your middleware stack.
# Here is an example Sinatra application that includes the Trace
# middleware:
#
# ```ruby
# # Simple sinatra application
#
# require "sinatra"
# require "google/cloud/trace"
#
# use Google::Cloud::Trace::Middleware
#
# get "/" do
#   "Hello World!"
# end
# ```
#
# Here is an example `config.ru` file for a web application that uses
# the standard Rack configuration mechanism.
#
# ```ruby
# # config.ru for simple Rack application
#
# require "google/cloud/trace"
# use Google::Cloud::Trace::Middleware
#
# run MyApp
# ```
#
# If your application uses Ruby On Rails, you may also use the provided
# {Google::Cloud::Trace::Railtie} for close integration with Rails and
# ActiveRecord.
#
# ## Custom measurements
#
# By default, this middleware creates traces that measure just the http
# request handling as a whole. If you want to provide more detailed
# measurements of smaller processes, use the classes provided in this
# library. Below is a Sinatra example to get you started.
#
# ```ruby
# # Simple sinatra application
#
# require "sinatra"
# require "google/cloud/trace"
#
# use Google::Cloud::Trace::Middleware
#
# get "/" do
#   Google::Cloud::Trace.in_span "Sleeping on the job!" do
#     sleep rand
#   end
#   "Hello World!"
# end
# ```
#
# ## Error handling
#
# An error encountered during the reporting of traces by the middleware
# can be handled using a Proc set in the `on_error` configuration. (See
# {Google::Cloud::Trace.configure}.) The Proc must take the error object
# as the single argument.
#
# ```ruby
# # Configure error handling
#
# require "sinatra"
# require "google/cloud/trace"
# require "google/cloud/error_reporting"
#
# Google::Cloud::Trace.configure do |config|
#   config.on_error = lambda do |error|
#     Google::Cloud::ErrorReporting.report error
#   end
# end
#
# use Google::Cloud::Trace::Middleware
#
# get "/" do
#   Google::Cloud::Trace.in_span "Sleeping on the job!" do
#     sleep rand
#   end
#   "Hello World!"
# end
# ```
#
# ## Sampling and blacklisting
#
# A sampler makes the decision whether to record a trace for each
# request (if the decision was not made by the context, e.g. by providing
# a request header). By default, this sampler is the default
# {Google::Cloud::Trace::TimeSampler}, which enforces a maximum QPS per
# process, and blacklists a small number of request paths such as
# health checks sent by Google App Engine. You may adjust this behavior
# by providing an alternate sampler. See
# {Google::Cloud::Trace::TimeSampler}.
#
# source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#137
class Google::Cloud::Trace::Middleware
  # Create a new Middleware for traces
  #
  # @param app [Rack Application] Rack application
  # @param service [Google::Cloud::Trace::Service, AsyncReporter] The service object to update traces. Optional if running on GCE.
  # @param kwargs [Hash] Hash of configuration settings. Used for backward
  #   API compatibility. See the {file:INSTRUMENTATION.md Instrumentation
  #   Guide} and [Configuration
  #   Guide](https://googleapis.dev/ruby/stackdriver/latest/file.INSTRUMENTATION_CONFIGURATION.html)
  #   for the prefered way to set configuration parameters.
  # @return [Middleware] a new instance of Middleware
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#154
  def initialize(app, service: T.unsafe(nil), **kwargs); end

  # Implementation of the trace middleware. Creates a trace for this
  # request, populates it with a root span for the entire request, and
  # ensures it is reported back to Stackdriver.
  #
  # @param env [Hash] Rack environment hash
  # @return [Rack::Response] The response from downstream Rack app
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#181
  def call(env); end

  # Performs post-request tasks, including adding result-dependent
  # labels to the root span, and adding trace context headers to the
  # HTTP response.
  #
  # @param span [Google::Cloud::Trace::TraceSpan] The root span to
  #   configure.
  # @param result [Array] The Rack response.
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#373
  def configure_result(span, result); end

  # Configures the root span for this request. This may be called
  # before the request is actually handled because it doesn't depend
  # on the result.
  #
  # @param span [Google::Cloud::Trace::TraceSpan] The root span to
  #   configure.
  # @param env [Hash] Rack environment hash
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#302
  def configure_span(span, env); end

  # Create a new trace for this request.
  #
  # @param env [Hash] The Rack environment.
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#227
  def create_trace(env); end

  # Gets the URI hostname from the given Rack environment.
  #
  # @param env [Hash] Rack environment hash
  # @private
  # @return [String] The hostname.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#271
  def get_host(env); end

  # Gets the URI path from the given Rack environment.
  #
  # @param env [Hash] Rack environment hash
  # @private
  # @return [String] The URI path.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#258
  def get_path(env); end

  # Gets the current trace context from the given Rack environment.
  # Makes a sampling decision if one has not been made already.
  #
  # @param env [Hash] Rack environment hash
  # @private
  # @return [Stackdriver::Core::TraceContext] The trace context.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#205
  def get_trace_context(env); end

  # Gets the full URL from the given Rack environment.
  #
  # @param env [Hash] Rack environment hash
  # @private
  # @return [String] The URL.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#282
  def get_url(env); end

  # Send the given trace to the trace service, if requested.
  #
  # @param trace [Google::Cloud::Trace::TraceRecord] The trace to send.
  # @param env [Hash] The Rack environment.
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#242
  def send_trace(trace, env); end

  # Configures standard labels.
  #
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#314
  def set_basic_labels(labels, env); end

  # Configures stack and gae labels.
  #
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#337
  def set_extended_labels(labels, capture_stack); end

  # Sets the given label if the given value is a proper string.
  #
  # @param labels [Hash] The labels hash.
  # @param key [String] The key of the label to set.
  # @param value [Object] The value to set.
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#359
  def set_label(labels, key, value); end

  private

  # @private Get Google::Cloud::Trace.configure
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#413
  def configuration; end

  # This value is memoized to reduce calls to the configuration.
  #
  # @private Get the error callback from the configuration.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#420
  def error_callback; end

  # @private Handle errors raised when making patch_traces API calls.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#434
  def handle_error(error, logger: T.unsafe(nil)); end

  # Fallback to default configuration values if not defined already
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#405
  def init_default_config; end

  # Consolidate configurations from various sources. Also set
  # instrumentation config parameters to default values if not set
  # already.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#390
  def load_config(**kwargs); end
end

# The name of this trace agent as reported to the Stackdriver backend.
#
# source://google-cloud-trace//lib/google/cloud/trace/middleware.rb#140
Google::Cloud::Trace::Middleware::AGENT_NAME = T.let(T.unsafe(nil), String)

# Utility methods for configuring ActiveSupport notifications to generate
# spans in the current trace.
#
# source://google-cloud-trace//lib/google/cloud/trace/notifications.rb#23
module Google::Cloud::Trace::Notifications
  class << self
    # @private
    #
    # source://google-cloud-trace//lib/google/cloud/trace/notifications.rb#83
    def handle_notification_event(event, maxlen, label_namespace, capture_stack); end

    # Subscribes to the given event type or any type matching the given
    # pattern. When an event is raised, a span is generated in the current
    # thread's trace. The event payload is exposed as labels on the span.
    # If there is no active trace for the current thread, then no span is
    # generated.
    #
    # @example
    #
    #   require "google/cloud/trace"
    #   require "active_record"
    #
    #   Google::Cloud::Trace::Notifications.instrument "sql.activerecord"
    #
    #   trace_record = Google::Cloud::Trace::TraceRecord.new "my-project"
    #   Google::Cloud::Trace.set trace_record
    #
    #   ActiveRecord::Base.connection.execute "SHOW TABLES"
    # @param type [String, Regex] A specific type or pattern to select
    #   notifications to listen for.
    # @param max_length [Integer] The maximum length for label values.
    #   If a label value exceeds this length, it is truncated.
    #   If the length is nil, no truncation takes place.
    # @param label_namespace [String] A string to prepend to all label
    #   keys.
    # @param capture_stack [Boolean] Whether traces should include the
    #   call stack.
    #
    # source://google-cloud-trace//lib/google/cloud/trace/notifications.rb#69
    def instrument(type, max_length: T.unsafe(nil), label_namespace: T.unsafe(nil), capture_stack: T.unsafe(nil)); end

    # active support event's time is:
    #
    # - rails >= 7: timestamp in milliseconds
    # - rails <  7: time
    #
    # @private
    #
    # source://google-cloud-trace//lib/google/cloud/trace/notifications.rb#120
    def normalize_time(time_or_float); end

    # @private
    #
    # source://google-cloud-trace//lib/google/cloud/trace/notifications.rb#102
    def payload_to_labels(event, maxlen, label_namespace); end
  end
end

# The default prefix for label keys
#
# source://google-cloud-trace//lib/google/cloud/trace/notifications.rb#30
Google::Cloud::Trace::Notifications::DEFAULT_LABEL_NAMESPACE = T.let(T.unsafe(nil), String)

# The default max length for label data.
#
# source://google-cloud-trace//lib/google/cloud/trace/notifications.rb#26
Google::Cloud::Trace::Notifications::DEFAULT_MAX_DATA_LENGTH = T.let(T.unsafe(nil), Integer)

# Stack truncation method that removes the ActiveSupport::Notifications
# calls from the top.
#
# source://google-cloud-trace//lib/google/cloud/trace/notifications.rb#35
Google::Cloud::Trace::Notifications::REMOVE_NOTIFICATION_FRAMEWORK = T.let(T.unsafe(nil), Proc)

# # Project
#
# Projects are top-level containers in Google Cloud Platform. They store
# information about billing and authorized users, and they control access
# to Stackdriver Trace resources. Each project has a friendly name and a
# unique ID. Projects can be created only in the [Google Developers
# Console](https://console.developers.google.com).
#
# This class is a client to make API calls for the project's trace data.
# Create an instance using {Google::Cloud::Trace.new} or
# {Google::Cloud#trace}. You may then use the `get_trace` method to
# retrieve a trace by ID, `list_traces` to query for a set of traces,
# and `patch_traces` to update trace data. You may also use `new_trace`
# as a convenience constructor to build a
# {Google::Cloud::Trace::TraceRecord} object.
#
# @example
#   require "google/cloud/trace"
#
#   trace_client = Google::Cloud::Trace.new
#   traces = trace_client.list_traces Time.now - 3600, Time.now
#
# source://google-cloud-trace//lib/google/cloud/trace/project.rb#44
class Google::Cloud::Trace::Project
  # @private Creates a new Project instance.
  # @return [Project] a new instance of Project
  #
  # source://google-cloud-trace//lib/google/cloud/trace/project.rb#51
  def initialize(service); end

  # Gets a single trace by its ID.
  #
  # @example
  #   require "google/cloud/trace"
  #
  #   trace_client = Google::Cloud::Trace.new
  #
  #   trace = trace_client.get_trace "1234567890abcdef1234567890abcdef"
  # @param trace_id [String] The ID of the trace to fetch.
  # @return [Google::Cloud::Trace::TraceRecord, nil] The trace object, or
  #   `nil` if there is no accessible trace with the given ID.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/project.rb#147
  def get_trace(trace_id); end

  # Returns of a list of traces that match the specified conditions.
  # You must provide a time interval. You may optionally provide a
  # filter, an ordering, a view type.
  # Results are paginated, and you may specify a page size. The result
  # will come with a token you can pass back to retrieve the next page.
  #
  # @example
  #   require "google/cloud/trace"
  #
  #   trace_client = Google::Cloud::Trace.new
  #
  #   traces = trace_client.list_traces Time.now - 3600, Time.now
  #   traces.each do |trace|
  #   puts "Retrieved trace ID: #{trace.trace_id}"
  #   end
  # @param start_time [Time] The start of the time interval (inclusive).
  # @param end_time [Time] The end of the time interval (inclusive).
  # @param filter [String] An optional filter.
  # @param view [Symbol] The optional type of view. Valid values are
  #   `:MINIMAL`, `:ROOTSPAN`, and `:COMPLETE`. Default is `:MINIMAL`.
  # @param page_size [Integer] The size of each page to return. Optional;
  #   if omitted, the service will select a reasonable page size.
  # @param page_token [String] A token indicating the page to return.
  #   Each page of results includes proper token for specifying the
  #   following page.
  # @param order_by [String] The optional sort order for returned traces.
  #   May be `trace_id`, `name`, `duration`, or `start`. Any sort order
  #   may also be reversed by appending `desc`; for example use
  #   `start desc` to order traces from newest to oldest.
  # @return [Google::Cloud::Trace::ResultSet] A page of results.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/project.rb#185
  def list_traces(start_time, end_time, filter: T.unsafe(nil), order_by: T.unsafe(nil), view: T.unsafe(nil), page_size: T.unsafe(nil), page_token: T.unsafe(nil)); end

  # Create a new empty trace record for this project. Uses the current
  # thread's TraceContext by default; otherwise you may provide a
  # specific TraceContext.
  #
  # @example
  #   require "google/cloud/trace"
  #
  #   trace_client = Google::Cloud::Trace.new(
  #   project_id: "my-project",
  #   credentials: "/path/to/keyfile.json"
  #   )
  #
  #   trace = trace_client.new_trace
  # @param trace_context [Stackdriver::Core::TraceContext, nil] The
  #   context within which to locate this trace (i.e. sets the trace ID
  #   and the context parent span, if present.) If the context is set
  #   explicitly to `nil`, a new trace with a new trace ID is created.
  #   If no context is provided, the current thread's context is used.
  # @return [Google::Cloud::Trace::TraceRecord] The new trace.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/project.rb#97
  def new_trace(trace_context: T.unsafe(nil)); end

  # Sends new traces to Stackdriver Trace or updates existing traces.
  # If the ID of a trace that you send matches that of an existing trace,
  # any fields in the existing trace and its spans are overwritten by the
  # provided values, and any new fields provided are merged with the
  # existing trace data. If the ID does not match, a new trace is created.
  #
  # @example
  #   require "google/cloud/trace"
  #
  #   trace_client = Google::Cloud::Trace.new
  #
  #   trace = trace_client.new_trace
  #   trace.in_span "root_span" do
  #   # Do stuff...
  #   end
  #
  #   trace_client.patch_traces trace
  # @param traces [Google::Cloud::Trace::TraceRecord, Array{Google::Cloud::Trace::TraceRecord}] Either a single
  #   trace object or an array of trace objects.
  # @return [Array{Google::Cloud::Trace::TraceRecord}] The traces written.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/project.rb#128
  def patch_traces(traces); end

  # The ID of the current project.
  #
  # @example
  #   require "google/cloud/trace"
  #
  #   trace_client = Google::Cloud::Trace.new(
  #   project_id: "my-project",
  #   credentials: "/path/to/keyfile.json"
  #   )
  #
  #   trace_client.project_id #=> "my-project"
  # @return [String] the Google Cloud project ID
  #
  # source://google-cloud-trace//lib/google/cloud/trace/project.rb#70
  def project; end

  # The ID of the current project.
  #
  # @example
  #   require "google/cloud/trace"
  #
  #   trace_client = Google::Cloud::Trace.new(
  #   project_id: "my-project",
  #   credentials: "/path/to/keyfile.json"
  #   )
  #
  #   trace_client.project_id #=> "my-project"
  # @return [String] the Google Cloud project ID
  #
  # source://google-cloud-trace//lib/google/cloud/trace/project.rb#70
  def project_id; end

  # @private The Service object.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/project.rb#47
  def service; end

  # @private The Service object.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/project.rb#47
  def service=(_arg0); end

  protected

  # available.
  #
  # @private Raise an error unless an active connection to the service is
  #
  # source://google-cloud-trace//lib/google/cloud/trace/project.rb#205
  def ensure_service!; end
end

# # Rails integration for Stackdriver Trace
#
# This Railtie is a drop-in Stackdriver Trace instrumentation plugin
# for Ruby on Rails applications. If present, it automatically
# instruments your Rails app to record performance traces and cause them
# to appear on your Stackdriver console.
#
# ## Installation
#
# To install this plugin, the gem `google-cloud-trace` must be in your
# Gemfile. You also must add the following line to your `application.rb`
# file:
#
# ```ruby
# require "google/cloud/trace/rails"
# ```
#
# If you include the `stackdriver` gem in your Gemfile, the above is done
# for you automatically, and you do not need to edit your
# `application.rb`.
#
# ## Configuration
#
# See the {file:INSTRUMENTATION.md Instrumentation Guide} and
# [Configuration
# Guide](https://googleapis.dev/ruby/stackdriver/latest/file.INSTRUMENTATION_CONFIGURATION.html)
# on how to configure the Railtie and Middleware.
#
# ## Measuring custom functionality
#
# To add a custom measurement to a request trace, use the classes
# provided in this library. Below is an example to get you started.
#
# ```ruby
# class MyController < ApplicationController
#   def index
#     Google::Cloud::Trace.in_span "Sleeping on the job!" do
#       sleep rand
#     end
#     render plain: "Hello World!"
#   end
# end
# ```
#
# source://google-cloud-trace//lib/google/cloud/trace/rails.rb#68
class Google::Cloud::Trace::Railtie < ::Rails::Railtie
  class << self
    # configuration. Also consolidate the `use_trace` setting by verifying
    # credentials and Rails environment. The `use_trace` setting will be
    # true if credentials are valid, and the setting is manually set to
    # true or Rails is in production environment.
    #
    # @param config [Rails::Railtie::Configuration] The
    #   Rails.application.config
    # @private Consolidate Rails configuration into Trace instrumentation
    #
    # source://google-cloud-trace//lib/google/cloud/trace/rails.rb#125
    def consolidate_rails_config(config); end

    # Initialize trace integration for Rails. Sets up the configuration,
    # adds and configures middleware, and installs notifications.
    #
    # @private
    #
    # source://google-cloud-trace//lib/google/cloud/trace/rails.rb#101
    def init_middleware(app); end

    private

    # Fallback to default config values if config parameters not provided.
    #
    # source://google-cloud-trace//lib/google/cloud/trace/rails.rb#178
    def init_default_config; end

    # configuration.
    #
    # @private Merge Rails configuration into Trace instrumentation
    #
    # source://google-cloud-trace//lib/google/cloud/trace/rails.rb#150
    def merge_rails_config(rails_config); end

    # @private Verify credentials
    # @return [Boolean]
    #
    # source://google-cloud-trace//lib/google/cloud/trace/rails.rb#184
    def valid_credentials?(project_id, credentials); end
  end
end

# The default list of ActiveSupport notification types to include in
# traces.
#
# source://google-cloud-trace//lib/google/cloud/trace/rails.rb#73
Google::Cloud::Trace::Railtie::DEFAULT_NOTIFICATIONS = T.let(T.unsafe(nil), Array)

# ResultSet represents the results of a `list_traces` request. It is
# an enumerable of the traces found, plus information about the request
# and a token to get the next page of results.
#
# source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#24
class Google::Cloud::Trace::ResultSet
  include ::Enumerable

  # Create a new ResultSet given an enumerable of result Trace objects,
  # a next page token (or nil if this is the last page), and all the
  # query parameters.
  #
  # @private
  # @return [ResultSet] a new instance of ResultSet
  #
  # source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#34
  def initialize(service, project, results, next_page_token, start_time, end_time, filter: T.unsafe(nil), order_by: T.unsafe(nil), view: T.unsafe(nil), page_size: T.unsafe(nil), page_token: T.unsafe(nil)); end

  # An `each` method that supports the Enumerable module. Iterates over
  # the results and yields each, as a {Google::Cloud::Trace::TraceRecord}
  # object, to the given block. If no block is provided, returns an
  # Enumerator.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#61
  def each(&block); end

  # The `end_time` query parameter.
  #
  # @return [Time, nil]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#120
  def end_time; end

  # The `filter` query parameter.
  #
  # @return [String, nil]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#127
  def filter; end

  # Queries the service for the next page of results and returns a new
  # ResultSet for that page. Returns `nil` if there are no more results.
  #
  # @return [Google::Cloud::Trace::ResultSet]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#158
  def next_page; end

  # The token to pass to `list_traces` to get the next page, or nil if
  # this is the last page.
  #
  # @return [String, nil]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#92
  def next_page_token; end

  # The `order_by` query parameter.
  #
  # @return [String, nil]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#134
  def order_by; end

  # The `page_size` query parameter.
  #
  # @return [Integer, nil]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#106
  def page_size; end

  # The page token used to obtain this page of results.
  #
  # @return [String, nil]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#141
  def page_token; end

  # The project ID string.
  #
  # @return [String]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#84
  def project; end

  # Returns true if at least one more page of results can be retrieved.
  #
  # @return [Boolean]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#148
  def results_pending?; end

  # The trace service client that obtained this result set
  #
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#77
  def service; end

  # Returns the number of traces in this page of results.
  #
  # @return [Integer]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#70
  def size; end

  # The `start_time` query parameter.
  #
  # @return [Time, nil]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#113
  def start_time; end

  # The `view` query parameter.
  #
  # @return [Symbol, nil]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#99
  def view; end

  class << self
    # Create a new ResultSet given a Gapic::PagedEnumerable::Page,
    # and all the query parameters.
    #
    # @private
    #
    # source://google-cloud-trace//lib/google/cloud/trace/result_set.rb#177
    def from_gapic_page(service, project_id, page, start_time, end_time, filter: T.unsafe(nil), order_by: T.unsafe(nil), view: T.unsafe(nil), page_size: T.unsafe(nil), page_token: T.unsafe(nil)); end
  end
end

# Represents the connection to Trace, and exposes the API calls.
#
# @private
#
# source://google-cloud-trace//lib/google/cloud/trace/service.rb#29
class Google::Cloud::Trace::Service
  # Creates a new Service instance.
  #
  # @return [Service] a new instance of Service
  #
  # source://google-cloud-trace//lib/google/cloud/trace/service.rb#37
  def initialize(project, credentials, timeout: T.unsafe(nil), host: T.unsafe(nil)); end

  # Returns the value of attribute credentials.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/service.rb#31
  def credentials; end

  # Sets the attribute credentials
  #
  # @param value the value to set the attribute credentials to.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/service.rb#31
  def credentials=(_arg0); end

  # Returns a trace given its ID
  #
  # source://google-cloud-trace//lib/google/cloud/trace/service.rb#82
  def get_trace(trace_id); end

  # Returns the value of attribute host.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/service.rb#33
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/service.rb#33
  def host=(_arg0); end

  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/service.rb#123
  def inspect; end

  # Searches for traces matching the given criteria.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/service.rb#90
  def list_traces(project_id, start_time, end_time, filter: T.unsafe(nil), order_by: T.unsafe(nil), view: T.unsafe(nil), page_size: T.unsafe(nil), page_token: T.unsafe(nil)); end

  # source://google-cloud-trace//lib/google/cloud/trace/service.rb#47
  def lowlevel_client; end

  # Returns the value of attribute mocked_lowlevel_client.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/service.rb#65
  def mocked_lowlevel_client; end

  # Sets the attribute mocked_lowlevel_client
  #
  # @param value the value to set the attribute mocked_lowlevel_client to.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/service.rb#65
  def mocked_lowlevel_client=(_arg0); end

  # Sends new traces to Stackdriver Trace or updates existing traces.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/service.rb#69
  def patch_traces(traces); end

  # Returns the value of attribute project.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/service.rb#30
  def project; end

  # Sets the attribute project
  #
  # @param value the value to set the attribute project to.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/service.rb#30
  def project=(_arg0); end

  # Returns the value of attribute timeout.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/service.rb#32
  def timeout; end

  # Sets the attribute timeout
  #
  # @param value the value to set the attribute timeout to.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/service.rb#32
  def timeout=(_arg0); end
end

# Span represents a span in a trace record. Spans are contained in
# a trace and arranged in a forest. That is, each span may be a root span
# or have a parent span, and may have zero or more children.
#
# source://google-cloud-trace//lib/google/cloud/trace/span.rb#27
class Google::Cloud::Trace::Span
  # Create an empty Span object.
  #
  # @private
  # @return [Span] a new instance of Span
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#105
  def initialize(trace, id, parent_span_id, parent, name, kind, start_time, end_time, labels); end

  # Standard value equality check for this object.
  #
  # @param other [Object]
  # @return [Boolean]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#125
  def ==(other); end

  # Add the given span to this span's child list.
  #
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#399
  def add_child(child); end

  # Returns a list of children of this span.
  #
  # @return [Array{TraceSpan}] The children.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#223
  def children; end

  # Creates a new child span under this span.
  #
  # @example
  #   require "google/cloud/trace"
  #
  #   trace_record = Google::Cloud::Trace::TraceRecord.new "my-project"
  #   span = trace_record.create_span "root_span"
  #   subspan = span.create_span "subspan"
  # @param name [String] The name of the span.
  # @param span_id [Integer] The numeric ID of the span, or nil to
  #   generate a new random unique ID. Optional (defaults to nil).
  # @param kind [SpanKind] The kind of span. Optional.
  # @param end_time [Time] The ending timestamp, or nil if not yet
  #   specified. Optional (defaults to nil).
  # @param labels [Hash{String=>String}] The span properties. Optional
  #   (defaults to empty).
  # @param start_time [Time] The starting timestamp, or nil if not yet
  #   specified. Optional (defaults to nil).
  # @return [TraceSpan] The created span.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#250
  def create_span(name, span_id: T.unsafe(nil), kind: T.unsafe(nil), start_time: T.unsafe(nil), end_time: T.unsafe(nil), labels: T.unsafe(nil)); end

  # Deletes this span, and all descendant spans. After this completes,
  # {Span#exists?} will return `false`.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#350
  def delete; end

  # The ending timestamp of this span in UTC, or `nil` if the
  # ending timestamp has not yet been populated.
  #
  # @return [Time, nil]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#91
  def end_time; end

  # The ending timestamp of this span in UTC, or `nil` if the
  # ending timestamp has not yet been populated.
  #
  # @return [Time, nil]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#91
  def end_time=(_arg0); end

  # Ensure this span exists (i.e. has not been deleted) and throw a
  # RuntimeError if not.
  #
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#418
  def ensure_exists!; end

  # Sets the ending timestamp for this span to the current time, if
  # it has not yet been set. Also ensures that all descendant spans have
  # also been finished.
  # Does nothing if the ending timestamp for this span is already set.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#337
  def ensure_finished; end

  # Ensure moving this span under the given parent would not result
  # in a cycle, and throw a RuntimeError if it would.
  #
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#428
  def ensure_no_cycle!(new_parent); end

  # Sets the starting timestamp for this span to the current time, if
  # it has not yet been set. Also ensures that all ancestor spans have
  # also been started.
  # Does nothing if the starting timestamp for this span is already set.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#322
  def ensure_started; end

  # Standard value equality check for this object.
  #
  # @param other [Object]
  # @return [Boolean]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#125
  def eql?(other); end

  # Returns true if this span exists. A span exists until it has been
  # removed from its trace.
  #
  # @return [Boolean]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#194
  def exists?; end

  # Sets the ending timestamp for this span to the current time.
  # Asserts that the timestamp has not yet been set, and throws a
  # RuntimeError if that is not the case.
  # Also ensures that all descendant spans have also finished, and
  # finishes them if not.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#310
  def finish!; end

  # Creates a root span around the given block. Automatically populates
  # the start and end timestamps. The span (with start time but not end
  # time populated) is yielded to the block.
  #
  # @example
  #   require "google/cloud/trace"
  #
  #   trace_record = Google::Cloud::Trace::TraceRecord.new "my-project"
  #   trace_record.in_span "root_span" do |span|
  #   # Do stuff...
  #   span.in_span "subspan" do |subspan|
  #   # Do subspan stuff...
  #   end
  #   # Do stuff...
  #   end
  # @param name [String] The name of the span.
  # @param kind [SpanKind] The kind of span. Optional.
  # @param labels [Hash{String=>String}] The span properties. Optional
  #   (defaults to empty).
  # @return [TraceSpan] The created span.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#283
  def in_span(name, kind: T.unsafe(nil), labels: T.unsafe(nil)); end

  # The kind of this span.
  #
  # @return [Google::Cloud::Trace::SpanKind]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#68
  def kind; end

  # The kind of this span.
  #
  # @return [Google::Cloud::Trace::SpanKind]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#68
  def kind=(_arg0); end

  # The properties of this span.
  #
  # @return [Hash{String => String}]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#98
  def labels; end

  # Moves this span under a new parent, which must be part of the same
  # trace. The entire tree under this span moves with it.
  #
  # @example
  #   require "google/cloud/trace"
  #
  #   trace_record = Google::Cloud::Trace::TraceRecord.new "my-project"
  #   root1 = trace_record.create_span "root_span_1"
  #   root2 = trace_record.create_span "root_span_2"
  #   subspan = root1.create_span "subspan"
  #   subspan.move_under root2
  # @param new_parent [Google::Cloud::Trace::Span] The new parent.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#375
  def move_under(new_parent); end

  # The name of this span.
  #
  # @return [String]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#75
  def name; end

  # The name of this span.
  #
  # @return [String]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#75
  def name=(_arg0); end

  # The TraceSpan object representing this span's parent, or `nil` if
  # this span is a root span.
  #
  # @return [Google::Cloud::Trace::Span, nil]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#41
  def parent; end

  # The ID of the parent span, as an integer that may be zero if this
  # is a true root span.
  #
  # Note that it is possible for a span to be "orphaned", that is, to be
  # a root span with a nonzero parent ID, indicating that parent has not
  # (yet) been written. In that case, `parent` will return nil, but
  # `parent_span_id` will have a value.
  #
  # @return [Integer]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#61
  def parent_span_id; end

  # Remove the given span from this span's child list.
  #
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#408
  def remove_child(child); end

  # Returns true if this span has the same children as the given other.
  #
  # @private
  # @return [Boolean]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#441
  def same_children?(other); end

  # The numeric ID of this span.
  #
  # @return [Integer]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#48
  def span_id; end

  # Sets the starting timestamp for this span to the current time.
  # Asserts that the timestamp has not yet been set, and throws a
  # RuntimeError if that is not the case.
  # Also ensures that all ancestor spans have already started, and
  # starts them if not.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#298
  def start!; end

  # The starting timestamp of this span in UTC, or `nil` if the
  # starting timestamp has not yet been populated.
  #
  # @return [Time, nil]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#83
  def start_time; end

  # The starting timestamp of this span in UTC, or `nil` if the
  # starting timestamp has not yet been populated.
  #
  # @return [Time, nil]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#83
  def start_time=(_arg0); end

  # Convert this Span object to an equivalent TraceSpan protobuf suitable
  # for the V1 gRPC Trace API.
  #
  # @param default_parent_id [Integer] The parent span ID to use if the
  #   span has no parent in the trace tree. Optional; defaults to 0.
  # @return [Google::Cloud::Trace::V1::TraceSpan] The generated
  #   protobuf.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#175
  def to_grpc(default_parent_id = T.unsafe(nil)); end

  # The Trace object containing this span.
  #
  # @return [Google::Cloud::Trace::TraceRecord]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#33
  def trace; end

  # Returns the trace context in effect within this span.
  #
  # @return [Stackdriver::Core::TraceContext]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#203
  def trace_context; end

  # Returns the trace ID for this span.
  #
  # @return [String] The trace ID string.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span.rb#213
  def trace_id; end

  class << self
    # Create a new Span object from a TraceSpan protobuf and insert it
    # into the given trace.
    #
    # @param span_proto [Google::Cloud::Trace::V1::Tracespan] The
    #   span protobuf from the V1 gRPC Trace API.
    # @param trace [Google::Cloud::Trace::TraceRecord] The trace object
    #   to contain the span.
    # @return [Google::Cloud::Trace::Span] A corresponding Span object.
    #
    # source://google-cloud-trace//lib/google/cloud/trace/span.rb#149
    def from_grpc(span_proto, trace); end
  end
end

# SpanKind represents values for the "kind" field of span.
#
# source://google-cloud-trace//lib/google/cloud/trace/span_kind.rb#22
class Google::Cloud::Trace::SpanKind
  # Create a new SpanKind.
  #
  # @private
  # @return [SpanKind] a new instance of SpanKind
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span_kind.rb#30
  def initialize(name); end

  # Returns the string representation of this SpanKind
  #
  # @return [String] String representation.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span_kind.rb#64
  def to_s; end

  # Returns the symbolic representation of this SpanKind
  #
  # @return [Symbol] Symbol representation.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/span_kind.rb#55
  def to_sym; end

  class << self
    # Returns the SpanKind given a symbol or string representation.
    #
    # @param name [String, Symbol] The name of the SpanKind.
    # @return [SpanKind] The SpanKind, or `nil` if not known.
    #
    # source://google-cloud-trace//lib/google/cloud/trace/span_kind.rb#74
    def get(name); end
  end
end

# The `:RPC_CLIENT` value
#
# source://google-cloud-trace//lib/google/cloud/trace/span_kind.rb#48
Google::Cloud::Trace::SpanKind::RPC_CLIENT = T.let(T.unsafe(nil), Google::Cloud::Trace::SpanKind)

# The `:RPC_SERVER` value
#
# source://google-cloud-trace//lib/google/cloud/trace/span_kind.rb#43
Google::Cloud::Trace::SpanKind::RPC_SERVER = T.let(T.unsafe(nil), Google::Cloud::Trace::SpanKind)

# The `:SPAN_KIND_UNSPECIFIED` value
#
# source://google-cloud-trace//lib/google/cloud/trace/span_kind.rb#38
Google::Cloud::Trace::SpanKind::UNSPECIFIED = T.let(T.unsafe(nil), Google::Cloud::Trace::SpanKind)

# source://google-cloud-trace//lib/google/cloud/trace.rb#46
Google::Cloud::Trace::THREAD_KEY = T.let(T.unsafe(nil), Symbol)

# A sampler determines whether a given request's latency trace should
# actually be reported. It is usually not necessary to trace every
# request, especially for an application serving heavy traffic. You may
# use a sampler to decide, for a given request, whether to report its
# trace. A sampler is simply a Proc that takes the Rack environment as an
# argument and returns a boolean indicating whether or not to sample the
# current request. Alternately, it could be an object that duck-types the
# Proc interface by implementing the `call` method.
#
# TimeSampler is the default sampler. It bases its sampling decision on
# two considerations:
#
# 1.  It allows you to blacklist certain URI paths that should never be
#     traced. For example, the Google App Engine health check request
#     path `/_ah/health` is blacklisted by default. Kubernetes default
#     health check `/healthz` is also ignored.
# 2.  It spaces samples out by delaying a minimum time between each
#     sample. This enforces a maximum QPS for this Ruby process.
#
# source://google-cloud-trace//lib/google/cloud/trace/time_sampler.rb#39
class Google::Cloud::Trace::TimeSampler
  # Create a TimeSampler for the given QPS.
  #
  # @param qps [Number] Samples per second. Default is 0.1.
  # @param path_blacklist [Array{String,Regex}] An array of paths or
  #   path patterns indicating URIs that should never be traced.
  #   Default is DEFAULT_PATH_BLACKLIST.
  # @return [TimeSampler] a new instance of TimeSampler
  #
  # source://google-cloud-trace//lib/google/cloud/trace/time_sampler.rb#53
  def initialize(qps: T.unsafe(nil), path_blacklist: T.unsafe(nil)); end

  # Implements the sampler contract. Checks to see whether a sample
  # should be taken at this time.
  #
  # @param env [Hash] Rack environment.
  # @return [Boolean] Whether to sample at this time.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/time_sampler.rb#77
  def call(env); end

  # Determines if the URI path in the given Rack environment is
  # blacklisted in this sampler.
  #
  # @private
  # @return [Boolean]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/time_sampler.rb#98
  def path_blacklisted?(env); end

  class << self
    # Get the default global TimeSampler.
    #
    # @return [TimeSampler]
    #
    # source://google-cloud-trace//lib/google/cloud/trace/time_sampler.rb#66
    def default; end
  end
end

# Default list of paths for which to disable traces. Currently includes
# App Engine Flex health checks.
#
# source://google-cloud-trace//lib/google/cloud/trace/time_sampler.rb#43
Google::Cloud::Trace::TimeSampler::DEFAULT_PATH_BLACKLIST = T.let(T.unsafe(nil), Array)

# Trace represents an entire trace record.
#
# A trace has an ID and contains a forest of spans. The trace object
# methods may be used to walk or manipulate the set of spans.
#
# @example
#   require "google/cloud/trace"
#
#   env = {}
#   trace_context = Stackdriver::Core::TraceContext.parse_rack_env env
#
#   trace = Google::Cloud::Trace::TraceRecord.new "my-project",
#   trace_context
#   span = trace.create_span "root_span"
#   subspan = span.create_span "subspan"
#
#   trace_proto = trace.to_grpc
#
# source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#42
class Google::Cloud::Trace::TraceRecord
  # Create an empty Trace object. If a trace context is provided, it is
  # used to locate this trace within that context.
  #
  # @param project_id [String] The ID of the project containing this
  #   trace.
  # @param trace_context [Stackdriver::Core::TraceContext] The context
  #   within which to locate this trace (i.e. sets the trace ID and
  #   the context parent span, if present.) If no context is provided,
  #   a new trace with a new trace ID is created.
  # @return [TraceRecord] a new instance of TraceRecord
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#54
  def initialize(project_id, trace_context = T.unsafe(nil), span_id_generator: T.unsafe(nil)); end

  # Standard value equality check for this object.
  #
  # @param other [Object] Object to compare with
  # @return [Boolean]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#68
  def ==(other); end

  # Add the given span to the list of root spans.
  #
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#273
  def add_root(span); end

  # Given a list of span protobufs and a set of parent span IDs, add
  # for all spans whose parent is in the set, convert the span to a
  # `TraceSpan` object and add it into this trace. Returns the IDs of
  # the spans added, which may be used in a subsequent call to this
  # method. Effectively, repeated calls to this method perform a
  # breadth-first walk of the span protos and populate the TraceRecord
  # accordingly.
  #
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#321
  def add_span_protos(span_protos, parent_span_ids); end

  # Returns an array of all spans in this trace, not in any particular
  # order
  #
  # @return [Array{TraceSpan}]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#149
  def all_spans; end

  # Creates a new span in this trace.
  #
  # @example
  #   require "google/cloud/trace"
  #
  #   trace_record = Google::Cloud::Trace::TraceRecord.new "my-project"
  #   span = trace_record.create_span "root_span"
  # @param name [String] The name of the span.
  # @param span_id [Integer] The numeric ID of the span, or nil to
  #   generate a new random unique ID. Optional (defaults to nil).
  # @param parent_span_id [Integer] The span ID of the parent span, or 0
  #   if this should be a new root span within the context. Note that
  #   a root span would not necessarily end up with a parent ID of 0 if
  #   the trace context specifies a different context span ID. Optional
  #   (defaults to 0).
  # @param start_time [Time] The starting timestamp, or nil if not yet
  #   specified. Optional (defaults to nil).
  # @param end_time [Time] The ending timestamp, or nil if not yet
  #   specified. Optional (defaults to nil).
  # @param labels [Hash{String=>String}] The span properties. Optional
  #   (defaults to empty).
  # @param kind [SpanKind] The kind of span. Optional.
  # @return [TraceSpan] The created span.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#189
  def create_span(name, span_id: T.unsafe(nil), parent_span_id: T.unsafe(nil), kind: T.unsafe(nil), start_time: T.unsafe(nil), end_time: T.unsafe(nil), labels: T.unsafe(nil)); end

  # Standard value equality check for this object.
  #
  # @param other [Object] Object to compare with
  # @return [Boolean]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#68
  def eql?(other); end

  # Creates a root span around the given block. Automatically populates
  # the start and end timestamps. The span (with start time but not end
  # time populated) is yielded to the block.
  #
  # @example
  #   require "google/cloud/trace"
  #
  #   trace_record = Google::Cloud::Trace::TraceRecord.new "my-project"
  #   trace_record.in_span "root_span" do |span|
  #   # Do stuff...
  #   end
  # @param name [String] The name of the span.
  # @param kind [SpanKind] The kind of span. Optional.
  # @param labels [Hash{String=>String}] The span properties. Optional
  #   (defaults to empty).
  # @return [TraceSpan] The created span.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#228
  def in_span(name, kind: T.unsafe(nil), labels: T.unsafe(nil)); end

  # Internal implementation of span creation. Ensures that a span ID has
  # been allocated, and that the span appears in the internal indexes.
  #
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#242
  def internal_create_span(parent, span_id, parent_span_id, name, kind, start_time, end_time, labels); end

  # The project ID for this trace.
  #
  # @return [String]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#124
  def project; end

  # The project ID for this trace.
  #
  # @return [String]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#124
  def project_id; end

  # Remove the given span from the list of root spans.
  #
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#282
  def remove_root(span); end

  # Remove the given span from the list of spans overall.
  #
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#291
  def remove_span(span); end

  # Returns an array of all root spans in this trace, not in any
  # particular order
  #
  # @return [Array{TraceSpan}]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#159
  def root_spans; end

  # Convert this Trace object to an equivalent Trace protobuf suitable
  # for the V1 gRPC Trace API.
  #
  # @return [Google::Cloud::Trace::V1::Trace] The generated
  #   protobuf.
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#109
  def to_grpc; end

  # The context for this trace.
  #
  # @return [Stackdriver::Core::TraceContext]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#132
  def trace_context; end

  # The ID string for the trace.
  #
  # @return [String]
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#139
  def trace_id; end

  # Generates and returns a span ID that is unique in this trace.
  #
  # @private
  #
  # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#260
  def unique_span_id; end

  class << self
    # Given a list of span protobufs, find the "root" span IDs, i.e. all
    # parent span IDs that don't correspond to actual spans in the set.
    #
    # @private
    #
    # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#302
    def find_root_span_ids(span_protos); end

    # Create a new Trace object from a trace protobuf.
    #
    # @param trace_proto [Google::Cloud::Trace::V1::Trace] The
    #   trace protobuf from the V1 gRPC Trace API.
    # @return [Trace, nil] A corresponding Trace object, or `nil` if the
    #   proto does not represent an existing trace object.
    #
    # source://google-cloud-trace//lib/google/cloud/trace/trace_record.rb#83
    def from_grpc(trace_proto); end
  end
end

# Utils provides some internal utility methods for Trace.
#
# @private
#
# source://google-cloud-trace//lib/google/cloud/trace/utils.rb#24
module Google::Cloud::Trace::Utils
  class << self
    # Convert a Timestamp proto object to a Ruby Time object.
    #
    # @private
    #
    # source://google-cloud-trace//lib/google/cloud/trace/utils.rb#48
    def grpc_to_time(grpc); end

    # Convert a Ruby Time object to a timestamp proto object.
    #
    # @private
    # @raise [ArgumentError]
    #
    # source://google-cloud-trace//lib/google/cloud/trace/utils.rb#30
    def time_to_grpc(time); end
  end
end

# source://google-cloud-trace//lib/google/cloud/trace/version.rb#19
Google::Cloud::Trace::VERSION = T.let(T.unsafe(nil), String)

# Aliases for compatibility with older spellings.
#
# @private
#
# source://google-cloud-trace//lib/google/cloud/trace.rb#288
module Google::Devtools; end

# source://google-cloud-error_reporting/0.42.2/lib/google/cloud/error_reporting.rb#298
Google::Devtools::Clouderrorreporting = Google::Cloud::ErrorReporting

# @private
#
# source://google-cloud-trace//lib/google/cloud/trace.rb#290
Google::Devtools::Cloudtrace = Google::Cloud::Trace
