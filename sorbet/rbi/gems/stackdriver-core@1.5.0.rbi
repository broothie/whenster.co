# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `stackdriver-core` gem.
# Please instead update this file by running `bin/tapioca gem stackdriver-core`.

# source://stackdriver-core//lib/stackdriver/core/configuration.rb#18
module Stackdriver; end

# The Stackdriver::Core module is a namespace for common types and shared
# utilities used by the Google Stackdriver libraries. Most applications will
# not need to use these classes directly.
#
# source://stackdriver-core//lib/stackdriver/core/configuration.rb#19
module Stackdriver::Core; end

# # AsyncActor
#
# To use AsyncActor, the classes that are including this module need to
# define a run_backgrounder method that does the background job. The
# classes can then control the child thread job through instance methods
# like async_start, async_stop, etc.
#
# @example
#   class Foo
#   include AsyncActor
#
#   def initialize
#   super()
#   end
#
#   def run_backgrounder
#   # run async job
#   end
#   end
#
#   foo = Foo.new
#   foo.async_start
# @private An module that provides a class asynchronous capability when
#   included. It can create a child thread to run background jobs, and
#   help make sure the child thread terminates properly when process
#   is interrupted.
#
# source://stackdriver-core//lib/stackdriver/core/async_actor.rb#49
module Stackdriver::Core::AsyncActor
  include ::MonitorMixin

  # @private Constructor to initialize MonitorMixin
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#273
  def initialize; end

  # Set the state to :running if the current state is :suspended.
  #
  # @return [Boolean] True if the state has been set to :running.
  #   Otherwise return false.
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#112
  def async_resume; end

  # Check if async job is running
  #
  # @return [Boolean] True if state equals :running. Otherwise false.
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#129
  def async_running?; end

  # Starts the child thread and asynchronous job
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#64
  def async_start; end

  # @private The async actor state
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#60
  def async_state; end

  # Nicely ask the child thread to stop by setting the state to
  # :stopping if it's not stopped already.
  #
  # @return [Boolean] False if child thread is already stopped. Otherwise
  #   true.
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#74
  def async_stop; end

  # Ask async job to stop. Then forcefully kill thread if it doesn't stop
  # after timeout if needed.
  #
  # @return [Symbol] :stopped if async job already stopped. :waited if
  #   async job terminates within timeout range. :timeout if async job
  #   doesn't terminate after timeout. :forced if thread is killed by
  #   force after timeout.
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#184
  def async_stop!; end

  # Check if async job has stopped
  #
  # @return [Boolean] True if state equals :stopped. Otherwise false.
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#160
  def async_stopped?; end

  # Check if async job is stopping
  #
  # @return [Boolean] True if state equals :stopping. Otherwise false.
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#170
  def async_stopping?; end

  # Set the state to :suspend if the current state is :running.
  #
  # @return [Boolean] Returns true if the state has been set to
  #   :suspended. Otherwise return false.
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#93
  def async_suspend; end

  # Check if async job is suspended
  #
  # @return [Boolean] True if state equals :suspended. Otherwise false.
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#139
  def async_suspended?; end

  # Check if async job is working.
  #
  # @return [Boolean] True if state is either :running or :suspended.
  #   Otherwise false.
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#150
  def async_working?; end

  # Abstract method that the inheriting classes should implement.
  #
  # This should be the main task job that will be run asynchronously and
  # repeatly.
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#230
  def run_backgrounder; end

  # Block current thread until the async job is fully stopped.
  #
  # @param timeout [Integer] If given, lift the blocking when the time has
  #   exceeded the timeout. If nil, block indefinitely.
  # @return [Boolean] True if async job is fully stopped. False if timeout.
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#209
  def wait_until_async_stopped(timeout = T.unsafe(nil)); end

  private

  # while the condition allows, and it calls the run_backgrounder method.
  # This method also ensures the state variable gets set to :stopped when
  # it exits.
  #
  # @private Wrapper method for running the async job. It runs a loop
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#288
  def async_run_job; end

  # the `on_async_state_change` callback function if it's defined.
  #
  # @private Handler when the async actor's state changes. Call
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#342
  def async_state_change; end

  # gracefully. Called from #async_run_job when async actor state changes
  # to :stopping
  #
  # @private Default backgrounder stop condition when asked to be stopped
  # @return [Boolean]
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#335
  def backgrounder_stoppable?; end

  # @private Ensures the child thread is started and kick off the job
  #   to run async_run_job. Also make calls register_for_cleanup on the
  #   async job to make sure it exits properly.
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#303
  def ensure_thread; end

  # The extending classes can override this method to handle state changing
  # logic.
  #
  # @private Default abstract definition of this function that's a no-op.
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#354
  def on_async_state_change; end

  # @param kwargs [Hash] Hash of cleanup options. `:timeout` is the cleanup
  #   wait timeout. `:wait_interval` is the cleanup wait interval. `:force`
  #   for forcefully terminate actor when all other options fail.
  # @private Set cleanup options.
  #
  # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#327
  def set_cleanup_options(**kwargs); end

  class << self
    # @private Cleanup this async job when process exists
    #
    # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#237
    def register_for_cleanup(actor); end

    # @private Take this async job off exit cleanup list
    #
    # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#250
    def unregister_for_cleanup(actor); end

    private

    # @private Cleanup the async job
    #
    # source://stackdriver-core//lib/stackdriver/core/async_actor.rb#259
    def run_cleanup; end
  end
end

# source://stackdriver-core//lib/stackdriver/core/async_actor.rb#52
Stackdriver::Core::AsyncActor::CLEANUP_TIMEOUT = T.let(T.unsafe(nil), Float)

# source://stackdriver-core//lib/stackdriver/core/async_actor.rb#53
Stackdriver::Core::AsyncActor::WAIT_INTERVAL = T.let(T.unsafe(nil), Float)

# Keep this for backwards compatibility
#
# source://stackdriver-core//lib/stackdriver/core/configuration.rb#22
Stackdriver::Core::Configuration = Google::Cloud::Config

# A Stackdriver trace context links the current request into a performance
# trace, and communicates tracing options between related requests. This
# functionality is used by the Stackdriver diagnostics libraries
# (including google-cloud-trace, google-cloud-logging, and other rubygems)
# that integrate with the tracing service.
#
# Most applications will not need to use the TraceContext class directly.
# The Stackdriver libraries use it internally to store and propagate
# context information.
#
# source://stackdriver-core//lib/stackdriver/core/trace_context.rb#29
class Stackdriver::Core::TraceContext
  # Create a new TraceContext instance.
  #
  # @example
  #   require "stackdriver/core"
  #
  #   trace_id = "0123456789abcdef0123456789abcdef"
  #   ctx = Stackdriver::Core::TraceContext.new trace_id: trace_id,
  #   sampled: true
  # @param trace_id [String] The trace ID as a hex string. If nil or
  #   omitted, a new random Trace ID will be generated, and this
  #   TraceContext will be marked as new.
  # @param is_new [Boolean] Whether this trace context should be flagged
  #   as newly created. Optional: if unset, will reflect whether a new
  #   trace_id was generated when this object was created.
  # @param span_id [Integer] The context parent span ID as a 64-bit int.
  #   If nil or omitted, the context will specify no parent span.
  # @param sampled [Boolean] Whether the context has decided to sample
  #   this trace or not, or nil if the context does not specify a
  #   sampling decision.
  # @param capture_stack [Boolean] Whether the the context has decided to
  #   capture stack traces. Ignored if sampled is not true.
  # @return [TraceContext] a new instance of TraceContext
  #
  # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#70
  def initialize(trace_id: T.unsafe(nil), is_new: T.unsafe(nil), span_id: T.unsafe(nil), sampled: T.unsafe(nil), capture_stack: T.unsafe(nil)); end

  # Standard value equality check for this object.
  #
  # @param other [Object] An object to compare with.
  # @return [Boolean]
  #
  # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#140
  def ==(other); end

  # Returns `true` if the context wants to capture stack traces, `false` if
  # the context does not, or `nil` if the context does not specify a
  # sampling decision.
  #
  # @return [Boolean, nil]
  #
  # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#121
  def capture_stack?; end

  # Standard value equality check for this object.
  #
  # @param other [Object] An object to compare with.
  # @return [Boolean]
  #
  # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#140
  def eql?(other); end

  # Generate standard hash code for this object.
  #
  # @return [Integer]
  #
  # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#155
  def hash; end

  # Returns `true` if this trace includes a newly generated trace_id.
  #
  # @return [Boolean]
  #
  # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#130
  def new?; end

  # Returns `true` if the context wants to sample, `false` if the context
  # wants explicitly to disable sampling, or `nil` if the context does
  # not specify.
  #
  # @return [Boolean, nil]
  #
  # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#110
  def sampled?; end

  # The span ID, as a 64-bit integer, or `nil` if no span ID is present
  # in the context.
  #
  # @return [Integer, nil]
  #
  # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#101
  def span_id; end

  # Returns a string representation of this trace context, in the form
  # `<traceid>[/<spanid>][;o=<options>]`. This form is suitable for
  # setting the trace context header.
  #
  # @return [String]
  #
  # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#198
  def to_s; end

  # Returns a string representation of this trace context, in the form
  # `<traceid>[/<spanid>][;o=<options>]`. This form is suitable for
  # setting the trace context header.
  #
  # @return [String]
  #
  # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#198
  def to_string; end

  # The trace ID, as a hex string.
  #
  # @return [String]
  #
  # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#93
  def trace_id; end

  # Returns a new TraceContext instance that is identical to this instance
  # except for the given changes. All parameters are optional. See
  # {TraceContext#initialize} for more details on each parameter.
  #
  # @example
  #   require "stackdriver/core"
  #
  #   trace_id = "0123456789abcdef0123456789abcdef"
  #   orig_ctx = Stackdriver::Core::TraceContext.new trace_id: trace_id,
  #
  #   sampled_ctx = orig_ctx.with sampled: true
  # @param trace_id [String] New trace ID.
  # @param is_new [Boolean] New setting for newness indicator.
  # @param span_id [Integer] New parent span ID.
  # @param sampled [Boolean] New sampling decision.
  # @param capture_stack [Boolean] New stack capture decision.
  # @return [TraceContext]
  #
  # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#180
  def with(trace_id: T.unsafe(nil), is_new: T.unsafe(nil), span_id: T.unsafe(nil), sampled: T.unsafe(nil), capture_stack: T.unsafe(nil)); end

  protected

  # Returns a random trace ID (as a random type 4 UUID).
  #
  # @private
  # @return [String]
  #
  # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#334
  def new_random_trace_id; end

  class << self
    # Returns the current thread's trace context, or `nil` if no trace
    # context has been set.
    #
    # @example
    #   require "stackdriver/core"
    #
    #   ctx = Stackdriver::Core::TraceContext.new
    #   Stackdriver::Core::TraceContext.set ctx
    #   same_ctx = Stackdriver::Core::TraceContext.get
    # @return [TraceContext, nil]
    #
    # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#322
    def get; end

    # Obtains a TraceContext from the given Rack environment. This should
    # be used by any service that wants to obtain the TraceContext for a
    # Rack request. If a new trace context is generated in the process, it
    # is memoized into the Rack environment so subsequent services will get
    # the same context.
    #
    # Specifically, the following steps are attempted in order:
    #  1. Attempts to use any memoized context previously obtained.
    #  2. Attempts to parse the trace context header.
    #  3. Creates a new trace context with a random trace ID.
    #
    # Furthermore, if a block is given, it is provided with an opportunity
    # to modify the trace context. The current trace context and the Rack
    # environment is passed to the block, and its result is used as the
    # final trace context. The final context is memoized back into the
    # Rack environment.
    #
    # @example
    #   require "stackdriver/core"
    #
    #   class MyMiddleware
    #   def initialize app
    #   @app = app
    #   end
    #
    #   def call env
    #   ctx = Stackdriver::Core::TraceContext.parse_rack_env env
    #   do_something_with ctx
    #   @app.call env
    #   end
    #   end
    # @param env [Hash] The Rack environment hash
    # @return [TraceContext]
    #
    # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#281
    def parse_rack_env(env); end

    # Attempts to parse the given string as a trace context representation.
    # Expects the form `<traceid>[/<spanid>][;o=<options>]`, which is the
    # form used in the trace context header. Returns either the parsed
    # trace context, or `nil` if the string was malformed.
    #
    # @example
    #   require "stackdriver/core"
    #
    #   str = "0123456789abcdef0123456789abcdef/12345;o=1"
    #   ctx = Stackdriver::Core::TraceContext.parse_string str
    # @param str [String] The string to parse.
    # @return [TraceContext, nil]
    #
    # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#227
    def parse_string(str); end

    # Set the current thread's trace context, and returns the context.
    #
    # @example
    #   require "stackdriver/core"
    #
    #   ctx = Stackdriver::Core::TraceContext.new
    #   Stackdriver::Core::TraceContext.set ctx
    #   same_ctx = Stackdriver::Core::TraceContext.get
    # @param trace_context [TraceContext, nil] The trace context to
    #   set for the current thread. May be `nil`.
    # @return [TraceContext, nil] The context set.
    #
    # source://stackdriver-core//lib/stackdriver/core/trace_context.rb#304
    def set(trace_context); end
  end
end

# @private
#
# source://stackdriver-core//lib/stackdriver/core/trace_context.rb#32
Stackdriver::Core::TraceContext::HEADER_RACK_KEY = T.let(T.unsafe(nil), String)

# @private
#
# source://stackdriver-core//lib/stackdriver/core/trace_context.rb#36
Stackdriver::Core::TraceContext::MEMO_RACK_KEY = T.let(T.unsafe(nil), String)

# @private
#
# source://stackdriver-core//lib/stackdriver/core/trace_context.rb#40
Stackdriver::Core::TraceContext::THREAD_KEY = T.let(T.unsafe(nil), Symbol)

# @private
#
# source://stackdriver-core//lib/stackdriver/core/trace_context.rb#44
Stackdriver::Core::TraceContext::UNCHANGED = T.let(T.unsafe(nil), Object)

# source://stackdriver-core//lib/stackdriver/core/version.rb#18
Stackdriver::Core::VERSION = T.let(T.unsafe(nil), String)
