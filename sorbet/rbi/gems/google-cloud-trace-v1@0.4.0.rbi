# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-cloud-trace-v1` gem.
# Please instead update this file by running `bin/tapioca gem google-cloud-trace-v1`.

# source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/credentials.rb#21
module Google; end

# source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/credentials.rb#22
module Google::Cloud
  # source://google-cloud-error_reporting/0.42.2/lib/google-cloud-error_reporting.rb#60
  def error_reporting(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # source://google-cloud-logging/2.3.2/lib/google-cloud-logging.rb#67
  def logging(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # source://google-cloud-storage/1.44.0/lib/google-cloud-storage.rb#76
  def storage(scope: T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil), open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), send_timeout: T.unsafe(nil), max_elapsed_time: T.unsafe(nil), base_interval: T.unsafe(nil), max_interval: T.unsafe(nil), multiplier: T.unsafe(nil)); end

  # source://google-cloud-trace/0.42.1/lib/google-cloud-trace.rb#60
  def trace(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  class << self
    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#158
    def auto_load_files; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#128
    def auto_load_gems; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#91
    def configure; end

    # source://google-cloud-env/1.6.0/lib/google/cloud/env.rb#490
    def env; end

    # source://google-cloud-error_reporting/0.42.2/lib/google-cloud-error_reporting.rb#105
    def error_reporting(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#103
    def init_configuration; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#142
    def loaded_files; end

    # source://google-cloud-logging/2.3.2/lib/google-cloud-logging.rb#109
    def logging(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#62
    def new(project_id = T.unsafe(nil), credentials = T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-storage/1.44.0/lib/google-cloud-storage.rb#135
    def storage(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil), open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), send_timeout: T.unsafe(nil), max_elapsed_time: T.unsafe(nil), base_interval: T.unsafe(nil), max_interval: T.unsafe(nil), multiplier: T.unsafe(nil)); end

    # source://google-cloud-trace/0.42.1/lib/google-cloud-trace.rb#101
    def trace(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end
  end
end

# source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/credentials.rb#23
module Google::Cloud::Trace
  class << self
    # source://google-cloud-trace/0.42.1/lib/google/cloud/trace.rb#154
    def configure; end

    # source://google-cloud-trace/0.42.1/lib/google/cloud/trace.rb#170
    def default_credentials(scope: T.unsafe(nil)); end

    # source://google-cloud-trace/0.42.1/lib/google/cloud/trace.rb#162
    def default_project_id; end

    # source://google-cloud-trace/0.42.1/lib/google/cloud/trace.rb#231
    def get; end

    # source://google-cloud-trace/0.42.1/lib/google/cloud/trace.rb#266
    def in_span(name, kind: T.unsafe(nil), labels: T.unsafe(nil)); end

    # source://google-cloud-trace/0.42.1/lib/google/cloud/trace.rb#89
    def new(project_id: T.unsafe(nil), credentials: T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil), endpoint: T.unsafe(nil), project: T.unsafe(nil), keyfile: T.unsafe(nil)); end

    # source://google-cloud-trace/0.42.1/lib/google/cloud/trace.rb#178
    def resolve_credentials(credentials, scope); end

    # source://google-cloud-trace/0.42.1/lib/google/cloud/trace.rb#206
    def set(trace); end
  end
end

# source://google-cloud-trace/0.42.1/lib/google/cloud/trace.rb#46
Google::Cloud::Trace::THREAD_KEY = T.let(T.unsafe(nil), Symbol)

# To load this package, including all its services, and instantiate a client:
#
# @example
#
#   require "google/cloud/trace/v1"
#   client = ::Google::Cloud::Trace::V1::TraceService::Client.new
#
# source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/credentials.rb#24
module Google::Cloud::Trace::V1; end

class Google::Cloud::Trace::V1::GetTraceRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Trace::V1::ListTracesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module Google::Cloud::Trace::V1::ListTracesRequest::ViewType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-trace-v1//lib/google/devtools/cloudtrace/v1/trace_pb.rb#77
Google::Cloud::Trace::V1::ListTracesRequest::ViewType::COMPLETE = T.let(T.unsafe(nil), Integer)

# source://google-cloud-trace-v1//lib/google/devtools/cloudtrace/v1/trace_pb.rb#77
Google::Cloud::Trace::V1::ListTracesRequest::ViewType::MINIMAL = T.let(T.unsafe(nil), Integer)

# source://google-cloud-trace-v1//lib/google/devtools/cloudtrace/v1/trace_pb.rb#77
Google::Cloud::Trace::V1::ListTracesRequest::ViewType::ROOTSPAN = T.let(T.unsafe(nil), Integer)

# source://google-cloud-trace-v1//lib/google/devtools/cloudtrace/v1/trace_pb.rb#77
Google::Cloud::Trace::V1::ListTracesRequest::ViewType::VIEW_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Google::Cloud::Trace::V1::ListTracesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Trace::V1::PatchTracesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Trace::V1::Trace
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

# This file describes an API for collecting and viewing traces and spans
# within a trace.  A Trace is a collection of spans corresponding to a single
# operation or set of operations for an application. A span is an individual
# timed event which forms a node of the trace tree. Spans for a single trace
# may span multiple services.
#
# To load this service and instantiate a client:
#
#     require "google/cloud/trace/v1/trace_service"
#     client = ::Google::Cloud::Trace::V1::TraceService::Client.new
#
# source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/credentials.rb#25
module Google::Cloud::Trace::V1::TraceService; end

# Client for the TraceService service.
#
# This file describes an API for collecting and viewing traces and spans
# within a trace.  A Trace is a collection of spans corresponding to a single
# operation or set of operations for an application. A span is an individual
# timed event which forms a node of the trace tree. Spans for a single trace
# may span multiple services.
#
# source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/client.rb#36
class Google::Cloud::Trace::V1::TraceService::Client
  # Create a new TraceService client object.
  #
  # @example
  #
  #   # Create a client using the default configuration
  #   client = ::Google::Cloud::Trace::V1::TraceService::Client.new
  #
  #   # Create a client using a custom configuration
  #   client = ::Google::Cloud::Trace::V1::TraceService::Client.new do |config|
  #   config.timeout = 10.0
  #   end
  # @return [Client] a new instance of Client
  # @yield [config] Configure the TraceService client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/client.rb#126
  def initialize; end

  # Configure the TraceService Client instance.
  #
  # The configuration is set to the derived mode, meaning that values can be changed,
  # but structural changes (adding new fields, etc.) are not allowed. Structural changes
  # should be made on {Client.configure}.
  #
  # See {::Google::Cloud::Trace::V1::TraceService::Client::Configuration}
  # for a description of the configuration fields.
  #
  # @return [Client::Configuration]
  # @yield [config] Configure the Client client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/client.rb#105
  def configure; end

  # Gets a single trace by its ID.
  #
  # @example Basic example
  #   require "google/cloud/trace/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Trace::V1::TraceService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Trace::V1::GetTraceRequest.new
  #
  #   # Call the get_trace method.
  #   result = client.get_trace request
  #
  #   # The returned object is of type Google::Cloud::Trace::V1::Trace.
  #   p result
  # @overload get_trace
  # @overload get_trace
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Trace::V1::Trace]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Trace::V1::Trace]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/client.rb#363
  def get_trace(request, options = T.unsafe(nil)); end

  # Returns of a list of traces that match the specified filter conditions.
  #
  # @example Basic example
  #   require "google/cloud/trace/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Trace::V1::TraceService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Trace::V1::ListTracesRequest.new
  #
  #   # Call the list_traces method.
  #   result = client.list_traces request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can
  #   # iterate over all elements by calling #each, and the enumerable
  #   # will lazily make API calls to fetch subsequent pages. Other
  #   # methods are also available for managing paging directly.
  #   result.each do |response|
  #   # Each element is of type ::Google::Cloud::Trace::V1::Trace.
  #   p response
  #   end
  # @overload list_traces
  # @overload list_traces
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::PagedEnumerable<::Google::Cloud::Trace::V1::Trace>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Trace::V1::Trace>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/client.rb#275
  def list_traces(request, options = T.unsafe(nil)); end

  # Sends new traces to Stackdriver Trace or updates existing traces. If the ID
  # of a trace that you send matches that of an existing trace, any fields
  # in the existing trace and its spans are overwritten by the provided values,
  # and any new fields provided are merged with the existing trace data. If the
  # ID does not match, a new trace is created.
  #
  # @example Basic example
  #   require "google/cloud/trace/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Trace::V1::TraceService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Trace::V1::PatchTracesRequest.new
  #
  #   # Call the patch_traces method.
  #   result = client.patch_traces request
  #
  #   # The returned object is of type Google::Protobuf::Empty.
  #   p result
  # @overload patch_traces
  # @overload patch_traces
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Protobuf::Empty]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Protobuf::Empty]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/client.rb#457
  def patch_traces(request, options = T.unsafe(nil)); end

  # @private
  #
  # source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/client.rb#38
  def trace_service_stub; end

  class << self
    # Configure the TraceService Client class.
    #
    # See {::Google::Cloud::Trace::V1::TraceService::Client::Configuration}
    # for a description of the configuration fields.
    #
    # @example
    #
    #   # Modify the configuration for all TraceService clients
    #   ::Google::Cloud::Trace::V1::TraceService::Client.configure do |config|
    #   config.timeout = 10.0
    #   end
    # @return [Client::Configuration]
    # @yield [config] Configure the Client client.
    # @yieldparam config [Client::Configuration]
    #
    # source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/client.rb#58
    def configure; end
  end
end

# Configuration class for the TraceService API.
#
# This class represents the configuration for TraceService,
# providing control over timeouts, retry behavior, logging, transport
# parameters, and other low-level controls. Certain parameters can also be
# applied individually to specific RPCs. See
# {::Google::Cloud::Trace::V1::TraceService::Client::Configuration::Rpcs}
# for a list of RPCs that can be configured independently.
#
# Configuration can be applied globally to all clients, or to a single client
# on construction.
#
# @example
#
#   # Modify the global config, setting the timeout for
#   # list_traces to 20 seconds,
#   # and all remaining timeouts to 10 seconds.
#   ::Google::Cloud::Trace::V1::TraceService::Client.configure do |config|
#   config.timeout = 10.0
#   config.rpcs.list_traces.timeout = 20.0
#   end
#
#   # Apply the above configuration only to a new client.
#   client = ::Google::Cloud::Trace::V1::TraceService::Client.new do |config|
#   config.timeout = 10.0
#   config.rpcs.list_traces.timeout = 20.0
#   end
#
# source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/client.rb#577
class Google::Cloud::Trace::V1::TraceService::Client::Configuration
  extend ::Gapic::Config

  # @private
  # @return [Configuration] a new instance of Configuration
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Trace::V1::TraceService::Client::Configuration] the object that the method was called on
  #
  # source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/client.rb#597
  def initialize(parent_config = T.unsafe(nil)); end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def channel_args; end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def channel_args=(new_value); end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def credentials; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def credentials=(new_value); end

  # The hostname or hostname:port of the service endpoint.
  # Defaults to `"cloudtrace.googleapis.com"`.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def endpoint; end

  # The hostname or hostname:port of the service endpoint.
  # Defaults to `"cloudtrace.googleapis.com"`.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def endpoint=(new_value); end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def interceptors; end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def interceptors=(new_value); end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def lib_name; end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def lib_name=(new_value); end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def lib_version; end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def lib_version=(new_value); end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def metadata; end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def metadata=(new_value); end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def quota_project; end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def quota_project=(new_value); end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def retry_policy; end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def retry_policy=(new_value); end

  # Configurations for individual RPCs
  #
  # @return [Rpcs]
  #
  # source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/client.rb#607
  def rpcs; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def scope; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def scope=(new_value); end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def timeout; end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def timeout=(new_value); end
end

# Configuration RPC class for the TraceService API.
#
# Includes fields providing the configuration for each RPC in this service.
# Each configuration object is of type `Gapic::Config::Method` and includes
# the following configuration fields:
#
#  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
#  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
#  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
#     include the following keys:
#      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
#      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
#      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
#      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
#         trigger a retry.
#
# source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/client.rb#632
class Google::Cloud::Trace::V1::TraceService::Client::Configuration::Rpcs
  # @private
  # @return [Rpcs] a new instance of Rpcs
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Trace::V1::TraceService::Client::Configuration::Rpcs] the object that the method was called on
  #
  # source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/client.rb#650
  def initialize(parent_rpcs = T.unsafe(nil)); end

  # RPC-specific configuration for `get_trace`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/client.rb#642
  def get_trace; end

  # RPC-specific configuration for `list_traces`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/client.rb#637
  def list_traces; end

  # RPC-specific configuration for `patch_traces`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/client.rb#647
  def patch_traces; end
end

# Credentials for the TraceService API.
#
# source://google-cloud-trace-v1//lib/google/cloud/trace/v1/trace_service/credentials.rb#27
class Google::Cloud::Trace::V1::TraceService::Credentials < ::Google::Auth::Credentials; end

class Google::Cloud::Trace::V1::TraceSpan
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module Google::Cloud::Trace::V1::TraceSpan::SpanKind
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-trace-v1//lib/google/devtools/cloudtrace/v1/trace_pb.rb#75
Google::Cloud::Trace::V1::TraceSpan::SpanKind::RPC_CLIENT = T.let(T.unsafe(nil), Integer)

# source://google-cloud-trace-v1//lib/google/devtools/cloudtrace/v1/trace_pb.rb#75
Google::Cloud::Trace::V1::TraceSpan::SpanKind::RPC_SERVER = T.let(T.unsafe(nil), Integer)

# source://google-cloud-trace-v1//lib/google/devtools/cloudtrace/v1/trace_pb.rb#75
Google::Cloud::Trace::V1::TraceSpan::SpanKind::SPAN_KIND_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Google::Cloud::Trace::V1::Traces
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://google-cloud-trace-v1//lib/google/cloud/trace/v1/version.rb#24
Google::Cloud::Trace::V1::VERSION = T.let(T.unsafe(nil), String)

# source://google-cloud-trace/0.42.1/lib/google/cloud/trace/version.rb#19
Google::Cloud::Trace::VERSION = T.let(T.unsafe(nil), String)
