# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cloudtasker` gem.
# Please instead update this file by running `bin/tapioca gem cloudtasker`.

# Define and manage Cloud Task based workers
#
# source://cloudtasker//lib/cloudtasker/version.rb#3
module Cloudtasker
  # Sets the attribute config
  #
  # @param value the value to set the attribute config to.
  #
  # source://cloudtasker//lib/cloudtasker.rb#25
  def config=(_arg0); end

  class << self
    # Return the Cloudtasker configuration.
    #
    # @return [Cloudtasker::Config] The Cloudtasker configuration.
    #
    # source://cloudtasker//lib/cloudtasker.rb#39
    def config; end

    # Cloudtasker configurator.
    #
    # @yield [config]
    #
    # source://cloudtasker//lib/cloudtasker.rb#30
    def configure; end

    # Return the Cloudtasker logger.
    #
    # @return [Logger] The Cloudtasker logger.
    #
    # source://cloudtasker//lib/cloudtasker.rb#48
    def logger; end

    # source://railties/7.0.4.1/lib/rails/engine.rb#405
    def railtie_helpers_paths; end

    # source://railties/7.0.4.1/lib/rails/engine.rb#394
    def railtie_namespace; end

    # source://railties/7.0.4.1/lib/rails/engine.rb#409
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://railties/7.0.4.1/lib/rails/engine.rb#397
    def table_name_prefix; end

    # source://railties/7.0.4.1/lib/rails/engine.rb#401
    def use_relative_model_naming?; end
  end
end

# source://cloudtasker//lib/cloudtasker/authentication_error.rb#4
class Cloudtasker::AuthenticationError < ::StandardError; end

# Manage token generation and verification
#
# source://cloudtasker//lib/cloudtasker/authenticator.rb#5
module Cloudtasker::Authenticator
  private

  # Return the cloudtasker configuration. See Cloudtasker#configure.
  #
  # @return [Cloudtasker::Config] The library configuration.
  #
  # source://cloudtasker//lib/cloudtasker/authenticator.rb#16
  def config; end

  # A Json Web Token (JWT) which will be used by the processor
  # to authenticate the job.
  #
  # @return [String] The jwt token
  #
  # source://cloudtasker//lib/cloudtasker/authenticator.rb#26
  def verification_token; end

  # Verify a bearer token (jwt token)
  #
  # @param bearer_token [String] The token to verify.
  # @return [Boolean] Return true if the token is valid
  #
  # source://cloudtasker//lib/cloudtasker/authenticator.rb#37
  def verify(bearer_token); end

  # Verify a bearer token and raise a `Cloudtasker::AuthenticationError`
  # if the token is invalid.
  #
  # @param bearer_token [String] The token to verify.
  # @return [Boolean] Return true if the token is valid
  #
  # source://cloudtasker//lib/cloudtasker/authenticator.rb#51
  def verify!(bearer_token); end

  class << self
    # Return the cloudtasker configuration. See Cloudtasker#configure.
    #
    # @return [Cloudtasker::Config] The library configuration.
    #
    # source://cloudtasker//lib/cloudtasker/authenticator.rb#16
    def config; end

    # A Json Web Token (JWT) which will be used by the processor
    # to authenticate the job.
    #
    # @return [String] The jwt token
    #
    # source://cloudtasker//lib/cloudtasker/authenticator.rb#26
    def verification_token; end

    # Verify a bearer token (jwt token)
    #
    # @param bearer_token [String] The token to verify.
    # @return [Boolean] Return true if the token is valid
    #
    # source://cloudtasker//lib/cloudtasker/authenticator.rb#37
    def verify(bearer_token); end

    # Verify a bearer token and raise a `Cloudtasker::AuthenticationError`
    # if the token is invalid.
    #
    # @param bearer_token [String] The token to verify.
    # @return [Boolean] Return true if the token is valid
    #
    # source://cloudtasker//lib/cloudtasker/authenticator.rb#51
    def verify!(bearer_token); end
  end
end

# Algorithm used to sign the verification token
#
# source://cloudtasker//lib/cloudtasker/authenticator.rb#9
Cloudtasker::Authenticator::JWT_ALG = T.let(T.unsafe(nil), String)

# An interface class to manage tasks on the backend (Cloud Task or Redis)
#
# source://cloudtasker//lib/cloudtasker/cloud_task.rb#5
class Cloudtasker::CloudTask
  # Build a new instance of the class using a backend response
  # payload.
  #
  # @param id [String] The task id.
  # @param http_request [Hash] The content of the http request.
  # @param schedule_time [Integer] When to run the job (Unix timestamp)
  # @param retries [Integer] The number of times the job failed.
  # @param queue [String] The queue the task is in.
  # @return [CloudTask] a new instance of CloudTask
  #
  # source://cloudtasker//lib/cloudtasker/cloud_task.rb#114
  def initialize(id:, http_request:, schedule_time: T.unsafe(nil), retries: T.unsafe(nil), queue: T.unsafe(nil), dispatch_deadline: T.unsafe(nil)); end

  # Equality operator.
  #
  # @param other [Any] The object to compare.
  # @return [Boolean] True if the object is equal.
  #
  # source://cloudtasker//lib/cloudtasker/cloud_task.rb#130
  def ==(other); end

  # Returns the value of attribute dispatch_deadline.
  #
  # source://cloudtasker//lib/cloudtasker/cloud_task.rb#6
  def dispatch_deadline; end

  # Sets the attribute dispatch_deadline
  #
  # @param value the value to set the attribute dispatch_deadline to.
  #
  # source://cloudtasker//lib/cloudtasker/cloud_task.rb#6
  def dispatch_deadline=(_arg0); end

  # Returns the value of attribute http_request.
  #
  # source://cloudtasker//lib/cloudtasker/cloud_task.rb#6
  def http_request; end

  # Sets the attribute http_request
  #
  # @param value the value to set the attribute http_request to.
  #
  # source://cloudtasker//lib/cloudtasker/cloud_task.rb#6
  def http_request=(_arg0); end

  # Returns the value of attribute id.
  #
  # source://cloudtasker//lib/cloudtasker/cloud_task.rb#6
  def id; end

  # Sets the attribute id
  #
  # @param value the value to set the attribute id to.
  #
  # source://cloudtasker//lib/cloudtasker/cloud_task.rb#6
  def id=(_arg0); end

  # Returns the value of attribute queue.
  #
  # source://cloudtasker//lib/cloudtasker/cloud_task.rb#6
  def queue; end

  # Sets the attribute queue
  #
  # @param value the value to set the attribute queue to.
  #
  # source://cloudtasker//lib/cloudtasker/cloud_task.rb#6
  def queue=(_arg0); end

  # Returns the value of attribute retries.
  #
  # source://cloudtasker//lib/cloudtasker/cloud_task.rb#6
  def retries; end

  # Sets the attribute retries
  #
  # @param value the value to set the attribute retries to.
  #
  # source://cloudtasker//lib/cloudtasker/cloud_task.rb#6
  def retries=(_arg0); end

  # Returns the value of attribute schedule_time.
  #
  # source://cloudtasker//lib/cloudtasker/cloud_task.rb#6
  def schedule_time; end

  # Sets the attribute schedule_time
  #
  # @param value the value to set the attribute schedule_time to.
  #
  # source://cloudtasker//lib/cloudtasker/cloud_task.rb#6
  def schedule_time=(_arg0); end

  class << self
    # The backend to use for cloud tasks.
    #
    # ] The cloud task backend.
    #
    # @return [Backend::MemoryTask, Cloudtasker::Backend::GoogleCloudTaskV1, Cloudtasker::Backend::GoogleCloudTaskV2, Cloudtasker::Backend::RedisTask] Backend::MemoryTask,
    #   Cloudtasker::Backend::GoogleCloudTaskV1,
    #   Cloudtasker::Backend::GoogleCloudTaskV2,
    #   Cloudtasker::Backend::RedisTask
    #
    # source://cloudtasker//lib/cloudtasker/cloud_task.rb#18
    def backend; end

    # Create a new cloud task.
    #
    # @param payload [Hash] Thee task payload
    # @raise [MaxTaskSizeExceededError]
    # @return [Cloudtasker::CloudTask] The created task.
    #
    # source://cloudtasker//lib/cloudtasker/cloud_task.rb#88
    def create(payload); end

    # Delete a cloud task by id.
    #
    # @param id [String] The task id.
    #
    # source://cloudtasker//lib/cloudtasker/cloud_task.rb#100
    def delete(id); end

    # Find a cloud task by id.
    #
    # @param id [String] The id of the task.
    # @return [Cloudtasker::Cloudtask] The task.
    #
    # source://cloudtasker//lib/cloudtasker/cloud_task.rb#76
    def find(id); end

    # Return the GoogleCloudTaskV* backend to use based on the version
    # of the currently installed google-cloud-tasks gem
    #
    # ] The google cloud task backend.
    #
    # @return [Cloudtasker::Backend::GoogleCloudTaskV1, Cloudtasker::Backend::GoogleCloudTaskV2] Cloudtasker::Backend::GoogleCloudTaskV1,
    #   Cloudtasker::Backend::GoogleCloudTaskV2
    #
    # source://cloudtasker//lib/cloudtasker/cloud_task.rb#44
    def gct_backend; end

    # Create the google cloud task queue based on provided parameters if it does not exist already.
    #
    # @param :name [String] The queue name
    # @param :concurrency [Integer] The queue concurrency
    # @param :retries [Integer] The number of retries for the queue
    # @return [Google::Cloud::Tasks::V2::Queue, Google::Cloud::Tasks::V2beta3::Queue] The queue
    #
    # source://cloudtasker//lib/cloudtasker/cloud_task.rb#65
    def setup_production_queue(**kwargs); end
  end
end

# Holds cloudtasker configuration. See Cloudtasker#configure
#
# source://cloudtasker//lib/cloudtasker/config.rb#7
class Cloudtasker::Config
  # Return the chain of client middlewares.
  #
  # @return [Cloudtasker::Middleware::Chain] The chain of middlewares.
  # @yield [@client_middleware]
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#266
  def client_middleware; end

  # Return the Dispatch deadline duration. Cloud Tasks will timeout the job after
  # this duration is elapsed.
  #
  # @return [Integer] The value in seconds.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#225
  def dispatch_deadline; end

  # Sets the attribute dispatch_deadline
  #
  # @param value the value to set the attribute dispatch_deadline to.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#9
  def dispatch_deadline=(_arg0); end

  # Return the current environment.
  #
  # @return [String] The environment name.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#129
  def environment; end

  # Return the GCP location ID. Default to 'us-east1'
  #
  # @return [String] The location ID where tasks will be processed.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#215
  def gcp_location_id; end

  # Sets the attribute gcp_location_id
  #
  # @param value the value to set the attribute gcp_location_id to.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#9
  def gcp_location_id=(_arg0); end

  # Return the GCP project ID.
  #
  # @return [String] The ID of the project for which tasks will be processed.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#206
  def gcp_project_id; end

  # Sets the attribute gcp_project_id
  #
  # @param value the value to set the attribute gcp_project_id to.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#9
  def gcp_project_id=(_arg0); end

  # Return the prefix used for queues.
  #
  # @return [String] The prefix of the processing queues.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#197
  def gcp_queue_prefix; end

  # Sets the attribute gcp_queue_prefix
  #
  # @param value the value to set the attribute gcp_queue_prefix to.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#9
  def gcp_queue_prefix=(_arg0); end

  # Return the Cloudtasker logger.
  #
  # @return [Logger, any] The cloudtasker logger.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#138
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#9
  def logger=(_arg0); end

  # The number of times jobs will be retried. This number of
  # retries does not include failures due to the application being unreachable.
  #
  # @return [Integer] The number of retries
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#109
  def max_retries; end

  # Sets the attribute max_retries
  #
  # @param value the value to set the attribute max_retries to.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#9
  def max_retries=(_arg0); end

  # The operating mode.
  #   - :production => process tasks via GCP Cloud Task.
  #   - :development => process tasks locally via Redis.
  #
  # @return [<Type>] <description>
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#120
  def mode; end

  # Sets the attribute mode
  #
  # @param value the value to set the attribute mode to.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#9
  def mode=(_arg0); end

  # Return a Proc invoked whenever a worker DeadWorkerError is raised.
  # See Cloudtasker::WorkerHandler.with_worker_handling
  #
  # @return [Proc] A Proc handler
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#257
  def on_dead; end

  # Sets the attribute on_dead
  #
  # @param value the value to set the attribute on_dead to.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#9
  def on_dead=(_arg0); end

  # Return a Proc invoked whenever a worker runtime error is raised.
  # See Cloudtasker::WorkerHandler.with_worker_handling
  #
  # @return [Proc] A Proc handler
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#247
  def on_error; end

  # Sets the attribute on_error
  #
  # @param value the value to set the attribute on_error to.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#9
  def on_error=(_arg0); end

  # The hostname of the application processing the workers. The hostname must
  # be reachable from Cloud Task.
  #
  # @return [String] The processor host.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#177
  def processor_host; end

  # Set the processor host. In the context of Rails the host will
  # also be added to the list of authorized Rails hosts.
  #
  # @param val [String] The processor host to set.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#158
  def processor_host=(val); end

  # The path on the host when worker payloads will be sent.
  # Default to `/cloudtasker/run`
  #
  # @return [String] The processor path
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#188
  def processor_path; end

  # Sets the attribute processor_path
  #
  # @param value the value to set the attribute processor_path to.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#9
  def processor_path=(_arg0); end

  # Return the full URL of the processor. Worker payloads will be sent
  # to this URL.
  #
  # @return [String] The processor URL.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#148
  def processor_url; end

  # Returns the value of attribute redis.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#8
  def redis; end

  # Sets the attribute redis
  #
  # @param value the value to set the attribute redis to.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#8
  def redis=(_arg0); end

  # Return the threshold above which job arguments must be stored
  # in Redis instead of being sent to the backend as part of the job
  # payload.
  #
  # Return nil if redis payload storage is disabled.
  #
  # @return [Integer, nil] The threshold above which payloads will be stored in Redis.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#96
  def redis_payload_storage_threshold; end

  # Return the secret to use to sign the verification tokens
  # attached to tasks.
  #
  # @return [String] The cloudtasker secret
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#235
  def secret; end

  # Sets the attribute secret
  #
  # @param value the value to set the attribute secret to.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#9
  def secret=(_arg0); end

  # Return the chain of server middlewares.
  #
  # @return [Cloudtasker::Middleware::Chain] The chain of middlewares.
  # @yield [@server_middleware]
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#277
  def server_middleware; end

  # Returns the value of attribute store_payloads_in_redis.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#8
  def store_payloads_in_redis; end

  # Sets the attribute store_payloads_in_redis
  #
  # @param value the value to set the attribute store_payloads_in_redis to.
  #
  # source://cloudtasker//lib/cloudtasker/config.rb#8
  def store_payloads_in_redis=(_arg0); end
end

# Authorization header
#
# source://cloudtasker//lib/cloudtasker/config.rb#39
Cloudtasker::Config::AUTHORIZATION_HEADER = T.let(T.unsafe(nil), String)

# Content Type
#
# source://cloudtasker//lib/cloudtasker/config.rb#36
Cloudtasker::Config::CONTENT_TYPE_HEADER = T.let(T.unsafe(nil), String)

# Job timeout configuration for Cloud Tasks
#
# source://cloudtasker//lib/cloudtasker/config.rb#51
Cloudtasker::Config::DEFAULT_DISPATCH_DEADLINE = T.let(T.unsafe(nil), Integer)

# Default queue values
#
# source://cloudtasker//lib/cloudtasker/config.rb#46
Cloudtasker::Config::DEFAULT_JOB_QUEUE = T.let(T.unsafe(nil), String)

# Default values
#
# source://cloudtasker//lib/cloudtasker/config.rb#42
Cloudtasker::Config::DEFAULT_LOCATION_ID = T.let(T.unsafe(nil), String)

# The number of times jobs will be attempted before declaring them dead.
#
# With the default retry configuration (maxDoublings = 16 and minBackoff = 0.100s)
# it means that jobs will be declared dead after 20h of consecutive failing.
#
# Note that this configuration parameter is internal to Cloudtasker and does not
# affect the Cloud Task queue configuration. The number of retries configured
# on the Cloud Task queue should be higher than the number below to also cover
# failures due to the instance being unreachable.
#
# source://cloudtasker//lib/cloudtasker/config.rb#67
Cloudtasker::Config::DEFAULT_MAX_RETRY_ATTEMPTS = T.let(T.unsafe(nil), Integer)

# Default on_error Proc
#
# source://cloudtasker//lib/cloudtasker/config.rb#56
Cloudtasker::Config::DEFAULT_ON_ERROR = T.let(T.unsafe(nil), Proc)

# source://cloudtasker//lib/cloudtasker/config.rb#43
Cloudtasker::Config::DEFAULT_PROCESSOR_PATH = T.let(T.unsafe(nil), String)

# source://cloudtasker//lib/cloudtasker/config.rb#47
Cloudtasker::Config::DEFAULT_QUEUE_CONCURRENCY = T.let(T.unsafe(nil), Integer)

# unlimited
#
# source://cloudtasker//lib/cloudtasker/config.rb#48
Cloudtasker::Config::DEFAULT_QUEUE_RETRIES = T.let(T.unsafe(nil), Integer)

# Content-Transfer-Encoding header in Cloud Task responses
#
# source://cloudtasker//lib/cloudtasker/config.rb#33
Cloudtasker::Config::ENCODING_HEADER = T.let(T.unsafe(nil), String)

# seconds
#
# source://cloudtasker//lib/cloudtasker/config.rb#53
Cloudtasker::Config::MAX_DISPATCH_DEADLINE = T.let(T.unsafe(nil), Integer)

# Max Cloud Task size in bytes
#
# source://cloudtasker//lib/cloudtasker/config.rb#14
Cloudtasker::Config::MAX_TASK_SIZE = T.let(T.unsafe(nil), Integer)

# 10 minutes
#
# source://cloudtasker//lib/cloudtasker/config.rb#52
Cloudtasker::Config::MIN_DISPATCH_DEADLINE = T.let(T.unsafe(nil), Integer)

# source://cloudtasker//lib/cloudtasker/config.rb#69
Cloudtasker::Config::PROCESSOR_HOST_MISSING = T.let(T.unsafe(nil), String)

# source://cloudtasker//lib/cloudtasker/config.rb#78
Cloudtasker::Config::PROJECT_ID_MISSING_ERROR = T.let(T.unsafe(nil), String)

# source://cloudtasker//lib/cloudtasker/config.rb#73
Cloudtasker::Config::QUEUE_PREFIX_MISSING_ERROR = T.let(T.unsafe(nil), String)

# Retry header in Cloud Task responses
#
# TODO: use 'X-CloudTasks-TaskExecutionCount' instead of 'X-CloudTasks-TaskRetryCount'
#   'X-CloudTasks-TaskExecutionCount' is currently bugged and remains at 0 even on retries.
#
# See bug: https://issuetracker.google.com/issues/154532072
#
# Definitions:
#   X-CloudTasks-TaskRetryCount: total number of retries (including 504 "instance unreachable")
#   X-CloudTasks-TaskExecutionCount: number of non-503 retries (= actual number of job failures)
#
# source://cloudtasker//lib/cloudtasker/config.rb#27
Cloudtasker::Config::RETRY_HEADER = T.let(T.unsafe(nil), String)

# source://cloudtasker//lib/cloudtasker/config.rb#82
Cloudtasker::Config::SECRET_MISSING_ERROR = T.let(T.unsafe(nil), String)

# Cloud Task ID header
#
# source://cloudtasker//lib/cloudtasker/config.rb#30
Cloudtasker::Config::TASK_ID_HEADER = T.let(T.unsafe(nil), String)

# source://cloudtasker//lib/cloudtasker/dead_worker_error.rb#4
class Cloudtasker::DeadWorkerError < ::StandardError; end

# Cloudtasker Rails engine
#
# source://cloudtasker//lib/cloudtasker/engine.rb#5
class Cloudtasker::Engine < ::Rails::Engine; end

# source://cloudtasker//lib/cloudtasker/invalid_worker_error.rb#4
class Cloudtasker::InvalidWorkerError < ::StandardError; end

# Handle Cloud Task size quota
# See: https://cloud.google.com/appengine/quotas#Task_Queue
#
# source://cloudtasker//lib/cloudtasker/max_task_size_exceeded_error.rb#7
class Cloudtasker::MaxTaskSizeExceededError < ::StandardError
  # @return [MaxTaskSizeExceededError] a new instance of MaxTaskSizeExceededError
  #
  # source://cloudtasker//lib/cloudtasker/max_task_size_exceeded_error.rb#10
  def initialize(msg = T.unsafe(nil)); end
end

# source://cloudtasker//lib/cloudtasker/max_task_size_exceeded_error.rb#8
Cloudtasker::MaxTaskSizeExceededError::MSG = T.let(T.unsafe(nil), String)

# Manage meta information on workers. This meta stored is intended
# to be used by middlewares needing to store extra information on the
# job.
# The objective of this class is to provide a shared store to middleware
# while controlling access to its keys by preveenting access the hash directly
# (e.g. avoid wild merge or replace operations).
#
# source://cloudtasker//lib/cloudtasker/meta_store.rb#10
class Cloudtasker::MetaStore
  # Build a new instance of the class.
  #
  # @param hash [<Type>] The worker meta hash
  # @return [MetaStore] a new instance of MetaStore
  #
  # source://cloudtasker//lib/cloudtasker/meta_store.rb#16
  def initialize(hash = T.unsafe(nil)); end

  # Equality operator.
  #
  # @param other [Any] The object being compared.
  # @return [Boolean] True if the object is equal.
  #
  # source://cloudtasker//lib/cloudtasker/meta_store.rb#82
  def ==(other); end

  # Remove a meta information.
  #
  # @param key [String, Symbol] The key of the entry to delete.
  # @return [Any] The value of the deleted key
  #
  # source://cloudtasker//lib/cloudtasker/meta_store.rb#50
  def del(key); end

  # Retrieve meta entry.
  #
  # @param key [String, Symbol] The key of the meta entry.
  # @return [Any] The value of the meta entry.
  #
  # source://cloudtasker//lib/cloudtasker/meta_store.rb#27
  def get(key); end

  # Set meta entry
  #
  # @param key [String, Symbol] The key of the meta entry.
  # @param val [Any] The value of the meta entry.
  # @return [Any] The value set
  #
  # source://cloudtasker//lib/cloudtasker/meta_store.rb#39
  def set(key, val); end

  # Return the meta store as Hash.
  #
  # @return [Hash] The meta store as Hash.
  #
  # source://cloudtasker//lib/cloudtasker/meta_store.rb#59
  def to_h; end

  # Return the meta store as json.
  #
  # @param *arg [Array<any>] The to_json args.
  # @return [String] The meta store as json.
  #
  # source://cloudtasker//lib/cloudtasker/meta_store.rb#71
  def to_json(*arg); end
end

# source://cloudtasker//lib/cloudtasker/middleware/chain.rb#4
module Cloudtasker::Middleware; end

# The class below was originally taken from Sidekiq.
# See: https://github.com/mperham/sidekiq/blob/master/lib/sidekiq/middleware/chain.rb
#
# Middleware are callables configured to run before/after a message is processed.
# Middlewares can be configured to run on the client side (when jobs are pushed
# to Cloud Tasks) as well as on the server side (when jobs are processed by
# your application)
#
# To add middleware for the client:
#
# Cloudtasker.configure do |config|
#   config.client_middleware do |chain|
#     chain.add MyClientHook
#   end
# end
#
# To modify middleware for the server, just call
# with another block:
#
# Cloudtasker.configure do |config|
#   config.server_middleware do |chain|
#     chain.add MyServerHook
#     chain.remove ActiveRecord
#   end
# end
#
# To insert immediately preceding another entry:
#
# Cloudtasker.configure do |config|
#   config.client_middleware do |chain|
#     chain.insert_before ActiveRecord, MyClientHook
#   end
# end
#
# To insert immediately after another entry:
#
# Cloudtasker.configure do |config|
#   config.client_middleware do |chain|
#     chain.insert_after ActiveRecord, MyClientHook
#   end
# end
#
# This is an example of a minimal server middleware:
#
# class MyServerHook
#   def call(worker_instance, msg, queue)
#     puts "Before work"
#     yield
#     puts "After work"
#   end
# end
#
# This is an example of a minimal client middleware, note
# the method must return the result or the job will not push
# to Redis:
#
# class MyClientHook
#   def call(worker_class, msg, queue, redis_pool)
#     puts "Before push"
#     result = yield
#     puts "After push"
#     result
#   end
# end
#
# source://cloudtasker//lib/cloudtasker/middleware/chain.rb#70
class Cloudtasker::Middleware::Chain
  include ::Enumerable

  # Build a new middleware chain.
  #
  # @return [Chain] a new instance of Chain
  # @yield [_self]
  # @yieldparam _self [Cloudtasker::Middleware::Chain] the object that the method was called on
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#76
  def initialize; end

  # Add a middleware at the end of the list.
  #
  # @param klass [Class] The middleware class to add.
  # @param *args [Arry<any>] The list of arguments to the middleware.
  # @return [Array<Cloudtasker::Middleware::Chain::Entry>] The updated list of middlewares
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#116
  def add(klass, *args); end

  # Empty the list of middlewares.
  #
  # @return [Array<Cloudtasker::Middleware::Chain::Entry>] The updated list of middlewares
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#201
  def clear; end

  # Iterate over the list middlewares and execute the block on each item.
  #
  # @param &block [Proc] The block to execute on each item.
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#86
  def each(&block); end

  # Checks if the middlware list is empty
  #
  # @return [Boolean] Return true if the middleware list is empty.
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#182
  def empty?; end

  # Return the list of middlewares.
  #
  # @return [Array<Cloudtasker::Middleware::Chain::Entry>] The list of middlewares
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#95
  def entries; end

  # Checks if middleware has been added to the list.
  #
  # @param klass [Class] The middleware class to check.
  # @return [Boolean] Return true if the middleware is in the list.
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#173
  def exists?(klass); end

  # Add a middleware after another middleware.
  #
  # @param oldklass [Class] The middleware class after which the new middleware should be inserted.
  # @param newklass [Class] The middleware class to insert.
  # @param *args [Arry<any>] The list of arguments for the inserted middleware.
  # @return [Array<Cloudtasker::Middleware::Chain::Entry>] The updated list of middlewares
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#159
  def insert_after(oldklass, newklass, *args); end

  # Add a middleware before another middleware.
  #
  # @param oldklass [Class] The middleware class before which the new middleware should be inserted.
  # @param newklass [Class] The middleware class to insert.
  # @param *args [Arry<any>] The list of arguments for the inserted middleware.
  # @return [Array<Cloudtasker::Middleware::Chain::Entry>] The updated list of middlewares
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#143
  def insert_before(oldklass, newklass, *args); end

  # Invoke the chain of middlewares.
  #
  # @param *args [Array<any>] The args to pass to each middleware.
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#210
  def invoke(*args); end

  # Add a middleware at the beginning of the list.
  #
  # @param klass [Class] The middleware class to add.
  # @param *args [Arry<any>] The list of arguments to the middleware.
  # @return [Array<Cloudtasker::Middleware::Chain::Entry>] The updated list of middlewares
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#129
  def prepend(klass, *args); end

  # Remove a middleware from the list.
  #
  # @param klass [Class] The middleware class to remove.
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#104
  def remove(klass); end

  # Return a list of instantiated middlewares. Each middleware gets
  # initialize with the args originally passed to `add`, `insert_before` etc.
  #
  # @return [Array<any>] The list of instantiated middlewares.
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#192
  def retrieve; end
end

# Middleware list item.
#
# source://cloudtasker//lib/cloudtasker/middleware/chain.rb#226
class Cloudtasker::Middleware::Entry
  # Build a new entry.
  #
  # @param klass [Class] The middleware class.
  # @param *args [Array<any>] The list of arguments for the middleware.
  # @return [Entry] a new instance of Entry
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#235
  def initialize(klass, *args); end

  # Returns the value of attribute args.
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#227
  def args; end

  # Returns the value of attribute klass.
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#227
  def klass; end

  # Return an instantiated middleware.
  #
  # @return [Any] The instantiated middleware.
  #
  # source://cloudtasker//lib/cloudtasker/middleware/chain.rb#245
  def make_new; end
end

# source://cloudtasker//lib/cloudtasker/missing_worker_arguments_error.rb#4
class Cloudtasker::MissingWorkerArgumentsError < ::StandardError; end

# source://cloudtasker//lib/cloudtasker/version.rb#4
Cloudtasker::VERSION = T.let(T.unsafe(nil), String)

# Cloud Task based workers
#
# source://cloudtasker//lib/cloudtasker/worker.rb#5
module Cloudtasker::Worker
  mixes_in_class_methods ::Cloudtasker::Worker::ClassMethods

  # Build a new worker instance.
  #
  # @param job_args [Array<any>] The list of perform args.
  # @param job_id [String] A unique ID identifying this job.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#143
  def initialize(job_queue: T.unsafe(nil), job_args: T.unsafe(nil), job_id: T.unsafe(nil), job_meta: T.unsafe(nil), job_retries: T.unsafe(nil), task_id: T.unsafe(nil)); end

  # Equality operator.
  #
  # @param other [Any] The object to compare.
  # @return [Boolean] True if the object is equal.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#311
  def ==(other); end

  # Return true if the job arguments are missing.
  #
  # This may happen if a job
  # was successfully run but retried due to Cloud Task dispatch deadline
  # exceeded. If the arguments were stored in Redis then they may have
  # been flushed already after the successful completion.
  #
  # If job arguments are missing then the job will simply be declared dead.
  #
  # @return [Boolean] True if the arguments are missing.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#363
  def arguments_missing?; end

  # Return the Dispatch deadline duration. Cloud Tasks will timeout the job after
  # this duration is elapsed.
  #
  # @return [Integer] The value in seconds.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#176
  def dispatch_deadline; end

  # Execute the worker by calling the `perform` with the args.
  #
  # @return [Any] The result of the perform.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#200
  def execute; end

  # Return the class name of the worker.
  #
  # @return [String] The class name.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#157
  def job_class_name; end

  # Return true if the job has strictly excceeded its maximum number
  # of retries.
  #
  # Used a preemptive filter when running the job.
  #
  # @return [Boolean] True if the job is dead
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#347
  def job_dead?; end

  # Return the time taken (in seconds) to perform the job. This duration
  # includes the middlewares and the actual perform method.
  #
  # @return [Float] The time taken in seconds as a floating point number.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#373
  def job_duration; end

  # Return the max number of retries allowed for this job.
  #
  # The order of precedence for retry lookup is:
  # - Worker `max_retries` method
  # - Class `max_retries` option
  # - Cloudtasker `max_retries` config option
  #
  # @return [Integer] The number of retries
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#325
  def job_max_retries; end

  # Return true if the job must declared dead upon raising
  # an error.
  #
  # @return [Boolean] True if the job must die on error.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#335
  def job_must_die?; end

  # Return the queue to use for this worker.
  #
  # @return [String] The name of queue.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#166
  def job_queue; end

  # Return the Cloudtasker logger instance.
  #
  # @return [Logger, any] The cloudtasker logger.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#191
  def logger; end

  # Return a new instance of the worker with the same args and metadata
  # but with a different id.
  #
  # @return [Cloudtasker::Worker] <description>
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#272
  def new_instance; end

  # Helper method used to re-enqueue the job. Re-enqueued
  # jobs keep the same job_id.
  #
  # This helper may be useful when jobs must pause activity due to external
  # factors such as when a third-party API is throttling the rate of API calls.
  #
  # @param interval [Integer] Delay to wait before processing the job again (in seconds).
  # @return [Cloudtasker::CloudTask] The Google Task response
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#261
  def reenqueue(interval); end

  # Run worker callback.
  #
  # @param callback [String, Symbol] The callback to run.
  # @param *args [Array<any>] The callback arguments.
  # @return [any] The callback return value
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#387
  def run_callback(callback, *args); end

  # Enqueue a worker, with or without delay.
  #
  # @param interval [Integer] The delay in seconds.
  # @param interval [Time, Integer] The time at which the job should run
  # @return [Cloudtasker::CloudTask] The Google Task response
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#240
  def schedule(**args); end

  # Return a unix timestamp specifying when to run the task.
  #
  # @param interval [Integer, nil] The time to wait.
  # @param time_at [Integer, nil] The time at which the job should run.
  # @return [Integer, nil] The Unix timestamp.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#225
  def schedule_time(interval: T.unsafe(nil), time_at: T.unsafe(nil)); end

  # Return a hash description of the worker.
  #
  # @return [Hash] The worker hash description.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#281
  def to_h; end

  # Return a json representation of the worker.
  #
  # @param *args [Array<any>] Arguments passed to to_json.
  # @return [String] The worker json representation.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#300
  def to_json(*args); end

  private

  # Execute the worker perform method through the middleware chain.
  #
  # @return [Any] The result of the perform method.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#413
  def execute_middleware_chain; end

  # Flag the worker as dead by invoking the on_dead hook
  # and raising a DeadWorkerError
  #
  # @param error [Exception, nil] An optional exception to be passed to the DeadWorkerError.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#402
  def flag_as_dead(error = T.unsafe(nil)); end

  class << self
    # Return a worker instance from a worker hash description.
    # A worker hash description is typically generated by calling `MyWorker#to_h`
    #
    # @param hash [Hash] A worker hash description.
    # @return [Cloudtasker::Worker, nil] The instantiated worker.
    #
    # source://cloudtasker//lib/cloudtasker/worker.rb#36
    def from_hash(hash); end

    # Return a worker instance from a serialized worker.
    # A worker can be serialized by calling `MyWorker#to_json`
    #
    # @param json [String] Worker serialized as json.
    # @return [Cloudtasker::Worker, nil] The instantiated worker.
    #
    # source://cloudtasker//lib/cloudtasker/worker.rb#22
    def from_json(json); end

    # Add class method to including class
    #
    # source://cloudtasker//lib/cloudtasker/worker.rb#7
    def included(base); end
  end
end

# Module class methods
#
# source://cloudtasker//lib/cloudtasker/worker.rb#56
module Cloudtasker::Worker::ClassMethods
  # Set the worker runtime options.
  #
  # @param opts [Hash] The worker options.
  # @return [Hash] The options set.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#64
  def cloudtasker_options(opts = T.unsafe(nil)); end

  # Return the worker runtime options.
  #
  # @return [Hash] The worker runtime options.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#74
  def cloudtasker_options_hash; end

  # Return the numbeer of times this worker will be retried.
  #
  # @return [Integer] The number of retries.
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#132
  def max_retries; end

  # Enqueue worker in the backgroundf.
  #
  # @param *args [Array<any>] List of worker arguments
  # @return [Cloudtasker::CloudTask] The Google Task response
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#85
  def perform_async(*args); end

  # Enqueue worker and delay processing.
  #
  # @param time_at [Time, Integer] The time at which the job should run.
  # @param *args [Array<any>] List of worker arguments
  # @return [Cloudtasker::CloudTask] The Google Task response
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#109
  def perform_at(time_at, *args); end

  # Enqueue worker and delay processing.
  #
  # @param interval [Integer, nil] The delay in seconds.
  # @param *args [Array<any>] List of worker arguments.
  # @return [Cloudtasker::CloudTask] The Google Task response
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#97
  def perform_in(interval, *args); end

  # Enqueue a worker with explicity options.
  #
  # @param args [Array<any>] The job arguments.
  # @param time_in [Time, Integer] The delay in seconds.
  # @param time_at [Time, Integer] The time at which the job should run.
  # @param queue [String, Symbol] The queue on which the worker should run.
  # @return [Cloudtasker::CloudTask] The Google Task response
  #
  # source://cloudtasker//lib/cloudtasker/worker.rb#123
  def schedule(args: T.unsafe(nil), time_in: T.unsafe(nil), time_at: T.unsafe(nil), queue: T.unsafe(nil)); end
end

class Cloudtasker::WorkerController < ::ActionController::Base
  private

  # source://actionview/7.0.4.1/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://actionpack/7.0.4.1/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

# Build, serialize and schedule tasks on the processing backend.
#
# source://cloudtasker//lib/cloudtasker/worker_handler.rb#7
class Cloudtasker::WorkerHandler
  # Prepare a new cloud task.
  #
  # @param worker [Cloudtasker::Worker] The worker instance.
  # @return [WorkerHandler] a new instance of WorkerHandler
  #
  # source://cloudtasker//lib/cloudtasker/worker_handler.rb#141
  def initialize(worker); end

  # Schedule the task on GCP Cloud Task.
  #
  # @param time_at [Integer, nil] A unix timestamp specifying when to run the job.
  #   Leave to `nil` to run now.
  # @return [Cloudtasker::CloudTask] The Google Task response
  #
  # source://cloudtasker//lib/cloudtasker/worker_handler.rb#236
  def schedule(time_at: T.unsafe(nil)); end

  # Return true if the worker args must be stored in Redis.
  #
  # @return [Boolean] True if the payload must be stored in redis.
  #
  # source://cloudtasker//lib/cloudtasker/worker_handler.rb#171
  def store_payload_in_redis?; end

  # Return the full task configuration sent to Cloud Task
  #
  # @return [Hash] The task body
  #
  # source://cloudtasker//lib/cloudtasker/worker_handler.rb#150
  def task_payload; end

  # Returns the value of attribute worker.
  #
  # source://cloudtasker//lib/cloudtasker/worker_handler.rb#8
  def worker; end

  # Return the payload to use for job arguments. This payload
  # is merged inside the #worker_payload.
  #
  # If the argument payload must be stored in Redis then returns:
  # `{ job_args_payload_id: <worker_id> }`
  #
  # If the argument payload must be natively handled by the backend
  # then returns:
  # `{ job_args: [...] }`
  #
  # @return [Hash] The worker args payload.
  #
  # source://cloudtasker//lib/cloudtasker/worker_handler.rb#189
  def worker_args_payload; end

  # Return the task payload that Google Task will eventually
  # send to the job processor.
  #
  # The payload includes the worker name and the arguments to
  # pass to the worker.
  #
  # The worker arguments should use primitive types as much
  # as possible as all arguments will be serialized to JSON.
  #
  # @return [Hash] The job payload
  #
  # source://cloudtasker//lib/cloudtasker/worker_handler.rb#219
  def worker_payload; end

  class << self
    # Execute a task worker from a task payload
    #
    # @param input_payload [Hash] The Cloud Task payload.
    # @return [Any] The return value of the worker perform method.
    #
    # source://cloudtasker//lib/cloudtasker/worker_handler.rb#71
    def execute_from_payload!(input_payload); end

    # Return the argument payload key (if present) along with the actual worker payload.
    #
    # If the payload was stored in Redis then retrieve it.
    #
    # @return [Hash] Hash
    #
    # source://cloudtasker//lib/cloudtasker/worker_handler.rb#120
    def extract_payload(input_payload); end

    # Return a namespaced key
    #
    # @param val [String, Symbol] The key to namespace
    # @return [String] The namespaced key.
    #
    # source://cloudtasker//lib/cloudtasker/worker_handler.rb#24
    def key(val); end

    # Log error on execution failure.
    #
    # @param worker [Cloudtasker::Worker, nil] The worker.
    # @param error [Exception] The error to log.
    #
    # source://cloudtasker//lib/cloudtasker/worker_handler.rb#50
    def log_execution_error(worker, error); end

    # Return the cloudtasker redis client
    #
    # @return [Cloudtasker::RedisClient] The cloudtasker redis client.
    #
    # source://cloudtasker//lib/cloudtasker/worker_handler.rb#35
    def redis; end

    # Local middleware used to retrieve the job arg payload from cache
    # if a arg payload reference is present.
    #
    # @param payload [Hash] The full job payload
    # @return [Any] The block result
    # @yield [Hash] The actual payload to use to process the job.
    #
    # source://cloudtasker//lib/cloudtasker/worker_handler.rb#85
    def with_worker_handling(input_payload); end
  end
end

# Alrogith used to sign the verification token
#
# source://cloudtasker//lib/cloudtasker/worker_handler.rb#11
Cloudtasker::WorkerHandler::JWT_ALG = T.let(T.unsafe(nil), String)

# Sub-namespace to use for redis keys when storing
# payloads in Redis
#
# source://cloudtasker//lib/cloudtasker/worker_handler.rb#15
Cloudtasker::WorkerHandler::REDIS_PAYLOAD_NAMESPACE = T.let(T.unsafe(nil), String)

# Add contextual information to logs generated
# by workers
#
# source://cloudtasker//lib/cloudtasker/worker_logger.rb#6
class Cloudtasker::WorkerLogger
  # Build a new instance of the class.
  #
  # @param worker [Cloudtasker::Worker] The worker.
  # @return [WorkerLogger] a new instance of WorkerLogger
  #
  # source://cloudtasker//lib/cloudtasker/worker_logger.rb#21
  def initialize(worker); end

  # Return the Proc responsible for formatting the log payload.
  #
  # @return [Proc] The context processor.
  #
  # source://cloudtasker//lib/cloudtasker/worker_logger.rb#30
  def context_processor; end

  # Log an debut message.
  #
  # @param msg [String] The message to log.
  # @param &block [Proc] Optional context block.
  #
  # source://cloudtasker//lib/cloudtasker/worker_logger.rb#126
  def debug(msg, &block); end

  # Log an error message.
  #
  # @param msg [String] The message to log.
  # @param &block [Proc] Optional context block.
  #
  # source://cloudtasker//lib/cloudtasker/worker_logger.rb#106
  def error(msg, &block); end

  # Log an fatal message.
  #
  # @param msg [String] The message to log.
  # @param &block [Proc] Optional context block.
  #
  # source://cloudtasker//lib/cloudtasker/worker_logger.rb#116
  def fatal(msg, &block); end

  # Format main log message.
  #
  # @param msg [String] The message to log.
  # @return [String] The formatted log message
  #
  # source://cloudtasker//lib/cloudtasker/worker_logger.rb#81
  def formatted_message(msg); end

  # Format the log message as string.
  #
  # @param msg [Object] The log message or object.
  # @return [String] The formatted message
  #
  # source://cloudtasker//lib/cloudtasker/worker_logger.rb#61
  def formatted_message_as_string(msg); end

  # Log an info message.
  #
  # @param msg [String] The message to log.
  # @param &block [Proc] Optional context block.
  #
  # source://cloudtasker//lib/cloudtasker/worker_logger.rb#96
  def info(msg, &block); end

  # The block to pass to log messages.
  #
  # @return [Proc] The log block.
  #
  # source://cloudtasker//lib/cloudtasker/worker_logger.rb#41
  def log_block; end

  # Return the Cloudtasker logger.
  #
  # @return [Logger, any] The cloudtasker logger.
  #
  # source://cloudtasker//lib/cloudtasker/worker_logger.rb#50
  def logger; end

  # Delegate all methods to the underlying logger.
  #
  # @param name [String, Symbol] The method to delegate.
  # @param *args [Array<any>] The list of method arguments.
  # @param &block [Proc] Block passed to the method.
  # @return [Any] The method return value
  #
  # source://cloudtasker//lib/cloudtasker/worker_logger.rb#139
  def method_missing(name, *args, &block); end

  # Returns the value of attribute worker.
  #
  # source://cloudtasker//lib/cloudtasker/worker_logger.rb#7
  def worker; end

  # Sets the attribute worker
  #
  # @param value the value to set the attribute worker to.
  #
  # source://cloudtasker//lib/cloudtasker/worker_logger.rb#7
  def worker=(_arg0); end

  private

  # Log a message for the provided log level.
  #
  # @param level [String, Symbol] The log level
  # @param msg [String] The message to log.
  # @param &block [Proc] Optional context block.
  #
  # source://cloudtasker//lib/cloudtasker/worker_logger.rb#168
  def log_message(level, msg, &block); end

  # Check if the class respond to a certain method.
  #
  # @param name [String, Symbol] The name of the method.
  # @param include_private [Boolean] Whether to check private methods or not. Default to false.
  # @return [Boolean] Return true if the class respond to this method.
  #
  # source://cloudtasker//lib/cloudtasker/worker_logger.rb#155
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  class << self
    # Returns the value of attribute log_context_processor.
    #
    # source://cloudtasker//lib/cloudtasker/worker_logger.rb#10
    def log_context_processor; end

    # Sets the attribute log_context_processor
    #
    # @param value the value to set the attribute log_context_processor to.
    #
    # source://cloudtasker//lib/cloudtasker/worker_logger.rb#10
    def log_context_processor=(_arg0); end
  end
end

# Only log the job meta information by default (exclude arguments)
#
# source://cloudtasker//lib/cloudtasker/worker_logger.rb#14
Cloudtasker::WorkerLogger::DEFAULT_CONTEXT_PROCESSOR = T.let(T.unsafe(nil), Proc)
