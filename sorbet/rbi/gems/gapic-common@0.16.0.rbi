# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `gapic-common` gem.
# Please instead update this file by running `bin/tapioca gem gapic-common`.

# source://gapic-common//lib/gapic/common/error.rb#17
module Gapic; end

# Encapsulates the overridable settings for a particular RPC call.
#
# source://gapic-common//lib/gapic/call_options/error_codes.rb#16
class Gapic::CallOptions
  # Create a new Options object instance.
  #
  # @param timeout [Numeric] The client-side timeout for RPC calls.
  # @param metadata [Hash] The request header params.
  # @param retry_policy [Hash, RetryPolicy, Proc] The policy for error retry. A Hash can be provided to
  #   customize the policy object, using keys that match the arguments for {RetryPolicy.new}.
  #
  #   A Proc object can also be provided. The Proc should accept an error as an argument, and return `true` if the
  #   error should be retried or `false` if not. If the error is to be retried, the Proc object must also block
  #   with an incremental delay before returning `true`.
  # @return [CallOptions] a new instance of CallOptions
  #
  # source://gapic-common//lib/gapic/call_options.rb#46
  def initialize(timeout: T.unsafe(nil), metadata: T.unsafe(nil), retry_policy: T.unsafe(nil)); end

  # @private Equality test
  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/call_options.rb#98
  def ==(other); end

  # Apply default values to the options object. This does not replace user-provided values, it only overrides
  # empty values.
  #
  # @param timeout [Numeric] The client-side timeout for RPC calls.
  # @param metadata [Hash] the request header params.
  # @param retry_policy [Hash] the policy for error retry.
  # @param retry_policy [Hash] The policy for error retry. keys must match the arguments for
  #   {RetryPolicy.new}.
  # @private
  #
  # source://gapic-common//lib/gapic/call_options.rb#66
  def apply_defaults(timeout: T.unsafe(nil), metadata: T.unsafe(nil), retry_policy: T.unsafe(nil)); end

  # @private Equality test
  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/call_options.rb#98
  def eql?(other); end

  # @private Hash code
  #
  # source://gapic-common//lib/gapic/call_options.rb#107
  def hash; end

  # Return a new CallOptions with the given modifications. The current object
  # is not modified.
  #
  # @param kwargs [keywords] Updated fields. See {#initialize} for details.
  # @return [CallOptions] A new CallOptions object.
  #
  # source://gapic-common//lib/gapic/call_options.rb#92
  def merge(**kwargs); end

  # @return [Hash]
  #
  # source://gapic-common//lib/gapic/call_options.rb#31
  def metadata; end

  # @return [RetryPolicy, Object]
  #
  # source://gapic-common//lib/gapic/call_options.rb#32
  def retry_policy; end

  # @return [Numeric, nil]
  #
  # source://gapic-common//lib/gapic/call_options.rb#30
  def timeout; end

  # Convert to hash form.
  #
  # @return [Hash]
  #
  # source://gapic-common//lib/gapic/call_options.rb#77
  def to_h; end
end

# The gRPC error codes and their HTTP mapping
#
# @private
#
# source://gapic-common//lib/gapic/call_options/error_codes.rb#21
module Gapic::CallOptions::ErrorCodes
  class << self
    # Converts http error codes into corresponding gRPC ones
    #
    # @private
    #
    # source://gapic-common//lib/gapic/call_options/error_codes.rb#66
    def grpc_error_for(http_error_code); end
  end
end

# @private
#
# source://gapic-common//lib/gapic/call_options/error_codes.rb#46
Gapic::CallOptions::ErrorCodes::ERROR_STRING_MAPPING = T.let(T.unsafe(nil), Hash)

# @private
#
# source://gapic-common//lib/gapic/call_options/error_codes.rb#49
Gapic::CallOptions::ErrorCodes::HTTP_GRPC_CODE_MAP = T.let(T.unsafe(nil), Hash)

# The policy for retrying failed RPC calls using an incremental backoff. A new object instance should be used for
# every RpcCall invocation.
#
# Only errors orginating from GRPC will be retried.
#
# source://gapic-common//lib/gapic/call_options/retry_policy.rb#25
class Gapic::CallOptions::RetryPolicy
  # Create new API Call RetryPolicy.
  #
  # @param initial_delay [Numeric] client-side timeout
  # @param multiplier [Numeric] client-side timeout
  # @param max_delay [Numeric] client-side timeout
  # @return [RetryPolicy] a new instance of RetryPolicy
  #
  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#33
  def initialize(retry_codes: T.unsafe(nil), initial_delay: T.unsafe(nil), multiplier: T.unsafe(nil), max_delay: T.unsafe(nil)); end

  # @private Equality test
  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#92
  def ==(other); end

  # Apply default values to the policy object. This does not replace user-provided values, it only overrides empty
  # values.
  #
  # @param retry_policy [Hash] The policy for error retry. keys must match the arguments for
  #   {RpcCall::RetryPolicy.new}.
  # @private
  #
  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#80
  def apply_defaults(retry_policy); end

  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#63
  def call(error); end

  # The current delay value.
  #
  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#59
  def delay; end

  # @private Equality test
  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#92
  def eql?(other); end

  # @private Hash code
  #
  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#102
  def hash; end

  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#45
  def initial_delay; end

  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#53
  def max_delay; end

  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#49
  def multiplier; end

  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#41
  def retry_codes; end

  private

  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#119
  def convert_codes(input_codes); end

  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#114
  def delay!; end

  # Calculate and set the next delay value.
  #
  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#133
  def increment_delay!; end

  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#108
  def retry?(error); end
end

# The gapic-common gem includes various common libraries for clients built
# with Gapic.
#
# source://gapic-common//lib/gapic/common/error.rb#18
module Gapic::Common; end

# Gapic Common exception class
#
# source://gapic-common//lib/gapic/common/error.rb#20
class Gapic::Common::Error < ::StandardError; end

# source://gapic-common//lib/gapic/common/version.rb#17
Gapic::Common::VERSION = T.let(T.unsafe(nil), String)

# Config is a simple DSL for creating Configuration classes.
#
# @example
#   require "gapic/config"
#
#   class SampleConfig
#   extend Gapic::Config
#
#   config_attr :name,   nil,         String, nil
#   config_attr :active, true,        true, false
#   config_attr :count,  nil,         Numeric, nil
#   config_attr :env,    :production, String, Symbol
#
#   def initialize parent_config = nil
#   @parent_config = parent_config unless parent_config.nil?
#   yield self if block_given?
#   end
#   end
#
#   config = SampleConfig.new
#
#   config.name             #=> nil
#   config.name = "thor"    #=> "thor"
#   config.name             #=> "thor"
#   config.name = :thor     # ArgumentError
#
# source://gapic-common//lib/gapic/config.rb#43
module Gapic::Config
  # Add configuration attribute methods to the configuratin class.
  #
  # @param key [String, Symbol] The name of the option
  # @param initial [Object, nil] Initial value (nil is allowed)
  # @param opts [Hash] Validation options
  # @raise [NameError]
  #
  # source://gapic-common//lib/gapic/config.rb#51
  def config_attr(name, default, *valid_values, &validator); end

  private

  # source://gapic-common//lib/gapic/config.rb#69
  def create_getter(name_ivar, name, default); end

  # source://gapic-common//lib/gapic/config.rb#82
  def create_setter(name_ivar, name_setter, default, validator); end
end

# Config::Method is a configuration class that represents the configuration for an API RPC call.
#
# @example
#   require "gapic/config"
#
#   class ServiceConfig
#   extend Gapic::Config
#
#   config_attr :host,     "localhost", String
#   config_attr :port,     443,         Integer
#   config_attr :timeout,  nil,         Numeric, nil
#   config_attr :metadata, nil,         Hash, nil
#
#   attr_reader :rpc_method
#
#   def initialize parent_config = nil
#   @parent_config = parent_config unless parent_config.nil?
#   @rpc_method = Gapic::Config::Method.new
#
#   yield self if block_given?
#   end
#   end
#
#   config = ServiceConfig.new
#
#   config.timeout = 60
#   config.rpc_method.timeout = 120
#
# source://gapic-common//lib/gapic/config/method.rb#46
class Gapic::Config::Method
  extend ::Gapic::Config

  # Create a new Config::Method object instance.
  #
  # @param parent_method [Gapic::Config::Method, nil] The config to look to values for.
  # @return [Method] a new instance of Method
  # @yield [_self]
  # @yieldparam _self [Gapic::Config::Method] the object that the method was called on
  #
  # source://gapic-common//lib/gapic/config/method.rb#58
  def initialize(parent_method = T.unsafe(nil)); end

  # source://gapic-common//lib/gapic/config.rb#70
  def metadata; end

  # source://gapic-common//lib/gapic/config.rb#83
  def metadata=(new_value); end

  # source://gapic-common//lib/gapic/config.rb#70
  def retry_policy; end

  # source://gapic-common//lib/gapic/config.rb#83
  def retry_policy=(new_value); end

  # source://gapic-common//lib/gapic/config.rb#70
  def timeout; end

  # source://gapic-common//lib/gapic/config.rb#83
  def timeout=(new_value); end
end

# A collection of common header values.
#
# source://gapic-common//lib/gapic/headers.rb#21
module Gapic::Headers
  class << self
    # @param transports_version_send [Array] Which transports to send versions for.
    #   Allowed values to contain are:
    #   `:grpc` to send the GRPC library version (if defined)
    #   `:rest` to send the REST library version (if defined)
    #   Defaults to `[:grpc]`
    # @param lib_name [String] The client library name.
    # @param lib_version [String] The client library version.
    # @param gax_version [String] The Gapic version. Defaults to `Gapic::Common::VERSION`.
    # @param gapic_version [String] The Gapic version.
    # @param grpc_version [String] The GRPC version. Defaults to `::GRPC::VERSION`.
    # @param rest_version [String] The Rest Library (Faraday) version. Defaults to `Faraday::VERSION`.
    # @param ruby_version [String] The ruby version. Defaults to `RUBY_VERSION`.
    #
    # source://gapic-common//lib/gapic/headers.rb#35
    def x_goog_api_client(ruby_version: T.unsafe(nil), lib_name: T.unsafe(nil), lib_version: T.unsafe(nil), gax_version: T.unsafe(nil), gapic_version: T.unsafe(nil), grpc_version: T.unsafe(nil), rest_version: T.unsafe(nil), protobuf_version: T.unsafe(nil), transports_version_send: T.unsafe(nil)); end
  end
end

# A class used to wrap Google::Longrunning::Operation objects. This class provides helper methods to check the
# status of an Operation
#
# @example Checking Operation status
#   # this example assumes both api_client and operations_client
#   # already exist.
#   require "gapic/operation"
#
#   op = Gapic::Operation.new(
#   api_client.method_that_returns_longrunning_operation(),
#   operations_client,
#   Google::Example::ResultType,
#   Google::Example::MetadataType
#   )
#
#   op.done? # => false
#   op.reload! # => operation completed
#
#   if op.done?
#   results = op.results
#   handle_error(results) if op.error?
#   # Handle results.
#   end
# @example Working with callbacks
#   # this example assumes both api_client and operations_client
#   # already exist.
#   require "gapic/operation"
#
#   op = Gapic::Operation.new(
#   api_client.method_that_returns_longrunning_operation(),
#   operations_client,
#   Google::Example::ResultType,
#   Google::Example::MetadataType
#   )
#
#   # Register a callback to be run when an operation is done.
#   op.on_done do |operation|
#   raise operation.results.message if operation.error?
#   # process(operation.results)
#   # process(operation.metadata)
#   end
#
#   # Reload the operation running callbacks if operation completed.
#   op.reload!
#
#   # Or block until the operation completes, passing a block to be called
#   # on completion.
#   op.wait_until_done! do |operation|
#   raise operation.results.message if operation.error?
#   # process(operation.results)
#   # process(operation.rmetadata)
#   end
#
# source://gapic-common//lib/gapic/operation/retry_policy.rb#16
class Gapic::Operation
  # @param grpc_op [Google::Longrunning::Operation] The inital longrunning operation.
  # @param client [Google::Longrunning::OperationsClient] The client that handles the grpc operations.
  # @param result_type [Class] The class type to be unpacked from the result. If not provided the class type will be
  #   looked up. Optional.
  # @param metadata_type [Class] The class type to be unpacked from the metadata. If not provided the class type
  #   will be looked up. Optional.
  # @param options [Gapic::CallOptions] call options for this operation
  # @return [Operation] a new instance of Operation
  #
  # source://gapic-common//lib/gapic/operation.rb#88
  def initialize(grpc_op, client, result_type: T.unsafe(nil), metadata_type: T.unsafe(nil), options: T.unsafe(nil)); end

  # Cancels the operation.
  #
  # @param options [Gapic::CallOptions, Hash] The options for making the RPC call. A Hash can be provided to customize
  #   the options object, using keys that match the arguments for {Gapic::CallOptions.new}.
  #
  # source://gapic-common//lib/gapic/operation.rb#199
  def cancel(options: T.unsafe(nil)); end

  # Deletes the operation.
  #
  # @param options [Gapic::CallOptions, Hash] The options for making the RPC call. A Hash can be provided to customize
  #   the options object, using keys that match the arguments for {Gapic::CallOptions.new}.
  #
  # source://gapic-common//lib/gapic/operation.rb#212
  def delete(options: T.unsafe(nil)); end

  # Checks if the operation is done. This does not send a new api call, but checks the result of the previous api
  # call to see if done.
  #
  # @return [Boolean] Whether the operation is done.
  #
  # source://gapic-common//lib/gapic/operation.rb#144
  def done?; end

  # If the operation response is an error, the error will be returned, otherwise returns nil.
  #
  # @return [Google::Rpc::Status, nil] The error object.
  #
  # source://gapic-common//lib/gapic/operation.rb#189
  def error; end

  # Checks if the operation is done and the result is an error. If the operation is not finished then this will
  # return false.
  #
  # @return [Boolean] Whether an error has been returned.
  #
  # source://gapic-common//lib/gapic/operation.rb#180
  def error?; end

  # @return [Google::Longrunning::Operation] The wrapped grpc
  #   operation object.
  #
  # source://gapic-common//lib/gapic/operation.rb#77
  def grpc_op; end

  # Returns the metadata of an operation. If a type is provided, the metadata will be unpacked using the type
  # provided; returning nil if the metadata is not of the type provided. If the type is not of provided, the
  # metadata will be unpacked using the metadata's type_url if the type_url is found in the
  # {Google::Protobuf::DescriptorPool.generated_pool}. If the type cannot be found the raw metadata is retuned.
  #
  # @return [Object, nil] The metadata of the operation. Can be nil.
  #
  # source://gapic-common//lib/gapic/operation.rb#126
  def metadata; end

  # Returns the server-assigned name of the operation, which is only unique within the same service that originally
  # returns it. If you use the default HTTP mapping, the name should have the format of operations/some/unique/name.
  #
  # @return [String] The name of the operation.
  #
  # source://gapic-common//lib/gapic/operation.rb#114
  def name; end

  # Registers a callback to be run when a refreshed operation is marked as done. If the operation has completed
  # prior to a call to this function the callback will be called instead of registered.
  #
  # source://gapic-common//lib/gapic/operation.rb#275
  def on_done(&block); end

  # Reloads the operation object.
  #
  # @param options [Gapic::CallOptions, Hash] The options for making the RPC call. A Hash can be provided to customize
  #   the options object, using keys that match the arguments for {Gapic::CallOptions.new}.
  # @return [Gapic::Operation] Since this method changes internal state, it returns itself.
  #
  # source://gapic-common//lib/gapic/operation.rb#227
  def refresh!(options: T.unsafe(nil)); end

  # Reloads the operation object.
  #
  # @param options [Gapic::CallOptions, Hash] The options for making the RPC call. A Hash can be provided to customize
  #   the options object, using keys that match the arguments for {Gapic::CallOptions.new}.
  # @return [Gapic::Operation] Since this method changes internal state, it returns itself.
  #
  # source://gapic-common//lib/gapic/operation.rb#227
  def reload!(options: T.unsafe(nil)); end

  # If the operation is done, returns the response, otherwise returns nil.
  #
  # @return [Object, nil] The response of the operation.
  #
  # source://gapic-common//lib/gapic/operation.rb#162
  def response; end

  # Checks if the operation is done and the result is a response. If the operation is not finished then this will
  # return false.
  #
  # @return [Boolean] Whether a response has been returned.
  #
  # source://gapic-common//lib/gapic/operation.rb#154
  def response?; end

  # If the operation is done, returns the response. If the operation response is an error, the error will be
  # returned. Otherwise returns nil.
  #
  # @return [Object, Google::Rpc::Status, nil] The result of the operation. If it is an error a
  #   {Google::Rpc::Status} will be returned.
  #
  # source://gapic-common//lib/gapic/operation.rb#103
  def results; end

  # Blocking method to wait until the operation has completed or the maximum timeout has been reached. Upon
  # completion, registered callbacks will be called, then - if a block is given - the block will be called.
  #
  # @param retry_policy [RetryPolicy, Hash, Proc] The policy for retry. A custom proc that takes the error as an
  #   argument and blocks can also be provided.
  # @yield [_self]
  # @yieldparam _self [Gapic::Operation] the object that the method was called on
  #
  # source://gapic-common//lib/gapic/operation.rb#255
  def wait_until_done!(retry_policy: T.unsafe(nil)); end
end

# The policy for retrying operation reloads using an incremental backoff. A new object instance should be used for
# every Operation invocation.
#
# source://gapic-common//lib/gapic/operation/retry_policy.rb#21
class Gapic::Operation::RetryPolicy
  # Create new Operation RetryPolicy.
  #
  # @param initial_delay [Numeric] client-side timeout
  # @param multiplier [Numeric] client-side timeout
  # @param max_delay [Numeric] client-side timeout
  # @param timeout [Numeric] client-side timeout
  # @return [RetryPolicy] a new instance of RetryPolicy
  #
  # source://gapic-common//lib/gapic/operation/retry_policy.rb#30
  def initialize(initial_delay: T.unsafe(nil), multiplier: T.unsafe(nil), max_delay: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # source://gapic-common//lib/gapic/operation/retry_policy.rb#54
  def call; end

  # source://gapic-common//lib/gapic/operation/retry_policy.rb#38
  def initial_delay; end

  # source://gapic-common//lib/gapic/operation/retry_policy.rb#46
  def max_delay; end

  # source://gapic-common//lib/gapic/operation/retry_policy.rb#42
  def multiplier; end

  # source://gapic-common//lib/gapic/operation/retry_policy.rb#50
  def timeout; end

  private

  # source://gapic-common//lib/gapic/operation/retry_policy.rb#65
  def deadline; end

  # The current delay value.
  #
  # source://gapic-common//lib/gapic/operation/retry_policy.rb#76
  def delay; end

  # source://gapic-common//lib/gapic/operation/retry_policy.rb#80
  def delay!; end

  # Calculate and set the next delay value.
  #
  # source://gapic-common//lib/gapic/operation/retry_policy.rb#87
  def increment_delay!; end

  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/operation/retry_policy.rb#70
  def retry?; end
end

# A class to provide the Enumerable interface to the response of a paginated method. PagedEnumerable assumes
# response message holds a list of resources and the token to the next page.
#
# PagedEnumerable provides the enumerations over the resource data, and also provides the enumerations over the
# pages themselves.
#
# @example normal iteration over resources.
#   paged_enumerable.each { |resource| puts resource }
# @example per-page iteration.
#   paged_enumerable.each_page { |page| puts page }
# @example Enumerable over pages.
#   paged_enumerable.each_page do |page|
#   page.each { |resource| puts resource }
#   end
# @example more exact operations over pages.
#   while some_condition()
#   page = paged_enumerable.page
#   do_something(page)
#   break if paged_enumerable.next_page?
#   paged_enumerable.next_page
#   end
#
# source://gapic-common//lib/gapic/paged_enumerable.rb#42
class Gapic::PagedEnumerable
  include ::Enumerable

  # @param grpc_stub [Gapic::GRPC::Stub] The Gapic gRPC stub object.
  # @param method_name [Symbol] The RPC method name.
  # @param request [Object] The request object.
  # @param response [Object] The response object.
  # @param operation [::GRPC::ActiveCall::Operation] The RPC operation for the response.
  # @param options [Gapic::CallOptions] The options for making the RPC call.
  # @param format_resource [Proc] A Proc object to format the resource object. The Proc should accept response as an
  #   argument, and return a formatted resource object. Optional.
  # @private
  # @return [PagedEnumerable] a new instance of PagedEnumerable
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#61
  def initialize(grpc_stub, method_name, request, response, operation, options, format_resource: T.unsafe(nil)); end

  # Iterate over the resources.
  #
  # @raise [RuntimeError] if it's not started yet.
  # @yield [Object] Gives the resource objects in the stream.
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#83
  def each(&block); end

  # Iterate over the pages.
  #
  # @raise if it's not started yet.
  # @yield [Page] Gives the pages in the stream.
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#98
  def each_page; end

  # Update the response in the current page.
  #
  # @return [Page] the new page object.
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#120
  def next_page; end

  # Update the response in the current page.
  #
  # @return [Page] the new page object.
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#120
  def next_page!; end

  # True if it has the next page.
  #
  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#111
  def next_page?; end

  # The page token to be used for the next RPC call.
  #
  # @return [String]
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#140
  def next_page_token; end

  # Returns the value of attribute page.
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#48
  def page; end

  # The current response object, for the current page.
  #
  # @return [Object]
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#149
  def response; end

  private

  # @raise [ArgumentError]
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#155
  def verify_request!; end

  # @raise [ArgumentError]
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#168
  def verify_response!; end
end

# A class to represent a page in a PagedEnumerable. This also implements Enumerable, so it can iterate over the
# resource elements.
#
# source://gapic-common//lib/gapic/paged_enumerable.rb#199
class Gapic::PagedEnumerable::Page
  include ::Enumerable

  # @param response [Object] The response object for the page.
  # @param resource_field [String] The name of the field in response which holds the resources.
  # @param operation [::GRPC::ActiveCall::Operation] the RPC operation for the page.
  # @param format_resource [Proc] A Proc object to format the resource object. The Proc should accept response as an
  #   argument, and return a formatted resource object. Optional.
  # @private
  # @return [Page] a new instance of Page
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#212
  def initialize(response, resource_field, operation, format_resource: T.unsafe(nil)); end

  # Iterate over the resources.
  #
  # @yield [Object] Gives the resource objects in the page.
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#224
  def each; end

  # The page token to be used for the next RPC call.
  #
  # @return [String]
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#241
  def next_page_token; end

  # Truthiness of next_page_token.
  #
  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#252
  def next_page_token?; end

  # @return [::GRPC::ActiveCall::Operation] the RPC operation for the page.
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#202
  def operation; end

  # @return [Object] the response object for the page.
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#201
  def response; end
end

# TODO: Describe Protobuf
#
# source://gapic-common//lib/gapic/protobuf.rb#20
module Gapic::Protobuf
  class << self
    # Creates an instance of a protobuf message from a hash that may include nested hashes. `google/protobuf` allows
    # for the instantiation of protobuf messages using hashes but does not allow for nested hashes to instantiate
    # nested submessages.
    #
    # @param hash [Hash, Object] The hash to be converted into a proto message. If an instance of the proto message
    #   class is given, it is returned unchanged.
    # @param to [Class] The corresponding protobuf message class of the given hash.
    # @raise [ArgumentError]
    # @return [Object] An instance of the given message class.
    #
    # source://gapic-common//lib/gapic/protobuf.rb#31
    def coerce(hash, to:); end

    # Utility for converting a Ruby Time instance to a Google::Protobuf::Timestamp.
    #
    # @param time [Time] The Time to be converted.
    # @return [Google::Protobuf::Timestamp] The converted Google::Protobuf::Timestamp.
    #
    # source://gapic-common//lib/gapic/protobuf.rb#146
    def time_to_timestamp(time); end

    # Utility for converting a Google::Protobuf::Timestamp instance to a Ruby time.
    #
    # @param timestamp [Google::Protobuf::Timestamp] The timestamp to be converted.
    # @return [Time] The converted Time.
    #
    # source://gapic-common//lib/gapic/protobuf.rb#136
    def timestamp_to_time(timestamp); end

    private

    # Coerces the values of an array to be acceptable by the instantiation method the wrapping message.
    #
    # @param array [Array<Object>] The values to be coerced.
    # @param field_descriptor [Google::Protobuf::FieldDescriptor] The field descriptor of the values.
    # @private
    # @raise [ArgumentError]
    # @return [Array<Object>] The coerced version of the given values.
    #
    # source://gapic-common//lib/gapic/protobuf.rb#98
    def coerce_array(array, field_descriptor); end

    # Coerces the value of a field to be acceptable by the instantiation method of the wrapping message.
    #
    # @param val [Object] The value to be coerced.
    # @param field_descriptor [Google::Protobuf::FieldDescriptor] The field descriptor of the value.
    # @private
    # @return [Object] The coerced version of the given value.
    #
    # source://gapic-common//lib/gapic/protobuf.rb#79
    def coerce_submessage(val, field_descriptor); end

    # Coerces values of the given hash to be acceptable by the instantiation method provided by `google/protobuf`
    #
    # @param hash [Hash] The hash whose nested hashes will be coerced.
    # @param message_class [Class] The corresponding protobuf message class of the given hash.
    # @private
    # @return [Hash] A hash whose nested hashes have been coerced.
    #
    # source://gapic-common//lib/gapic/protobuf.rb#50
    def coerce_submessages(hash, message_class); end

    # Coerces the value of a field to be acceptable by the instantiation method of the wrapping message.
    #
    # @param val [Object] The value to be coerced.
    # @param field_descriptor [Google::Protobuf::FieldDescriptor] The field descriptor of the value.
    # @private
    # @return [Object] The coerced version of the given value.
    #
    # source://gapic-common//lib/gapic/protobuf.rb#125
    def coerce_value(val, field_descriptor); end

    # Hack to determine if field_descriptor is for a map.
    #
    # TODO(geigerj): Remove this once protobuf Ruby supports an official way
    # to determine if a FieldDescriptor represents a map.
    # See: https://github.com/google/protobuf/issues/3425
    #
    # @return [Boolean]
    #
    # source://gapic-common//lib/gapic/protobuf.rb#111
    def map_field?(field_descriptor); end
  end
end

# Manages requests for an input stream and holds the stream open until {#close} is called.
#
# source://gapic-common//lib/gapic/stream_input.rb#19
class Gapic::StreamInput
  # Create a new input stream object to manage streaming requests and hold the stream open until {#close} is called.
  #
  # @param requests [Object]
  # @return [StreamInput] a new instance of StreamInput
  #
  # source://gapic-common//lib/gapic/stream_input.rb#25
  def initialize(*requests); end

  # Adds a request object to the stream.
  #
  # @param request [Object]
  # @return [StreamInput] Returns self.
  #
  # source://gapic-common//lib/gapic/stream_input.rb#39
  def <<(request); end

  # Adds a request object to the stream.
  #
  # @param request [Object]
  # @return [StreamInput] Returns self.
  #
  # source://gapic-common//lib/gapic/stream_input.rb#39
  def append(request); end

  # Closes the stream.
  #
  # @return [StreamInput] Returns self.
  #
  # source://gapic-common//lib/gapic/stream_input.rb#52
  def close; end

  # Adds a request object to the stream.
  #
  # @param request [Object]
  # @return [StreamInput] Returns self.
  #
  # source://gapic-common//lib/gapic/stream_input.rb#39
  def push(request); end

  # Iterates the requests given to the stream.
  #
  # @private
  # @return [Enumerator] An Enumerator is returned if no block is given.
  # @yield [request] The block for accessing each request.
  # @yieldparam request [Object] The request object.
  #
  # source://gapic-common//lib/gapic/stream_input.rb#67
  def to_enum; end
end
