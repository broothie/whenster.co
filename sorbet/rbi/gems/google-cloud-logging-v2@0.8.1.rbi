# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-cloud-logging-v2` gem.
# Please instead update this file by running `bin/tapioca gem google-cloud-logging-v2`.

# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/version.rb#20
module Google; end

# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/version.rb#21
module Google::Cloud
  # source://google-cloud-error_reporting/0.42.2/lib/google-cloud-error_reporting.rb#60
  def error_reporting(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # source://google-cloud-logging/2.3.2/lib/google-cloud-logging.rb#67
  def logging(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # source://google-cloud-storage/1.44.0/lib/google-cloud-storage.rb#76
  def storage(scope: T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil), open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), send_timeout: T.unsafe(nil), max_elapsed_time: T.unsafe(nil), base_interval: T.unsafe(nil), max_interval: T.unsafe(nil), multiplier: T.unsafe(nil)); end

  # source://google-cloud-trace/0.42.1/lib/google-cloud-trace.rb#60
  def trace(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  class << self
    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#158
    def auto_load_files; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#128
    def auto_load_gems; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#91
    def configure; end

    # source://google-cloud-env/1.6.0/lib/google/cloud/env.rb#490
    def env; end

    # source://google-cloud-error_reporting/0.42.2/lib/google-cloud-error_reporting.rb#105
    def error_reporting(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#103
    def init_configuration; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#142
    def loaded_files; end

    # source://google-cloud-logging/2.3.2/lib/google-cloud-logging.rb#109
    def logging(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#62
    def new(project_id = T.unsafe(nil), credentials = T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-storage/1.44.0/lib/google-cloud-storage.rb#135
    def storage(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil), open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), send_timeout: T.unsafe(nil), max_elapsed_time: T.unsafe(nil), base_interval: T.unsafe(nil), max_interval: T.unsafe(nil), multiplier: T.unsafe(nil)); end

    # source://google-cloud-trace/0.42.1/lib/google-cloud-trace.rb#101
    def trace(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end
  end
end

# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/version.rb#22
module Google::Cloud::Logging
  class << self
    # source://google-cloud-logging/2.3.2/lib/google/cloud/logging.rb#164
    def configure; end

    # source://google-cloud-logging/2.3.2/lib/google/cloud/logging.rb#180
    def default_credentials(scope: T.unsafe(nil)); end

    # source://google-cloud-logging/2.3.2/lib/google/cloud/logging.rb#172
    def default_project_id; end

    # source://google-cloud-logging/2.3.2/lib/google/cloud/logging.rb#84
    def new(project_id: T.unsafe(nil), credentials: T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil), endpoint: T.unsafe(nil), project: T.unsafe(nil), keyfile: T.unsafe(nil)); end
  end
end

# source://google-cloud-logging/2.3.2/lib/google/cloud/logging/rails.rb#23
Google::Cloud::Logging::DEFAULT_LOG_NAME = T.let(T.unsafe(nil), String)

# To load this package, including all its services, and instantiate a client:
#
# @example
#
#   require "google/cloud/logging/v2"
#   client = ::Google::Cloud::Logging::V2::LoggingService::Client.new
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/version.rb#23
module Google::Cloud::Logging::V2; end

class Google::Cloud::Logging::V2::BigQueryOptions
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::CmekSettings
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

# Service for configuring sinks used to route log entries.
#
# To load this service and instantiate a client:
#
#     require "google/cloud/logging/v2/config_service"
#     client = ::Google::Cloud::Logging::V2::ConfigService::Client.new
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/credentials.rb#25
module Google::Cloud::Logging::V2::ConfigService; end

# Client for the ConfigService service.
#
# Service for configuring sinks used to route log entries.
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#32
class Google::Cloud::Logging::V2::ConfigService::Client
  include ::Google::Cloud::Logging::V2::ConfigService::Paths

  # Create a new ConfigService client object.
  #
  # @example
  #
  #   # Create a client using the default configuration
  #   client = ::Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a client using a custom configuration
  #   client = ::Google::Cloud::Logging::V2::ConfigService::Client.new do |config|
  #   config.timeout = 10.0
  #   end
  # @return [Client] a new instance of Client
  # @yield [config] Configure the ConfigService client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#150
  def initialize; end

  # @private
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#36
  def config_service_stub; end

  # Configure the ConfigService Client instance.
  #
  # The configuration is set to the derived mode, meaning that values can be changed,
  # but structural changes (adding new fields, etc.) are not allowed. Structural changes
  # should be made on {Client.configure}.
  #
  # See {::Google::Cloud::Logging::V2::ConfigService::Client::Configuration}
  # for a description of the configuration fields.
  #
  # @return [Client::Configuration]
  # @yield [config] Configure the Client client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#129
  def configure; end

  # Copies a set of log entries from a log bucket to a Cloud Storage bucket.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::CopyLogEntriesRequest.new
  #
  #   # Call the copy_log_entries method.
  #   result = client.copy_log_entries request
  #
  #   # The returned object is of type Gapic::Operation. You can use this
  #   # object to check the status of an operation, cancel it, or wait
  #   # for results. Here is how to block until completion:
  #   result.wait_until_done! timeout: 60
  #   if result.response?
  #   p result.response
  #   else
  #   puts "Error!"
  #   end
  # @overload copy_log_entries
  # @overload copy_log_entries
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::Operation]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::Operation]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#2869
  def copy_log_entries(request, options = T.unsafe(nil)); end

  # Creates a log bucket that can be used to store log entries. After a bucket
  # has been created, the bucket's location cannot be changed.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::CreateBucketRequest.new
  #
  #   # Call the create_bucket method.
  #   result = client.create_bucket request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::LogBucket.
  #   p result
  # @overload create_bucket
  # @overload create_bucket
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::LogBucket]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::LogBucket]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#464
  def create_bucket(request, options = T.unsafe(nil)); end

  # Creates a new exclusion in the _Default sink in a specified parent
  # resource. Only log entries belonging to that resource can be excluded. You
  # can have up to 10 exclusions in a resource.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::CreateExclusionRequest.new
  #
  #   # Call the create_exclusion method.
  #   result = client.create_exclusion request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::LogExclusion.
  #   p result
  # @overload create_exclusion
  # @overload create_exclusion
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::LogExclusion]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::LogExclusion]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#2102
  def create_exclusion(request, options = T.unsafe(nil)); end

  # Creates a sink that exports specified log entries to a destination. The
  # export of newly-ingested log entries begins immediately, unless the sink's
  # `writer_identity` is not permitted to write to the destination. A sink can
  # export log entries only from the resource owning the sink.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::CreateSinkRequest.new
  #
  #   # Call the create_sink method.
  #   result = client.create_sink request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::LogSink.
  #   p result
  # @overload create_sink
  # @overload create_sink
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::LogSink]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::LogSink]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#1575
  def create_sink(request, options = T.unsafe(nil)); end

  # Creates a view over log entries in a log bucket. A bucket may contain a
  # maximum of 30 views.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::CreateViewRequest.new
  #
  #   # Call the create_view method.
  #   result = client.create_view request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::LogView.
  #   p result
  # @overload create_view
  # @overload create_view
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::LogView]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::LogView]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#1062
  def create_view(request, options = T.unsafe(nil)); end

  # Deletes a log bucket.
  #
  # Changes the bucket's `lifecycle_state` to the `DELETE_REQUESTED` state.
  # After 7 days, the bucket will be purged and all log entries in the bucket
  # will be permanently deleted.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::DeleteBucketRequest.new
  #
  #   # Call the delete_bucket method.
  #   result = client.delete_bucket request
  #
  #   # The returned object is of type Google::Protobuf::Empty.
  #   p result
  # @overload delete_bucket
  # @overload delete_bucket
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Protobuf::Empty]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Protobuf::Empty]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#676
  def delete_bucket(request, options = T.unsafe(nil)); end

  # Deletes an exclusion in the _Default sink.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::DeleteExclusionRequest.new
  #
  #   # Call the delete_exclusion method.
  #   result = client.delete_exclusion request
  #
  #   # The returned object is of type Google::Protobuf::Empty.
  #   p result
  # @overload delete_exclusion
  # @overload delete_exclusion
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Protobuf::Empty]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Protobuf::Empty]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#2302
  def delete_exclusion(request, options = T.unsafe(nil)); end

  # Deletes a sink. If the sink has a unique `writer_identity`, then that
  # service account is also deleted.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::DeleteSinkRequest.new
  #
  #   # Call the delete_sink method.
  #   result = client.delete_sink request
  #
  #   # The returned object is of type Google::Protobuf::Empty.
  #   p result
  # @overload delete_sink
  # @overload delete_sink
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Protobuf::Empty]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Protobuf::Empty]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#1802
  def delete_sink(request, options = T.unsafe(nil)); end

  # Deletes a view on a log bucket.
  # If an `UNAVAILABLE` error is returned, this indicates that system is not in
  # a state where it can delete the view. If this occurs, please try again in a
  # few minutes.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::DeleteViewRequest.new
  #
  #   # Call the delete_view method.
  #   result = client.delete_view request
  #
  #   # The returned object is of type Google::Protobuf::Empty.
  #   p result
  # @overload delete_view
  # @overload delete_view
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Protobuf::Empty]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Protobuf::Empty]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#1262
  def delete_view(request, options = T.unsafe(nil)); end

  # Gets a log bucket.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::GetBucketRequest.new
  #
  #   # Call the get_bucket method.
  #   result = client.get_bucket request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::LogBucket.
  #   p result
  # @overload get_bucket
  # @overload get_bucket
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::LogBucket]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::LogBucket]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#364
  def get_bucket(request, options = T.unsafe(nil)); end

  # Gets the Logging CMEK settings for the given resource.
  #
  # Note: CMEK for the Log Router can be configured for Google Cloud projects,
  # folders, organizations and billing accounts. Once configured for an
  # organization, it applies to all projects and folders in the Google Cloud
  # organization.
  #
  # See [Enabling CMEK for Log
  # Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
  # for more information.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::GetCmekSettingsRequest.new
  #
  #   # Call the get_cmek_settings method.
  #   result = client.get_cmek_settings request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::CmekSettings.
  #   p result
  # @overload get_cmek_settings
  # @overload get_cmek_settings
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::CmekSettings]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::CmekSettings]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#2410
  def get_cmek_settings(request, options = T.unsafe(nil)); end

  # Gets the description of an exclusion in the _Default sink.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::GetExclusionRequest.new
  #
  #   # Call the get_exclusion method.
  #   result = client.get_exclusion request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::LogExclusion.
  #   p result
  # @overload get_exclusion
  # @overload get_exclusion
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::LogExclusion]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::LogExclusion]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#2002
  def get_exclusion(request, options = T.unsafe(nil)); end

  # Gets the Log Router settings for the given resource.
  #
  # Note: Settings for the Log Router can be get for Google Cloud projects,
  # folders, organizations and billing accounts. Currently it can only be
  # configured for organizations. Once configured for an organization, it
  # applies to all projects and folders in the Google Cloud organization.
  #
  # See [Enabling CMEK for Log
  # Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
  # for more information.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::GetSettingsRequest.new
  #
  #   # Call the get_settings method.
  #   result = client.get_settings request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::Settings.
  #   p result
  # @overload get_settings
  # @overload get_settings
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::Settings]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::Settings]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#2644
  def get_settings(request, options = T.unsafe(nil)); end

  # Gets a sink.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::GetSinkRequest.new
  #
  #   # Call the get_sink method.
  #   result = client.get_sink request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::LogSink.
  #   p result
  # @overload get_sink
  # @overload get_sink
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::LogSink]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::LogSink]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#1462
  def get_sink(request, options = T.unsafe(nil)); end

  # Gets a view on a log bucket..
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::GetViewRequest.new
  #
  #   # Call the get_view method.
  #   result = client.get_view request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::LogView.
  #   p result
  # @overload get_view
  # @overload get_view
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::LogView]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::LogView]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#966
  def get_view(request, options = T.unsafe(nil)); end

  # Lists log buckets.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::ListBucketsRequest.new
  #
  #   # Call the list_buckets method.
  #   result = client.list_buckets request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can
  #   # iterate over all elements by calling #each, and the enumerable
  #   # will lazily make API calls to fetch subsequent pages. Other
  #   # methods are also available for managing paging directly.
  #   result.each do |response|
  #   # Each element is of type ::Google::Cloud::Logging::V2::LogBucket.
  #   p response
  #   end
  # @overload list_buckets
  # @overload list_buckets
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::PagedEnumerable<::Google::Cloud::Logging::V2::LogBucket>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Logging::V2::LogBucket>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#269
  def list_buckets(request, options = T.unsafe(nil)); end

  # Lists all the exclusions on the _Default sink in a parent resource.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::ListExclusionsRequest.new
  #
  #   # Call the list_exclusions method.
  #   result = client.list_exclusions request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can
  #   # iterate over all elements by calling #each, and the enumerable
  #   # will lazily make API calls to fetch subsequent pages. Other
  #   # methods are also available for managing paging directly.
  #   result.each do |response|
  #   # Each element is of type ::Google::Cloud::Logging::V2::LogExclusion.
  #   p response
  #   end
  # @overload list_exclusions
  # @overload list_exclusions
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::PagedEnumerable<::Google::Cloud::Logging::V2::LogExclusion>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Logging::V2::LogExclusion>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#1907
  def list_exclusions(request, options = T.unsafe(nil)); end

  # Lists sinks.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::ListSinksRequest.new
  #
  #   # Call the list_sinks method.
  #   result = client.list_sinks request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can
  #   # iterate over all elements by calling #each, and the enumerable
  #   # will lazily make API calls to fetch subsequent pages. Other
  #   # methods are also available for managing paging directly.
  #   result.each do |response|
  #   # Each element is of type ::Google::Cloud::Logging::V2::LogSink.
  #   p response
  #   end
  # @overload list_sinks
  # @overload list_sinks
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::PagedEnumerable<::Google::Cloud::Logging::V2::LogSink>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Logging::V2::LogSink>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#1367
  def list_sinks(request, options = T.unsafe(nil)); end

  # Lists views on a log bucket.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::ListViewsRequest.new
  #
  #   # Call the list_views method.
  #   result = client.list_views request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can
  #   # iterate over all elements by calling #each, and the enumerable
  #   # will lazily make API calls to fetch subsequent pages. Other
  #   # methods are also available for managing paging directly.
  #   result.each do |response|
  #   # Each element is of type ::Google::Cloud::Logging::V2::LogView.
  #   p response
  #   end
  # @overload list_views
  # @overload list_views
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::PagedEnumerable<::Google::Cloud::Logging::V2::LogView>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Logging::V2::LogView>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#874
  def list_views(request, options = T.unsafe(nil)); end

  # Get the associated client for long-running operations.
  #
  # @return [::Google::Cloud::Logging::V2::ConfigService::Operations]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#197
  def operations_client; end

  # Undeletes a log bucket. A bucket that has been deleted can be undeleted
  # within the grace period of 7 days.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::UndeleteBucketRequest.new
  #
  #   # Call the undelete_bucket method.
  #   result = client.undelete_bucket request
  #
  #   # The returned object is of type Google::Protobuf::Empty.
  #   p result
  # @overload undelete_bucket
  # @overload undelete_bucket
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Protobuf::Empty]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Protobuf::Empty]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#771
  def undelete_bucket(request, options = T.unsafe(nil)); end

  # Updates a log bucket. This method replaces the following fields in the
  # existing bucket with values from the new bucket: `retention_period`
  #
  # If the retention period is decreased and the bucket is locked,
  # `FAILED_PRECONDITION` will be returned.
  #
  # If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
  # `FAILED_PRECONDITION` will be returned.
  #
  # After a bucket has been created, the bucket's location cannot be changed.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::UpdateBucketRequest.new
  #
  #   # Call the update_bucket method.
  #   result = client.update_bucket request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::LogBucket.
  #   p result
  # @overload update_bucket
  # @overload update_bucket
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::LogBucket]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::LogBucket]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#578
  def update_bucket(request, options = T.unsafe(nil)); end

  # Updates the Log Router CMEK settings for the given resource.
  #
  # Note: CMEK for the Log Router can currently only be configured for Google
  # Cloud organizations. Once configured, it applies to all projects and
  # folders in the Google Cloud organization.
  #
  # {::Google::Cloud::Logging::V2::ConfigService::Client#update_cmek_settings UpdateCmekSettings}
  # will fail if 1) `kms_key_name` is invalid, or 2) the associated service
  # account does not have the required
  # `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
  # 3) access to the key is disabled.
  #
  # See [Enabling CMEK for Log
  # Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
  # for more information.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::UpdateCmekSettingsRequest.new
  #
  #   # Call the update_cmek_settings method.
  #   result = client.update_cmek_settings request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::CmekSettings.
  #   p result
  # @overload update_cmek_settings
  # @overload update_cmek_settings
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::CmekSettings]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::CmekSettings]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#2536
  def update_cmek_settings(request, options = T.unsafe(nil)); end

  # Changes one or more properties of an existing exclusion in the _Default
  # sink.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::UpdateExclusionRequest.new
  #
  #   # Call the update_exclusion method.
  #   result = client.update_exclusion request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::LogExclusion.
  #   p result
  # @overload update_exclusion
  # @overload update_exclusion
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::LogExclusion]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::LogExclusion]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#2208
  def update_exclusion(request, options = T.unsafe(nil)); end

  # Updates the Log Router settings for the given resource.
  #
  # Note: Settings for the Log Router can currently only be configured for
  # Google Cloud organizations. Once configured, it applies to all projects and
  # folders in the Google Cloud organization.
  #
  # {::Google::Cloud::Logging::V2::ConfigService::Client#update_settings UpdateSettings}
  # will fail if 1) `kms_key_name` is invalid, or 2) the associated service
  # account does not have the required
  # `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
  # 3) access to the key is disabled. 4) `location_id` is not supported by
  # Logging. 5) `location_id` violate OrgPolicy.
  #
  # See [Enabling CMEK for Log
  # Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
  # for more information.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::UpdateSettingsRequest.new
  #
  #   # Call the update_settings method.
  #   result = client.update_settings request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::Settings.
  #   p result
  # @overload update_settings
  # @overload update_settings
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::Settings]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::Settings]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#2768
  def update_settings(request, options = T.unsafe(nil)); end

  # Updates a sink. This method replaces the following fields in the existing
  # sink with values from the new sink: `destination`, and `filter`.
  #
  # The updated sink might also have a new `writer_identity`; see the
  # `unique_writer_identity` field.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::UpdateSinkRequest.new
  #
  #   # Call the update_sink method.
  #   result = client.update_sink request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::LogSink.
  #   p result
  # @overload update_sink
  # @overload update_sink
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::LogSink]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::LogSink]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#1706
  def update_sink(request, options = T.unsafe(nil)); end

  # Updates a view on a log bucket. This method replaces the following fields
  # in the existing view with values from the new view: `filter`.
  # If an `UNAVAILABLE` error is returned, this indicates that system is not in
  # a state where it can update the view. If this occurs, please try again in a
  # few minutes.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::ConfigService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::UpdateViewRequest.new
  #
  #   # Call the update_view method.
  #   result = client.update_view request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::LogView.
  #   p result
  # @overload update_view
  # @overload update_view
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::LogView]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::LogView]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#1168
  def update_view(request, options = T.unsafe(nil)); end

  class << self
    # Configure the ConfigService Client class.
    #
    # See {::Google::Cloud::Logging::V2::ConfigService::Client::Configuration}
    # for a description of the configuration fields.
    #
    # @example
    #
    #   # Modify the configuration for all ConfigService clients
    #   ::Google::Cloud::Logging::V2::ConfigService::Client.configure do |config|
    #   config.timeout = 10.0
    #   end
    # @return [Client::Configuration]
    # @yield [config] Configure the Client client.
    # @yieldparam config [Client::Configuration]
    #
    # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#56
    def configure; end
  end
end

# Configuration class for the ConfigService API.
#
# This class represents the configuration for ConfigService,
# providing control over timeouts, retry behavior, logging, transport
# parameters, and other low-level controls. Certain parameters can also be
# applied individually to specific RPCs. See
# {::Google::Cloud::Logging::V2::ConfigService::Client::Configuration::Rpcs}
# for a list of RPCs that can be configured independently.
#
# Configuration can be applied globally to all clients, or to a single client
# on construction.
#
# @example
#
#   # Modify the global config, setting the timeout for
#   # list_buckets to 20 seconds,
#   # and all remaining timeouts to 10 seconds.
#   ::Google::Cloud::Logging::V2::ConfigService::Client.configure do |config|
#   config.timeout = 10.0
#   config.rpcs.list_buckets.timeout = 20.0
#   end
#
#   # Apply the above configuration only to a new client.
#   client = ::Google::Cloud::Logging::V2::ConfigService::Client.new do |config|
#   config.timeout = 10.0
#   config.rpcs.list_buckets.timeout = 20.0
#   end
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#2982
class Google::Cloud::Logging::V2::ConfigService::Client::Configuration
  extend ::Gapic::Config

  # @private
  # @return [Configuration] a new instance of Configuration
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Logging::V2::ConfigService::Client::Configuration] the object that the method was called on
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3002
  def initialize(parent_config = T.unsafe(nil)); end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def channel_args; end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def channel_args=(new_value); end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def credentials; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def credentials=(new_value); end

  # The hostname or hostname:port of the service endpoint.
  # Defaults to `"logging.googleapis.com"`.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def endpoint; end

  # The hostname or hostname:port of the service endpoint.
  # Defaults to `"logging.googleapis.com"`.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def endpoint=(new_value); end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def interceptors; end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def interceptors=(new_value); end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def lib_name; end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def lib_name=(new_value); end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def lib_version; end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def lib_version=(new_value); end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def metadata; end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def metadata=(new_value); end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def quota_project; end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def quota_project=(new_value); end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def retry_policy; end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def retry_policy=(new_value); end

  # Configurations for individual RPCs
  #
  # @return [Rpcs]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3012
  def rpcs; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def scope; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def scope=(new_value); end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def timeout; end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def timeout=(new_value); end
end

# Configuration RPC class for the ConfigService API.
#
# Includes fields providing the configuration for each RPC in this service.
# Each configuration object is of type `Gapic::Config::Method` and includes
# the following configuration fields:
#
#  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
#  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
#  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
#     include the following keys:
#      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
#      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
#      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
#      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
#         trigger a retry.
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3037
class Google::Cloud::Logging::V2::ConfigService::Client::Configuration::Rpcs
  # @private
  # @return [Rpcs] a new instance of Rpcs
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Logging::V2::ConfigService::Client::Configuration::Rpcs] the object that the method was called on
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3170
  def initialize(parent_rpcs = T.unsafe(nil)); end

  # RPC-specific configuration for `copy_log_entries`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3167
  def copy_log_entries; end

  # RPC-specific configuration for `create_bucket`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3052
  def create_bucket; end

  # RPC-specific configuration for `create_exclusion`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3132
  def create_exclusion; end

  # RPC-specific configuration for `create_sink`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3107
  def create_sink; end

  # RPC-specific configuration for `create_view`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3082
  def create_view; end

  # RPC-specific configuration for `delete_bucket`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3062
  def delete_bucket; end

  # RPC-specific configuration for `delete_exclusion`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3142
  def delete_exclusion; end

  # RPC-specific configuration for `delete_sink`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3117
  def delete_sink; end

  # RPC-specific configuration for `delete_view`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3092
  def delete_view; end

  # RPC-specific configuration for `get_bucket`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3047
  def get_bucket; end

  # RPC-specific configuration for `get_cmek_settings`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3147
  def get_cmek_settings; end

  # RPC-specific configuration for `get_exclusion`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3127
  def get_exclusion; end

  # RPC-specific configuration for `get_settings`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3157
  def get_settings; end

  # RPC-specific configuration for `get_sink`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3102
  def get_sink; end

  # RPC-specific configuration for `get_view`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3077
  def get_view; end

  # RPC-specific configuration for `list_buckets`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3042
  def list_buckets; end

  # RPC-specific configuration for `list_exclusions`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3122
  def list_exclusions; end

  # RPC-specific configuration for `list_sinks`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3097
  def list_sinks; end

  # RPC-specific configuration for `list_views`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3072
  def list_views; end

  # RPC-specific configuration for `undelete_bucket`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3067
  def undelete_bucket; end

  # RPC-specific configuration for `update_bucket`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3057
  def update_bucket; end

  # RPC-specific configuration for `update_cmek_settings`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3152
  def update_cmek_settings; end

  # RPC-specific configuration for `update_exclusion`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3137
  def update_exclusion; end

  # RPC-specific configuration for `update_settings`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3162
  def update_settings; end

  # RPC-specific configuration for `update_sink`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3112
  def update_sink; end

  # RPC-specific configuration for `update_view`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/client.rb#3087
  def update_view; end
end

# Credentials for the ConfigService API.
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/credentials.rb#27
class Google::Cloud::Logging::V2::ConfigService::Credentials < ::Google::Auth::Credentials; end

# Service that implements Longrunning Operations API.
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#28
class Google::Cloud::Logging::V2::ConfigService::Operations
  # Create a new Operations client object.
  #
  # @return [Operations] a new instance of Operations
  # @yield [config] Configure the Client client.
  # @yieldparam config [Operations::Configuration]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#69
  def initialize; end

  # Starts asynchronous cancellation on a long-running operation.  The server
  # makes a best effort to cancel the operation, but success is not
  # guaranteed.  If the server doesn't support this method, it returns
  # `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
  # Operations.GetOperation or
  # other methods to check whether the cancellation succeeded or whether the
  # operation completed despite cancellation. On successful cancellation,
  # the operation is not deleted; instead, it becomes an operation with
  # an {::Google::Longrunning::Operation#error Operation.error} value with a {::Google::Rpc::Status#code google.rpc.Status.code} of 1,
  # corresponding to `Code.CANCELLED`.
  #
  # @example Basic example
  #   require "google/longrunning"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Longrunning::Operations::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Longrunning::CancelOperationRequest.new
  #
  #   # Call the cancel_operation method.
  #   result = client.cancel_operation request
  #
  #   # The returned object is of type Google::Protobuf::Empty.
  #   p result
  # @overload cancel_operation
  # @overload cancel_operation
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Protobuf::Empty]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Protobuf::Empty]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#449
  def cancel_operation(request, options = T.unsafe(nil)); end

  # Configure the ConfigService Operations instance.
  #
  # The configuration is set to the derived mode, meaning that values can be changed,
  # but structural changes (adding new fields, etc.) are not allowed. Structural changes
  # should be made on {Operations.configure}.
  #
  # @return [Operations::Configuration]
  # @yield [config] Configure the Operations client.
  # @yieldparam config [Operations::Configuration]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#58
  def configure; end

  # Deletes a long-running operation. This method indicates that the client is
  # no longer interested in the operation result. It does not cancel the
  # operation. If the server doesn't support this method, it returns
  # `google.rpc.Code.UNIMPLEMENTED`.
  #
  # @example Basic example
  #   require "google/longrunning"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Longrunning::Operations::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Longrunning::DeleteOperationRequest.new
  #
  #   # Call the delete_operation method.
  #   result = client.delete_operation request
  #
  #   # The returned object is of type Google::Protobuf::Empty.
  #   p result
  # @overload delete_operation
  # @overload delete_operation
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Protobuf::Empty]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Protobuf::Empty]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#355
  def delete_operation(request, options = T.unsafe(nil)); end

  # Gets the latest state of a long-running operation.  Clients can use this
  # method to poll the operation result at intervals as recommended by the API
  # service.
  #
  # @example Basic example
  #   require "google/longrunning"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Longrunning::Operations::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Longrunning::GetOperationRequest.new
  #
  #   # Call the get_operation method.
  #   result = client.get_operation request
  #
  #   # The returned object is of type Gapic::Operation. You can use this
  #   # object to check the status of an operation, cancel it, or wait
  #   # for results. Here is how to block until completion:
  #   result.wait_until_done! timeout: 60
  #   if result.response?
  #   p result.response
  #   else
  #   puts "Error!"
  #   end
  # @overload get_operation
  # @overload get_operation
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::Operation]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::Operation]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#266
  def get_operation(request, options = T.unsafe(nil)); end

  # Lists operations that match the specified filter in the request. If the
  # server doesn't support this method, it returns `UNIMPLEMENTED`.
  #
  # NOTE: the `name` binding allows API services to override the binding
  # to use different resource name schemes, such as `users/*/operations`. To
  # override the binding, API services can add a binding such as
  # `"/v1/{name=users/*}/operations"` to their service configuration.
  # For backwards compatibility, the default name includes the operations
  # collection id, however overriding users must ensure the name binding
  # is the parent resource, without the operations collection id.
  #
  # @example Basic example
  #   require "google/longrunning"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Longrunning::Operations::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Longrunning::ListOperationsRequest.new
  #
  #   # Call the list_operations method.
  #   result = client.list_operations request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can
  #   # iterate over all elements by calling #each, and the enumerable
  #   # will lazily make API calls to fetch subsequent pages. Other
  #   # methods are also available for managing paging directly.
  #   result.each do |response|
  #   # Each element is of type ::Google::Longrunning::Operation.
  #   p response
  #   end
  # @overload list_operations
  # @overload list_operations
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::PagedEnumerable<::Gapic::Operation>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::PagedEnumerable<::Gapic::Operation>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#170
  def list_operations(request, options = T.unsafe(nil)); end

  # @private
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#30
  def operations_stub; end

  # Waits until the specified long-running operation is done or reaches at most
  # a specified timeout, returning the latest state.  If the operation is
  # already done, the latest state is immediately returned.  If the timeout
  # specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
  # timeout is used.  If the server does not support this method, it returns
  # `google.rpc.Code.UNIMPLEMENTED`.
  # Note that this method is on a best-effort basis.  It may return the latest
  # state before the specified timeout (including immediately), meaning even an
  # immediate response is no guarantee that the operation is done.
  #
  # @example Basic example
  #   require "google/longrunning"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Longrunning::Operations::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Longrunning::WaitOperationRequest.new
  #
  #   # Call the wait_operation method.
  #   result = client.wait_operation request
  #
  #   # The returned object is of type Gapic::Operation. You can use this
  #   # object to check the status of an operation, cancel it, or wait
  #   # for results. Here is how to block until completion:
  #   result.wait_until_done! timeout: 60
  #   if result.response?
  #   p result.response
  #   else
  #   puts "Error!"
  #   end
  # @overload wait_operation
  # @overload wait_operation
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::Operation]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::Operation]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#553
  def wait_operation(request, options = T.unsafe(nil)); end

  class << self
    # Configuration for the ConfigService Operations API.
    #
    # @return [Operations::Configuration]
    # @yield [config] Configure the Operations client.
    # @yieldparam config [Operations::Configuration]
    #
    # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#40
    def configure; end
  end
end

# Configuration class for the Operations API.
#
# This class represents the configuration for Operations,
# providing control over timeouts, retry behavior, logging, transport
# parameters, and other low-level controls. Certain parameters can also be
# applied individually to specific RPCs. See
# {::Google::Longrunning::Operations::Client::Configuration::Rpcs}
# for a list of RPCs that can be configured independently.
#
# Configuration can be applied globally to all clients, or to a single client
# on construction.
#
# @example
#
#   # Modify the global config, setting the timeout for
#   # list_operations to 20 seconds,
#   # and all remaining timeouts to 10 seconds.
#   ::Google::Longrunning::Operations::Client.configure do |config|
#   config.timeout = 10.0
#   config.rpcs.list_operations.timeout = 20.0
#   end
#
#   # Apply the above configuration only to a new client.
#   client = ::Google::Longrunning::Operations::Client.new do |config|
#   config.timeout = 10.0
#   config.rpcs.list_operations.timeout = 20.0
#   end
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#666
class Google::Cloud::Logging::V2::ConfigService::Operations::Configuration
  extend ::Gapic::Config

  # @private
  # @return [Configuration] a new instance of Configuration
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Logging::V2::ConfigService::Operations::Configuration] the object that the method was called on
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#686
  def initialize(parent_config = T.unsafe(nil)); end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def channel_args; end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def channel_args=(new_value); end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def credentials; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def credentials=(new_value); end

  # The hostname or hostname:port of the service endpoint.
  # Defaults to `"logging.googleapis.com"`.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def endpoint; end

  # The hostname or hostname:port of the service endpoint.
  # Defaults to `"logging.googleapis.com"`.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def endpoint=(new_value); end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def interceptors; end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def interceptors=(new_value); end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def lib_name; end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def lib_name=(new_value); end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def lib_version; end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def lib_version=(new_value); end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def metadata; end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def metadata=(new_value); end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def quota_project; end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def quota_project=(new_value); end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def retry_policy; end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def retry_policy=(new_value); end

  # Configurations for individual RPCs
  #
  # @return [Rpcs]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#696
  def rpcs; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def scope; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def scope=(new_value); end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def timeout; end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def timeout=(new_value); end
end

# Configuration RPC class for the Operations API.
#
# Includes fields providing the configuration for each RPC in this service.
# Each configuration object is of type `Gapic::Config::Method` and includes
# the following configuration fields:
#
#  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
#  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
#  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
#     include the following keys:
#      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
#      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
#      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
#      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
#         trigger a retry.
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#721
class Google::Cloud::Logging::V2::ConfigService::Operations::Configuration::Rpcs
  # @private
  # @return [Rpcs] a new instance of Rpcs
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Logging::V2::ConfigService::Operations::Configuration::Rpcs] the object that the method was called on
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#749
  def initialize(parent_rpcs = T.unsafe(nil)); end

  # RPC-specific configuration for `cancel_operation`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#741
  def cancel_operation; end

  # RPC-specific configuration for `delete_operation`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#736
  def delete_operation; end

  # RPC-specific configuration for `get_operation`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#731
  def get_operation; end

  # RPC-specific configuration for `list_operations`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#726
  def list_operations; end

  # RPC-specific configuration for `wait_operation`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/operations.rb#746
  def wait_operation; end
end

# Path helper methods for the ConfigService API.
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/paths.rb#26
module Google::Cloud::Logging::V2::ConfigService::Paths
  extend ::Google::Cloud::Logging::V2::ConfigService::Paths

  # Create a fully-qualified BillingAccountLocation resource string.
  #
  # The resource will be in the following format:
  #
  # `billingAccounts/{billing_account}/locations/{location}`
  #
  # @param billing_account [String]
  # @param location [String]
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/paths.rb#52
  def billing_account_location_path(billing_account:, location:); end

  # Create a fully-qualified BillingAccount resource string.
  #
  # The resource will be in the following format:
  #
  # `billingAccounts/{billing_account}`
  #
  # @param billing_account [String]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/paths.rb#37
  def billing_account_path(billing_account:); end

  # Create a fully-qualified CmekSettings resource string.
  #
  # @overload cmek_settings_path
  # @overload cmek_settings_path
  # @overload cmek_settings_path
  # @overload cmek_settings_path
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/paths.rb#90
  def cmek_settings_path(**args); end

  # Create a fully-qualified FolderLocation resource string.
  #
  # The resource will be in the following format:
  #
  # `folders/{folder}/locations/{location}`
  #
  # @param folder [String]
  # @param location [String]
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/paths.rb#136
  def folder_location_path(folder:, location:); end

  # Create a fully-qualified Folder resource string.
  #
  # The resource will be in the following format:
  #
  # `folders/{folder}`
  #
  # @param folder [String]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/paths.rb#121
  def folder_path(folder:); end

  # Create a fully-qualified Location resource string.
  #
  # The resource will be in the following format:
  #
  # `projects/{project}/locations/{location}`
  #
  # @param project [String]
  # @param location [String]
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/paths.rb#153
  def location_path(project:, location:); end

  # Create a fully-qualified LogBucket resource string.
  #
  # @overload log_bucket_path
  # @overload log_bucket_path
  # @overload log_bucket_path
  # @overload log_bucket_path
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/paths.rb#199
  def log_bucket_path(**args); end

  # Create a fully-qualified LogExclusion resource string.
  #
  # @overload log_exclusion_path
  # @overload log_exclusion_path
  # @overload log_exclusion_path
  # @overload log_exclusion_path
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/paths.rb#268
  def log_exclusion_path(**args); end

  # Create a fully-qualified LogSink resource string.
  #
  # @overload log_sink_path
  # @overload log_sink_path
  # @overload log_sink_path
  # @overload log_sink_path
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/paths.rb#333
  def log_sink_path(**args); end

  # Create a fully-qualified LogView resource string.
  #
  # @overload log_view_path
  # @overload log_view_path
  # @overload log_view_path
  # @overload log_view_path
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/paths.rb#406
  def log_view_path(**args); end

  # Create a fully-qualified OrganizationLocation resource string.
  #
  # The resource will be in the following format:
  #
  # `organizations/{organization}/locations/{location}`
  #
  # @param organization [String]
  # @param location [String]
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/paths.rb#468
  def organization_location_path(organization:, location:); end

  # Create a fully-qualified Organization resource string.
  #
  # The resource will be in the following format:
  #
  # `organizations/{organization}`
  #
  # @param organization [String]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/paths.rb#453
  def organization_path(organization:); end

  # Create a fully-qualified Project resource string.
  #
  # The resource will be in the following format:
  #
  # `projects/{project}`
  #
  # @param project [String]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/paths.rb#484
  def project_path(project:); end

  # Create a fully-qualified Settings resource string.
  #
  # @overload settings_path
  # @overload settings_path
  # @overload settings_path
  # @overload settings_path
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/config_service/paths.rb#520
  def settings_path(**args); end
end

class Google::Cloud::Logging::V2::CopyLogEntriesMetadata
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::CopyLogEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::CopyLogEntriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::CreateBucketRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::CreateExclusionRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::CreateLogMetricRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::CreateSinkRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::CreateViewRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::DeleteBucketRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::DeleteExclusionRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::DeleteLogMetricRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::DeleteLogRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::DeleteSinkRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::DeleteViewRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::GetBucketRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::GetCmekSettingsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::GetExclusionRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::GetLogMetricRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::GetSettingsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::GetSinkRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::GetViewRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module Google::Cloud::Logging::V2::LifecycleState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_config_pb.rb#277
Google::Cloud::Logging::V2::LifecycleState::ACTIVE = T.let(T.unsafe(nil), Integer)

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_config_pb.rb#277
Google::Cloud::Logging::V2::LifecycleState::DELETE_REQUESTED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_config_pb.rb#277
Google::Cloud::Logging::V2::LifecycleState::LIFECYCLE_STATE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Google::Cloud::Logging::V2::ListBucketsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::ListBucketsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::ListExclusionsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::ListExclusionsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::ListLogEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::ListLogEntriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::ListLogMetricsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::ListLogMetricsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::ListLogsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::ListLogsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::ListMonitoredResourceDescriptorsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::ListMonitoredResourceDescriptorsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::ListSinksRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::ListSinksResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::ListViewsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::ListViewsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::LogBucket
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::LogEntry
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::LogEntryOperation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::LogEntrySourceLocation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::LogExclusion
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::LogMetric
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module Google::Cloud::Logging::V2::LogMetric::ApiVersion
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_metrics_pb.rb#65
Google::Cloud::Logging::V2::LogMetric::ApiVersion::V1 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_metrics_pb.rb#65
Google::Cloud::Logging::V2::LogMetric::ApiVersion::V2 = T.let(T.unsafe(nil), Integer)

class Google::Cloud::Logging::V2::LogSink
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module Google::Cloud::Logging::V2::LogSink::VersionFormat
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_config_pb.rb#240
Google::Cloud::Logging::V2::LogSink::VersionFormat::V1 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_config_pb.rb#240
Google::Cloud::Logging::V2::LogSink::VersionFormat::V2 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_config_pb.rb#240
Google::Cloud::Logging::V2::LogSink::VersionFormat::VERSION_FORMAT_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Google::Cloud::Logging::V2::LogSplit
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::LogView
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

# Service for ingesting and querying logs.
#
# To load this service and instantiate a client:
#
#     require "google/cloud/logging/v2/logging_service"
#     client = ::Google::Cloud::Logging::V2::LoggingService::Client.new
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/credentials.rb#25
module Google::Cloud::Logging::V2::LoggingService; end

# Client for the LoggingService service.
#
# Service for ingesting and querying logs.
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#32
class Google::Cloud::Logging::V2::LoggingService::Client
  include ::Google::Cloud::Logging::V2::LoggingService::Paths

  # Create a new LoggingService client object.
  #
  # @example
  #
  #   # Create a client using the default configuration
  #   client = ::Google::Cloud::Logging::V2::LoggingService::Client.new
  #
  #   # Create a client using a custom configuration
  #   client = ::Google::Cloud::Logging::V2::LoggingService::Client.new do |config|
  #   config.timeout = 10.0
  #   end
  # @return [Client] a new instance of Client
  # @yield [config] Configure the LoggingService client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#139
  def initialize; end

  # Configure the LoggingService Client instance.
  #
  # The configuration is set to the derived mode, meaning that values can be changed,
  # but structural changes (adding new fields, etc.) are not allowed. Structural changes
  # should be made on {Client.configure}.
  #
  # See {::Google::Cloud::Logging::V2::LoggingService::Client::Configuration}
  # for a description of the configuration fields.
  #
  # @return [Client::Configuration]
  # @yield [config] Configure the Client client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#118
  def configure; end

  # Deletes all the log entries in a log for the _Default Log Bucket. The log
  # reappears if it receives new entries. Log entries written shortly before
  # the delete operation might not be deleted. Entries received after the
  # delete operation with a timestamp before the operation will be deleted.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::LoggingService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::DeleteLogRequest.new
  #
  #   # Call the delete_log method.
  #   result = client.delete_log request
  #
  #   # The returned object is of type Google::Protobuf::Empty.
  #   p result
  # @overload delete_log
  # @overload delete_log
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Protobuf::Empty]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Protobuf::Empty]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#236
  def delete_log(request, options = T.unsafe(nil)); end

  # Lists log entries.  Use this method to retrieve log entries that originated
  # from a project/folder/organization/billing account.  For ways to export log
  # entries, see [Exporting
  # Logs](https://cloud.google.com/logging/docs/export).
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::LoggingService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::ListLogEntriesRequest.new
  #
  #   # Call the list_log_entries method.
  #   result = client.list_log_entries request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can
  #   # iterate over all elements by calling #each, and the enumerable
  #   # will lazily make API calls to fetch subsequent pages. Other
  #   # methods are also available for managing paging directly.
  #   result.each do |response|
  #   # Each element is of type ::Google::Cloud::Logging::V2::LogEntry.
  #   p response
  #   end
  # @overload list_log_entries
  # @overload list_log_entries
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::PagedEnumerable<::Google::Cloud::Logging::V2::LogEntry>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Logging::V2::LogEntry>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#518
  def list_log_entries(request, options = T.unsafe(nil)); end

  # Lists the logs in projects, organizations, folders, or billing accounts.
  # Only logs that have entries are listed.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::LoggingService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::ListLogsRequest.new
  #
  #   # Call the list_logs method.
  #   result = client.list_logs request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::ListLogsResponse.
  #   p result
  # @overload list_logs
  # @overload list_logs
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::ListLogsResponse]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::ListLogsResponse]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#716
  def list_logs(request, options = T.unsafe(nil)); end

  # Lists the descriptors for monitored resource types used by Logging.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::LoggingService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::ListMonitoredResourceDescriptorsRequest.new
  #
  #   # Call the list_monitored_resource_descriptors method.
  #   result = client.list_monitored_resource_descriptors request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can
  #   # iterate over all elements by calling #each, and the enumerable
  #   # will lazily make API calls to fetch subsequent pages. Other
  #   # methods are also available for managing paging directly.
  #   result.each do |response|
  #   # Each element is of type ::Google::Api::MonitoredResourceDescriptor.
  #   p response
  #   end
  # @overload list_monitored_resource_descriptors
  # @overload list_monitored_resource_descriptors
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::PagedEnumerable<::Google::Api::MonitoredResourceDescriptor>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::PagedEnumerable<::Google::Api::MonitoredResourceDescriptor>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#609
  def list_monitored_resource_descriptors(request, options = T.unsafe(nil)); end

  # @private
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#36
  def logging_service_stub; end

  # Streaming read of log entries as they are ingested. Until the stream is
  # terminated, it will continue reading logs.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::LoggingService::Client.new
  #
  #   # Create an input stream
  #   input = Gapic::StreamInput.new
  #
  #   # Call the tail_log_entries method to start streaming.
  #   output = client.tail_log_entries input
  #
  #   # Send requests on the stream. For each request, pass in keyword
  #   # arguments to set fields. Be sure to close the stream when done.
  #   input << Google::Cloud::Logging::V2::TailLogEntriesRequest.new
  #   input << Google::Cloud::Logging::V2::TailLogEntriesRequest.new
  #   input.close
  #
  #   # Handle streamed responses. These may be interleaved with inputs.
  #   # Each response is of type ::Google::Cloud::Logging::V2::TailLogEntriesResponse.
  #   output.each do |response|
  #   p response
  #   end
  # @param request [::Gapic::StreamInput, ::Enumerable<::Google::Cloud::Logging::V2::TailLogEntriesRequest, ::Hash>] An enumerable of {::Google::Cloud::Logging::V2::TailLogEntriesRequest} instances.
  # @param options [::Gapic::CallOptions, ::Hash] Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Enumerable<::Google::Cloud::Logging::V2::TailLogEntriesResponse>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Enumerable<::Google::Cloud::Logging::V2::TailLogEntriesResponse>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#798
  def tail_log_entries(request, options = T.unsafe(nil)); end

  # Writes log entries to Logging. This API method is the
  # only way to send log entries to Logging. This method
  # is used, directly or indirectly, by the Logging agent
  # (fluentd) and all logging libraries configured to use Logging.
  # A single request may contain log entries for a maximum of 1000
  # different resources (projects, organizations, billing accounts or
  # folders)
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::LoggingService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::WriteLogEntriesRequest.new
  #
  #   # Call the write_log_entries method.
  #   result = client.write_log_entries request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::WriteLogEntriesResponse.
  #   p result
  # @overload write_log_entries
  # @overload write_log_entries
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::WriteLogEntriesResponse]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::WriteLogEntriesResponse]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#392
  def write_log_entries(request, options = T.unsafe(nil)); end

  class << self
    # Configure the LoggingService Client class.
    #
    # See {::Google::Cloud::Logging::V2::LoggingService::Client::Configuration}
    # for a description of the configuration fields.
    #
    # @example
    #
    #   # Modify the configuration for all LoggingService clients
    #   ::Google::Cloud::Logging::V2::LoggingService::Client.configure do |config|
    #   config.timeout = 10.0
    #   end
    # @return [Client::Configuration]
    # @yield [config] Configure the Client client.
    # @yieldparam config [Client::Configuration]
    #
    # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#56
    def configure; end
  end
end

# Configuration class for the LoggingService API.
#
# This class represents the configuration for LoggingService,
# providing control over timeouts, retry behavior, logging, transport
# parameters, and other low-level controls. Certain parameters can also be
# applied individually to specific RPCs. See
# {::Google::Cloud::Logging::V2::LoggingService::Client::Configuration::Rpcs}
# for a list of RPCs that can be configured independently.
#
# Configuration can be applied globally to all clients, or to a single client
# on construction.
#
# @example
#
#   # Modify the global config, setting the timeout for
#   # delete_log to 20 seconds,
#   # and all remaining timeouts to 10 seconds.
#   ::Google::Cloud::Logging::V2::LoggingService::Client.configure do |config|
#   config.timeout = 10.0
#   config.rpcs.delete_log.timeout = 20.0
#   end
#
#   # Apply the above configuration only to a new client.
#   client = ::Google::Cloud::Logging::V2::LoggingService::Client.new do |config|
#   config.timeout = 10.0
#   config.rpcs.delete_log.timeout = 20.0
#   end
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#915
class Google::Cloud::Logging::V2::LoggingService::Client::Configuration
  extend ::Gapic::Config

  # @private
  # @return [Configuration] a new instance of Configuration
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Logging::V2::LoggingService::Client::Configuration] the object that the method was called on
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#935
  def initialize(parent_config = T.unsafe(nil)); end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def channel_args; end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def channel_args=(new_value); end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def credentials; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def credentials=(new_value); end

  # The hostname or hostname:port of the service endpoint.
  # Defaults to `"logging.googleapis.com"`.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def endpoint; end

  # The hostname or hostname:port of the service endpoint.
  # Defaults to `"logging.googleapis.com"`.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def endpoint=(new_value); end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def interceptors; end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def interceptors=(new_value); end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def lib_name; end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def lib_name=(new_value); end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def lib_version; end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def lib_version=(new_value); end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def metadata; end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def metadata=(new_value); end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def quota_project; end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def quota_project=(new_value); end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def retry_policy; end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def retry_policy=(new_value); end

  # Configurations for individual RPCs
  #
  # @return [Rpcs]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#945
  def rpcs; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def scope; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def scope=(new_value); end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def timeout; end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def timeout=(new_value); end
end

# Configuration RPC class for the LoggingService API.
#
# Includes fields providing the configuration for each RPC in this service.
# Each configuration object is of type `Gapic::Config::Method` and includes
# the following configuration fields:
#
#  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
#  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
#  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
#     include the following keys:
#      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
#      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
#      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
#      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
#         trigger a retry.
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#970
class Google::Cloud::Logging::V2::LoggingService::Client::Configuration::Rpcs
  # @private
  # @return [Rpcs] a new instance of Rpcs
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Logging::V2::LoggingService::Client::Configuration::Rpcs] the object that the method was called on
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#1003
  def initialize(parent_rpcs = T.unsafe(nil)); end

  # RPC-specific configuration for `delete_log`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#975
  def delete_log; end

  # RPC-specific configuration for `list_log_entries`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#985
  def list_log_entries; end

  # RPC-specific configuration for `list_logs`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#995
  def list_logs; end

  # RPC-specific configuration for `list_monitored_resource_descriptors`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#990
  def list_monitored_resource_descriptors; end

  # RPC-specific configuration for `tail_log_entries`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#1000
  def tail_log_entries; end

  # RPC-specific configuration for `write_log_entries`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/client.rb#980
  def write_log_entries; end
end

# Credentials for the LoggingService API.
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/credentials.rb#27
class Google::Cloud::Logging::V2::LoggingService::Credentials < ::Google::Auth::Credentials; end

# Path helper methods for the LoggingService API.
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/paths.rb#26
module Google::Cloud::Logging::V2::LoggingService::Paths
  extend ::Google::Cloud::Logging::V2::LoggingService::Paths

  # Create a fully-qualified BillingAccount resource string.
  #
  # The resource will be in the following format:
  #
  # `billingAccounts/{billing_account}`
  #
  # @param billing_account [String]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/paths.rb#37
  def billing_account_path(billing_account:); end

  # Create a fully-qualified Folder resource string.
  #
  # The resource will be in the following format:
  #
  # `folders/{folder}`
  #
  # @param folder [String]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/paths.rb#51
  def folder_path(folder:); end

  # Create a fully-qualified Log resource string.
  #
  # @overload log_path
  # @overload log_path
  # @overload log_path
  # @overload log_path
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/paths.rb#91
  def log_path(**args); end

  # Create a fully-qualified Organization resource string.
  #
  # The resource will be in the following format:
  #
  # `organizations/{organization}`
  #
  # @param organization [String]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/paths.rb#130
  def organization_path(organization:); end

  # Create a fully-qualified Project resource string.
  #
  # The resource will be in the following format:
  #
  # `projects/{project}`
  #
  # @param project [String]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/logging_service/paths.rb#144
  def project_path(project:); end
end

# Service for configuring logs-based metrics.
#
# To load this service and instantiate a client:
#
#     require "google/cloud/logging/v2/metrics_service"
#     client = ::Google::Cloud::Logging::V2::MetricsService::Client.new
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/credentials.rb#25
module Google::Cloud::Logging::V2::MetricsService; end

# Client for the MetricsService service.
#
# Service for configuring logs-based metrics.
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#32
class Google::Cloud::Logging::V2::MetricsService::Client
  include ::Google::Cloud::Logging::V2::MetricsService::Paths

  # Create a new MetricsService client object.
  #
  # @example
  #
  #   # Create a client using the default configuration
  #   client = ::Google::Cloud::Logging::V2::MetricsService::Client.new
  #
  #   # Create a client using a custom configuration
  #   client = ::Google::Cloud::Logging::V2::MetricsService::Client.new do |config|
  #   config.timeout = 10.0
  #   end
  # @return [Client] a new instance of Client
  # @yield [config] Configure the MetricsService client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#131
  def initialize; end

  # Configure the MetricsService Client instance.
  #
  # The configuration is set to the derived mode, meaning that values can be changed,
  # but structural changes (adding new fields, etc.) are not allowed. Structural changes
  # should be made on {Client.configure}.
  #
  # See {::Google::Cloud::Logging::V2::MetricsService::Client::Configuration}
  # for a description of the configuration fields.
  #
  # @return [Client::Configuration]
  # @yield [config] Configure the Client client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#110
  def configure; end

  # Creates a logs-based metric.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::MetricsService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::CreateLogMetricRequest.new
  #
  #   # Call the create_log_metric method.
  #   result = client.create_log_metric request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::LogMetric.
  #   p result
  # @overload create_log_metric
  # @overload create_log_metric
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::LogMetric]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::LogMetric]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#410
  def create_log_metric(request, options = T.unsafe(nil)); end

  # Deletes a logs-based metric.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::MetricsService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::DeleteLogMetricRequest.new
  #
  #   # Call the delete_log_metric method.
  #   result = client.delete_log_metric request
  #
  #   # The returned object is of type Google::Protobuf::Empty.
  #   p result
  # @overload delete_log_metric
  # @overload delete_log_metric
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Protobuf::Empty]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Protobuf::Empty]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#590
  def delete_log_metric(request, options = T.unsafe(nil)); end

  # Gets a logs-based metric.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::MetricsService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::GetLogMetricRequest.new
  #
  #   # Call the get_log_metric method.
  #   result = client.get_log_metric request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::LogMetric.
  #   p result
  # @overload get_log_metric
  # @overload get_log_metric
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::LogMetric]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::LogMetric]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#318
  def get_log_metric(request, options = T.unsafe(nil)); end

  # Lists logs-based metrics.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::MetricsService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::ListLogMetricsRequest.new
  #
  #   # Call the list_log_metrics method.
  #   result = client.list_log_metrics request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can
  #   # iterate over all elements by calling #each, and the enumerable
  #   # will lazily make API calls to fetch subsequent pages. Other
  #   # methods are also available for managing paging directly.
  #   result.each do |response|
  #   # Each element is of type ::Google::Cloud::Logging::V2::LogMetric.
  #   p response
  #   end
  # @overload list_log_metrics
  # @overload list_log_metrics
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::PagedEnumerable<::Google::Cloud::Logging::V2::LogMetric>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Logging::V2::LogMetric>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#230
  def list_log_metrics(request, options = T.unsafe(nil)); end

  # @private
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#36
  def metrics_service_stub; end

  # Creates or updates a logs-based metric.
  #
  # @example Basic example
  #   require "google/cloud/logging/v2"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Logging::V2::MetricsService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Logging::V2::UpdateLogMetricRequest.new
  #
  #   # Call the update_log_metric method.
  #   result = client.update_log_metric request
  #
  #   # The returned object is of type Google::Cloud::Logging::V2::LogMetric.
  #   p result
  # @overload update_log_metric
  # @overload update_log_metric
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Logging::V2::LogMetric]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Logging::V2::LogMetric]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#503
  def update_log_metric(request, options = T.unsafe(nil)); end

  class << self
    # Configure the MetricsService Client class.
    #
    # See {::Google::Cloud::Logging::V2::MetricsService::Client::Configuration}
    # for a description of the configuration fields.
    #
    # @example
    #
    #   # Modify the configuration for all MetricsService clients
    #   ::Google::Cloud::Logging::V2::MetricsService::Client.configure do |config|
    #   config.timeout = 10.0
    #   end
    # @return [Client::Configuration]
    # @yield [config] Configure the Client client.
    # @yieldparam config [Client::Configuration]
    #
    # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#56
    def configure; end
  end
end

# Configuration class for the MetricsService API.
#
# This class represents the configuration for MetricsService,
# providing control over timeouts, retry behavior, logging, transport
# parameters, and other low-level controls. Certain parameters can also be
# applied individually to specific RPCs. See
# {::Google::Cloud::Logging::V2::MetricsService::Client::Configuration::Rpcs}
# for a list of RPCs that can be configured independently.
#
# Configuration can be applied globally to all clients, or to a single client
# on construction.
#
# @example
#
#   # Modify the global config, setting the timeout for
#   # list_log_metrics to 20 seconds,
#   # and all remaining timeouts to 10 seconds.
#   ::Google::Cloud::Logging::V2::MetricsService::Client.configure do |config|
#   config.timeout = 10.0
#   config.rpcs.list_log_metrics.timeout = 20.0
#   end
#
#   # Apply the above configuration only to a new client.
#   client = ::Google::Cloud::Logging::V2::MetricsService::Client.new do |config|
#   config.timeout = 10.0
#   config.rpcs.list_log_metrics.timeout = 20.0
#   end
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#710
class Google::Cloud::Logging::V2::MetricsService::Client::Configuration
  extend ::Gapic::Config

  # @private
  # @return [Configuration] a new instance of Configuration
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Logging::V2::MetricsService::Client::Configuration] the object that the method was called on
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#730
  def initialize(parent_config = T.unsafe(nil)); end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def channel_args; end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def channel_args=(new_value); end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def credentials; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def credentials=(new_value); end

  # The hostname or hostname:port of the service endpoint.
  # Defaults to `"logging.googleapis.com"`.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def endpoint; end

  # The hostname or hostname:port of the service endpoint.
  # Defaults to `"logging.googleapis.com"`.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def endpoint=(new_value); end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def interceptors; end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def interceptors=(new_value); end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def lib_name; end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def lib_name=(new_value); end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def lib_version; end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def lib_version=(new_value); end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def metadata; end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def metadata=(new_value); end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def quota_project; end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def quota_project=(new_value); end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def retry_policy; end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def retry_policy=(new_value); end

  # Configurations for individual RPCs
  #
  # @return [Rpcs]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#740
  def rpcs; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def scope; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def scope=(new_value); end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def timeout; end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def timeout=(new_value); end
end

# Configuration RPC class for the MetricsService API.
#
# Includes fields providing the configuration for each RPC in this service.
# Each configuration object is of type `Gapic::Config::Method` and includes
# the following configuration fields:
#
#  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
#  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
#  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
#     include the following keys:
#      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
#      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
#      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
#      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
#         trigger a retry.
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#765
class Google::Cloud::Logging::V2::MetricsService::Client::Configuration::Rpcs
  # @private
  # @return [Rpcs] a new instance of Rpcs
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Logging::V2::MetricsService::Client::Configuration::Rpcs] the object that the method was called on
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#793
  def initialize(parent_rpcs = T.unsafe(nil)); end

  # RPC-specific configuration for `create_log_metric`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#780
  def create_log_metric; end

  # RPC-specific configuration for `delete_log_metric`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#790
  def delete_log_metric; end

  # RPC-specific configuration for `get_log_metric`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#775
  def get_log_metric; end

  # RPC-specific configuration for `list_log_metrics`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#770
  def list_log_metrics; end

  # RPC-specific configuration for `update_log_metric`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/client.rb#785
  def update_log_metric; end
end

# Credentials for the MetricsService API.
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/credentials.rb#27
class Google::Cloud::Logging::V2::MetricsService::Credentials < ::Google::Auth::Credentials; end

# Path helper methods for the MetricsService API.
#
# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/paths.rb#26
module Google::Cloud::Logging::V2::MetricsService::Paths
  extend ::Google::Cloud::Logging::V2::MetricsService::Paths

  # Create a fully-qualified LogMetric resource string.
  #
  # The resource will be in the following format:
  #
  # `projects/{project}/metrics/{metric}`
  #
  # @param project [String]
  # @param metric [String]
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/paths.rb#38
  def log_metric_path(project:, metric:); end

  # Create a fully-qualified Project resource string.
  #
  # The resource will be in the following format:
  #
  # `projects/{project}`
  #
  # @param project [String]
  # @return [::String]
  #
  # source://google-cloud-logging-v2//lib/google/cloud/logging/v2/metrics_service/paths.rb#54
  def project_path(project:); end
end

module Google::Cloud::Logging::V2::OperationState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_config_pb.rb#278
Google::Cloud::Logging::V2::OperationState::OPERATION_STATE_CANCELLED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_config_pb.rb#278
Google::Cloud::Logging::V2::OperationState::OPERATION_STATE_FAILED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_config_pb.rb#278
Google::Cloud::Logging::V2::OperationState::OPERATION_STATE_RUNNING = T.let(T.unsafe(nil), Integer)

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_config_pb.rb#278
Google::Cloud::Logging::V2::OperationState::OPERATION_STATE_SCHEDULED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_config_pb.rb#278
Google::Cloud::Logging::V2::OperationState::OPERATION_STATE_SUCCEEDED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_config_pb.rb#278
Google::Cloud::Logging::V2::OperationState::OPERATION_STATE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_config_pb.rb#278
Google::Cloud::Logging::V2::OperationState::OPERATION_STATE_WAITING_FOR_PERMISSIONS = T.let(T.unsafe(nil), Integer)

class Google::Cloud::Logging::V2::Settings
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::TailLogEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::TailLogEntriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::TailLogEntriesResponse::SuppressionInfo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module Google::Cloud::Logging::V2::TailLogEntriesResponse::SuppressionInfo::Reason
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_pb.rb#101
Google::Cloud::Logging::V2::TailLogEntriesResponse::SuppressionInfo::Reason::NOT_CONSUMED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_pb.rb#101
Google::Cloud::Logging::V2::TailLogEntriesResponse::SuppressionInfo::Reason::RATE_LIMIT = T.let(T.unsafe(nil), Integer)

# source://google-cloud-logging-v2//lib/google/logging/v2/logging_pb.rb#101
Google::Cloud::Logging::V2::TailLogEntriesResponse::SuppressionInfo::Reason::REASON_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Google::Cloud::Logging::V2::UndeleteBucketRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::UpdateBucketRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::UpdateCmekSettingsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::UpdateExclusionRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::UpdateLogMetricRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::UpdateSettingsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::UpdateSinkRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::UpdateViewRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://google-cloud-logging-v2//lib/google/cloud/logging/v2/version.rb#24
Google::Cloud::Logging::V2::VERSION = T.let(T.unsafe(nil), String)

class Google::Cloud::Logging::V2::WriteLogEntriesPartialErrors
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::WriteLogEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::Logging::V2::WriteLogEntriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://google-cloud-logging/2.3.2/lib/google/cloud/logging/version.rb#19
Google::Cloud::Logging::VERSION = T.let(T.unsafe(nil), String)
