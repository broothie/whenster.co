# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-cloud-logging` gem.
# Please instead update this file by running `bin/tapioca gem google-cloud-logging`.

# source://google-cloud-logging//lib/google-cloud-logging.rb#27
module Google; end

# source://google-cloud-logging//lib/google-cloud-logging.rb#28
module Google::Cloud
  # source://google-cloud-error_reporting/0.42.2/lib/google-cloud-error_reporting.rb#60
  def error_reporting(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # Creates a new object for connecting to the Stackdriver Logging service.
  # Each call creates a new connection.
  #
  # For more information on connecting to Google Cloud see the
  # {file:AUTHENTICATION.md Authentication Guide}.
  #
  # @example
  #   require "google/cloud"
  #
  #   gcloud = Google::Cloud.new
  #   logging = gcloud.logging
  #
  #   entries = logging.entries
  #   entries.each do |e|
  #   puts "[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}"
  #   end
  # @example The default scope can be overridden with the `scope` option:
  #   require "google/cloud"
  #
  #   gcloud  = Google::Cloud.new
  #   platform_scope = "https://www.googleapis.com/auth/cloud-platform"
  #   logging = gcloud.logging scope: platform_scope
  # @param scope [String, Array<String>] The OAuth 2.0 scopes controlling the
  #   set of resources and operations that the connection can access. See
  #   [Using OAuth 2.0 to Access Google
  #   APIs](https://developers.google.com/identity/protocols/OAuth2).
  #
  #   The default scope is:
  #
  #   * `https://www.googleapis.com/auth/logging.admin`
  # @param timeout [Integer] Default timeout to use in requests. Optional.
  # @return [Google::Cloud::Logging::Project]
  #
  # source://google-cloud-logging//lib/google-cloud-logging.rb#67
  def logging(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # source://google-cloud-storage/1.44.0/lib/google-cloud-storage.rb#76
  def storage(scope: T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil), open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), send_timeout: T.unsafe(nil), max_elapsed_time: T.unsafe(nil), base_interval: T.unsafe(nil), max_interval: T.unsafe(nil), multiplier: T.unsafe(nil)); end

  # source://google-cloud-trace/0.42.1/lib/google-cloud-trace.rb#60
  def trace(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  class << self
    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#158
    def auto_load_files; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#128
    def auto_load_gems; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#91
    def configure; end

    # source://google-cloud-env/1.6.0/lib/google/cloud/env.rb#490
    def env; end

    # source://google-cloud-error_reporting/0.42.2/lib/google-cloud-error_reporting.rb#105
    def error_reporting(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#103
    def init_configuration; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#142
    def loaded_files; end

    # Creates a new object for connecting to the Stackdriver Logging service.
    # Each call creates a new connection.
    #
    # For more information on connecting to Google Cloud see the
    # {file:AUTHENTICATION.md Authentication Guide}.
    #
    # @example
    #   require "google/cloud"
    #
    #   logging = Google::Cloud.logging
    #
    #   entries = logging.entries
    #   entries.each do |e|
    #   puts "[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}"
    #   end
    # @param project_id [String] Project identifier for the Stackdriver Logging
    #   service you are connecting to. If not present, the default project for
    #   the credentials is used.
    # @param credentials [String, Hash, Google::Auth::Credentials] The path to
    #   the keyfile as a String, the contents of the keyfile as a Hash, or a
    #   Google::Auth::Credentials object. (See {Logging::Credentials})
    # @param scope [String, Array<String>] The OAuth 2.0 scopes controlling the
    #   set of resources and operations that the connection can access. See
    #   [Using OAuth 2.0 to Access Google
    #   APIs](https://developers.google.com/identity/protocols/OAuth2).
    #
    #   The default scope is:
    #
    #   * `https://www.googleapis.com/auth/logging.admin`
    # @param timeout [Integer] Default timeout to use in requests. Optional.
    # @return [Google::Cloud::Logging::Project]
    #
    # source://google-cloud-logging//lib/google-cloud-logging.rb#109
    def logging(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#62
    def new(project_id = T.unsafe(nil), credentials = T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-storage/1.44.0/lib/google-cloud-storage.rb#135
    def storage(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil), open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), send_timeout: T.unsafe(nil), max_elapsed_time: T.unsafe(nil), base_interval: T.unsafe(nil), max_interval: T.unsafe(nil), multiplier: T.unsafe(nil)); end

    # source://google-cloud-trace/0.42.1/lib/google-cloud-trace.rb#101
    def trace(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end
  end
end

# # Stackdriver Logging
#
# The Stackdriver Logging service collects and stores logs from applications
# and services on the Google Cloud Platform, giving you fine-grained,
# programmatic control over your projects' logs. You can use the Stackdriver
# Logging API to:
#
# * Read and filter log entries
# * Export your log entries to Cloud Storage, BigQuery, or Cloud Pub/Sub
# * Create logs-based metrics for use in Cloud Monitoring
# * Write log entries
#
# For general information about Stackdriver Logging, read [Stackdriver
# Logging Documentation](https://cloud.google.com/logging/docs/).
#
# See {file:OVERVIEW.md Stackdriver Logging Overview}.
#
# source://google-cloud-logging//lib/google/cloud/logging/version.rb#18
module Google::Cloud::Logging
  class << self
    # Configure the Google::Cloud::Logging::Middleware when used in a
    # Rack-based application.
    #
    # The following Stackdriver Logging configuration parameters are
    # supported:
    #
    # * `project_id` - (String) Project identifier for the Stackdriver
    #   Logging service you are connecting to. (The parameter `project` is
    #   considered deprecated, but may also be used.)
    # * `credentials` - (String, Hash, Google::Auth::Credentials) The path to
    #   the keyfile as a String, the contents of the keyfile as a Hash, or a
    #   Google::Auth::Credentials object. (See {Logging::Credentials}) (The
    #   parameter `keyfile` is considered deprecated, but may also be used.)
    # * `scope` - (String, Array<String>) The OAuth 2.0 scopes controlling
    #   the set of resources and operations that the connection can access.
    # * `quota_project` - (String) The project ID for a project that can be
    #   used by client libraries for quota and billing purposes.
    # * `timeout` - (Integer) Default timeout to use in requests.
    # * `endpoint` - (String) Override of the endpoint host name, or `nil`
    #   to use the default endpoint.
    # * `log_name` - (String) Name of the application log file. Default:
    #   `"ruby_app_log"`
    # * `log_name_map` - (Hash) Map specific request routes to other log.
    #   Default: `{ "/_ah/health" => "ruby_health_check_log" }`
    # * `monitored_resource.type` (String) Resource type name. See [full
    #   list](https://cloud.google.com/logging/docs/api/v2/resource-list).
    #   Self discovered on GCP.
    # * `monitored_resource.labels` -(Hash) Resource labels. See [full
    #   list](https://cloud.google.com/logging/docs/api/v2/resource-list).
    #   Self discovered on GCP.
    # * `labels` - (Hash) User defined labels. A `Hash` of label names to
    #   string label values or callables/`Proc` which are functions of the
    #   Rack environment.
    # * `set_default_logger_on_rails_init` - (Boolean) Whether Google Cloud
    #   Logging Logger should be allowed to start background threads and open
    #   gRPC connections during Rails initialization. This should only be used
    #   with a non-forking web server. Web servers such as Puma and Unicorn
    #   should not set this, and instead set the Rails logger to a Google
    #   Cloud Logging Logger object on the worker process by calling
    #   {Railtie.set_default_logger} at the appropriate time, such as a
    #   post-fork hook.
    # * `on_error` - (Proc) A Proc to be run when an error is encountered
    #   on a background thread. The Proc must take the error object as the
    #   single argument. (See {AsyncWriter.on_error}.)
    #
    # See the [Configuration
    # Guide](https://googleapis.dev/ruby/stackdriver/latest/file.INSTRUMENTATION_CONFIGURATION.html)
    # for full configuration parameters.
    #
    # @return [Google::Cloud::Config] The configuration object
    #   the Google::Cloud::Logging module uses.
    # @yield [Google::Cloud.configure.logging]
    #
    # source://google-cloud-logging//lib/google/cloud/logging.rb#164
    def configure; end

    # @private Default credentials.
    #
    # source://google-cloud-logging//lib/google/cloud/logging.rb#180
    def default_credentials(scope: T.unsafe(nil)); end

    # @private Default project.
    #
    # source://google-cloud-logging//lib/google/cloud/logging.rb#172
    def default_project_id; end

    # Creates a new object for connecting to the Stackdriver Logging service.
    # Each call creates a new connection.
    #
    # For more information on connecting to Google Cloud see the
    # {file:AUTHENTICATION.md Authentication Guide}.
    #
    # @example
    #   require "google/cloud/logging"
    #
    #   logging = Google::Cloud::Logging.new
    #
    #   entries = logging.entries
    #   entries.each do |e|
    #   puts "[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}"
    #   end
    # @param project_id [String] Project identifier for the Stackdriver
    #   Logging service you are connecting to. If not present, the default
    #   project for the credentials is used.
    # @param credentials [String, Hash, Google::Auth::Credentials] The path to
    #   the keyfile as a String, the contents of the keyfile as a Hash, or a
    #   Google::Auth::Credentials object. (See {Logging::Credentials})
    # @param scope [String, Array<String>] The OAuth 2.0 scopes controlling
    #   the set of resources and operations that the connection can access.
    #   See [Using OAuth 2.0 to Access Google
    #   APIs](https://developers.google.com/identity/protocols/OAuth2).
    #
    #   The default scope is:
    #
    #   * `https://www.googleapis.com/auth/logging.admin`
    # @param timeout [Integer] Default timeout to use in requests. Optional.
    # @param project [String] Alias for the `project_id` argument. Deprecated.
    # @param keyfile [String] Alias for the `credentials` argument.
    #   Deprecated.
    # @param endpoint [String] Override of the endpoint host name. Optional.
    #   If the param is nil, uses the default endpoint.
    # @raise [ArgumentError]
    # @return [Google::Cloud::Logging::Project]
    #
    # source://google-cloud-logging//lib/google/cloud/logging.rb#84
    def new(project_id: T.unsafe(nil), credentials: T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil), endpoint: T.unsafe(nil), project: T.unsafe(nil), keyfile: T.unsafe(nil)); end
  end
end

# # AsyncWriteEntriesError
#
# Used to indicate a problem when {AsyncWriter} writes log entries to the
# API. This can occur when the API returns an error.
#
# @example
#   require "google/cloud/logging"
#   require "google/cloud/error_reporting"
#
#   logging = Google::Cloud::Logging.new
#
#   resource = logging.resource "gae_app",
#   module_id: "1",
#   version_id: "20150925t173233"
#
#   async = logging.async_writer
#
#   # Register to be notified when unhandled errors occur.
#   async.on_error do |error|
#   # error can be a AsyncWriteEntriesError, with entries
#   Google::Cloud::ErrorReporting.report error
#   end
#
#   logger = async.logger "my_app_log", resource, env: :production
#   logger.info "Job started."
#
# source://google-cloud-logging//lib/google/cloud/logging/errors.rb#88
class Google::Cloud::Logging::AsyncWriteEntriesError < ::Google::Cloud::Error
  # @return [AsyncWriteEntriesError] a new instance of AsyncWriteEntriesError
  #
  # source://google-cloud-logging//lib/google/cloud/logging/errors.rb#94
  def initialize(message, entries = T.unsafe(nil)); end

  # Returns the value of attribute entries.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/errors.rb#92
  def entries; end
end

# # AsyncWriter
#
# AsyncWriter buffers, batches, and transmits log entries efficiently.
# Writing log entries is asynchronous and will not block.
#
# Batches that cannot be delivered immediately are queued. When the queue
# is full new batch requests will raise errors that can be consumed using
# the {#on_error} callback. This provides back pressure in case the writer
# cannot keep up with requests.
#
# This object is thread-safe; it may accept write requests from
# multiple threads simultaneously, and will serialize them when
# executing in the background thread.
#
# @example
#   require "google/cloud/logging"
#
#   logging = Google::Cloud::Logging.new
#
#   async = logging.async_writer
#
#   entry1 = logging.entry payload: "Job started."
#   entry2 = logging.entry payload: "Job completed."
#
#   labels = { job_size: "large", job_code: "red" }
#   resource = logging.resource "gae_app",
#   "module_id" => "1",
#   "version_id" => "20150925t173233"
#
#   async.write_entries [entry1, entry2],
#   log_name: "my_app_log",
#   resource: resource,
#   labels: labels
#
# source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#58
class Google::Cloud::Logging::AsyncWriter
  include ::MonitorMixin

  # @private Creates a new AsyncWriter instance.
  # @return [AsyncWriter] a new instance of AsyncWriter
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#68
  def initialize(logging, max_count: T.unsafe(nil), max_bytes: T.unsafe(nil), max_queue: T.unsafe(nil), interval: T.unsafe(nil), threads: T.unsafe(nil), partial_success: T.unsafe(nil)); end

  # Stop this asynchronous writer and block until it has been stopped.
  #
  # @param timeout [Number, nil] The maximum number of seconds to wait for
  #   shutdown to complete. Will wait forever when the value is `nil`. The
  #   default value is `nil`.
  # @param force [Boolean] If set to true, and the writer hasn't stopped
  #   within the given timeout, kill it forcibly by terminating the
  #   thread. This should be used with extreme caution, as it can
  #   leave RPCs unfinished. Default is false.
  # @return [Symbol] Returns `:new` if {#write_entries} has never been
  #   called on the AsyncWriter, `:stopped` if it was already stopped
  #   at the time of invocation, `:waited` if it stopped during the
  #   timeout period, `:timeout` if it is still running after the
  #   timeout, or `:forced` if it was forcibly killed.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#258
  def async_stop!(timeout = T.unsafe(nil), force: T.unsafe(nil)); end

  # Forces all entries in the current batch to be published
  # immediately.
  #
  # @return [AsyncWriter] returns self so calls can be chained.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#280
  def flush; end

  # @private Implementation accessors
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#63
  def interval; end

  # The most recent unhandled error to occur while transmitting log
  # entries.
  #
  # If an unhandled error has occurred the subscriber will attempt to
  # recover from the error and resume buffering, batching, and
  # transmitting log entries.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   resource = logging.resource "gae_app",
  #   module_id: "1",
  #   version_id: "20150925t173233"
  #
  #   async = logging.async_writer
  #
  #   logger = async.logger "my_app_log", resource, env: :production
  #   logger.info "Job started."
  #
  #   # If an error was raised, it can be retrieved here:
  #   async.last_error #=> nil
  # @return [Exception, nil] error The most recent error raised.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#371
  def last_error; end

  # The most recent unhandled error to occur while transmitting log
  # entries.
  #
  # If an unhandled error has occurred the subscriber will attempt to
  # recover from the error and resume buffering, batching, and
  # transmitting log entries.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   resource = logging.resource "gae_app",
  #   module_id: "1",
  #   version_id: "20150925t173233"
  #
  #   async = logging.async_writer
  #
  #   logger = async.logger "my_app_log", resource, env: :production
  #   logger.info "Job started."
  #
  #   # If an error was raised, it can be retrieved here:
  #   async.last_error #=> nil
  # @return [Exception, nil] error The most recent error raised.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#371
  def last_exception; end

  # Creates a logger instance that is API-compatible with Ruby's standard
  # library [Logger](http://ruby-doc.org/stdlib/libdoc/logger/rdoc).
  #
  # The logger will use AsyncWriter to transmit log entries on a
  # background thread.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   resource = logging.resource "gae_app",
  #   module_id: "1",
  #   version_id: "20150925t173233"
  #
  #   async = logging.async_writer
  #   logger = async.logger "my_app_log", resource, env: :production
  #   logger.info "Job started."
  # @param log_name [String] A log resource name to be associated with the
  #   written log entries.
  # @param resource [Google::Cloud::Logging::Resource] The monitored
  #   resource to be associated with written log entries.
  # @param labels [Hash] A set of user-defined data to be associated with
  #   written log entries.
  # @return [Google::Cloud::Logging::Logger] a Logger object that can be
  #   used in place of a ruby standard library logger object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#195
  def logger(log_name, resource, labels = T.unsafe(nil)); end

  # @private Implementation accessors
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#63
  def logging; end

  # @private Implementation accessors
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#63
  def max_bytes; end

  # @private Implementation accessors
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#63
  def max_count; end

  # @private Implementation accessors
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#63
  def max_queue; end

  # Register to be notified of errors when raised.
  #
  # If an unhandled error has occurred the writer will attempt to
  # recover from the error and resume buffering, batching, and
  # transmitting log entries
  #
  # Multiple error handlers can be added.
  #
  # @example
  #   require "google/cloud/logging"
  #   require "google/cloud/error_reporting"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   resource = logging.resource "gae_app",
  #   module_id: "1",
  #   version_id: "20150925t173233"
  #
  #   async = logging.async_writer
  #
  #   # Register to be notified when unhandled errors occur.
  #   async.on_error do |error|
  #   # error can be a AsyncWriterError or AsyncWriteEntriesError
  #   Google::Cloud::ErrorReporting.report error
  #   end
  #
  #   logger = async.logger "my_app_log", resource, env: :production
  #   logger.info "Job started."
  # @yield [callback] The block to be called when an error is raised.
  # @yieldparam error [Exception] The error raised.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#338
  def on_error(&block); end

  # @private Implementation accessors
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#63
  def partial_success; end

  # Whether the writer has been started.
  #
  # @return [boolean] `true` when started, `false` otherwise.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#293
  def started?; end

  # Begins the process of stopping the writer. Entries already in the
  # queue will be published, but no new entries can be added. Use {#wait!}
  # to block until the writer is fully stopped and all pending entries
  # have been published.
  #
  # @return [AsyncWriter] returns self so calls can be chained.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#206
  def stop; end

  # Stop this asynchronous writer and block until it has been stopped.
  #
  # @param timeout [Number, nil] The maximum number of seconds to wait for
  #   shutdown to complete. Will wait forever when the value is `nil`. The
  #   default value is `nil`.
  # @param force [Boolean] If set to true, and the writer hasn't stopped
  #   within the given timeout, kill it forcibly by terminating the
  #   thread. This should be used with extreme caution, as it can
  #   leave RPCs unfinished. Default is false.
  # @return [Symbol] Returns `:new` if {#write_entries} has never been
  #   called on the AsyncWriter, `:stopped` if it was already stopped
  #   at the time of invocation, `:waited` if it stopped during the
  #   timeout period, `:timeout` if it is still running after the
  #   timeout, or `:forced` if it was forcibly killed.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#258
  def stop!(timeout = T.unsafe(nil), force: T.unsafe(nil)); end

  # Whether the writer has been stopped.
  #
  # @return [boolean] `true` when stopped, `false` otherwise.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#301
  def stopped?; end

  # @private Implementation accessors
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#63
  def threads; end

  # Blocks until the writer is fully stopped, all pending entries have
  # been published, and all callbacks have completed. Does not stop the
  # writer. To stop the writer, first call {#stop} and then call {#wait!}
  # to block until the writer is stopped.
  #
  # @param timeout [Number, nil] The maximum number of seconds to wait for
  #   shutdown to complete. Will wait forever when the value is `nil`. The
  #   default value is `nil`.
  # @return [AsyncWriter] returns self so calls can be chained.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#230
  def wait!(timeout = T.unsafe(nil)); end

  # Asynchronously write one or more log entries to the Stackdriver
  # Logging service.
  #
  # Unlike the main write_entries method, this method usually does not
  # block. The actual write RPCs will happen in the background, and may
  # be batched with related calls. However, if the queue is full, this
  # method will block until enough space has cleared out.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   async = logging.async_writer
  #
  #   entry = logging.entry payload: "Job started.",
  #   log_name: "my_app_log"
  #   entry.resource.type = "gae_app"
  #   entry.resource.labels[:module_id] = "1"
  #   entry.resource.labels[:version_id] = "20150925t173233"
  #
  #   async.write_entries entry
  # @param entries [Google::Cloud::Logging::Entry, Array<Google::Cloud::Logging::Entry>] One or more entry
  #   objects to write. The log entries must have values for all required
  #   fields.
  # @param log_name [String] A default log ID for those log entries in
  #   `entries` that do not specify their own `log_name`. See also
  #   {Entry#log_name=}.
  # @param resource [Resource] A default monitored resource for those log
  #   entries in entries that do not specify their own resource. See also
  #   {Entry#resource}.
  # @param labels [Hash{Symbol,String => String}] User-defined `key:value`
  #   items that are added to the `labels` field of each log entry in
  #   `entries`, except when a log entry specifies its own `key:value`
  #   item with the same key. See also {Entry#labels=}.
  # @return [Google::Cloud::Logging::AsyncWriter] Returns self.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#132
  def write_entries(entries, log_name: T.unsafe(nil), resource: T.unsafe(nil), labels: T.unsafe(nil)); end

  protected

  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#416
  def default_error_callbacks; end

  # Sets the last_error and calls all error callbacks.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#407
  def error!(error); end

  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#398
  def publish_batch!; end

  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#429
  def publish_batch_async(batch); end

  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#378
  def run_background; end

  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#445
  def write_entries_with(entries); end
end

# @private
#
# source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#459
class Google::Cloud::Logging::AsyncWriter::Batch
  # @return [Batch] a new instance of Batch
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#463
  def initialize(writer); end

  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#470
  def add(entry, addl_bytes: T.unsafe(nil)); end

  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#507
  def addl_bytes_for(entry); end

  # Returns the value of attribute created_at.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#460
  def created_at; end

  # Returns the value of attribute entries.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#461
  def entries; end

  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#496
  def publish_at; end

  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#501
  def publish_wait; end

  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#490
  def ready?; end

  # source://google-cloud-logging//lib/google/cloud/logging/async_writer.rb#478
  def try_add(entry); end
end

# # AsyncWriterError
#
# Used to indicate a problem preventing {AsyncWriter} from asynchronously
# calling the API. This can occur when the {AsyncWriter} has too few
# resources allocated for the amount of usage.
#
# @example
#   require "google/cloud/logging"
#   require "google/cloud/error_reporting"
#
#   logging = Google::Cloud::Logging.new
#
#   resource = logging.resource "gae_app",
#   module_id: "1",
#   version_id: "20150925t173233"
#
#   async = logging.async_writer
#
#   # Register to be notified when unhandled errors occur.
#   async.on_error do |error|
#   # error can be a AsyncWriterError, with entries
#   Google::Cloud::ErrorReporting.report error
#   end
#
#   logger = async.logger "my_app_log", resource, env: :production
#   logger.info "Job started."
#
# source://google-cloud-logging//lib/google/cloud/logging/errors.rb#49
class Google::Cloud::Logging::AsyncWriterError < ::Google::Cloud::Error
  # @return [AsyncWriterError] a new instance of AsyncWriterError
  #
  # source://google-cloud-logging//lib/google/cloud/logging/errors.rb#55
  def initialize(message, entries = T.unsafe(nil)); end

  # Returns the value of attribute entries.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/errors.rb#53
  def entries; end
end

# @private Conversion to/from Logging GRPC objects.
#
# source://google-cloud-logging//lib/google/cloud/logging/convert.rb#21
module Google::Cloud::Logging::Convert
  class << self
    # @private Convert an Array to a Google::Protobuf::ListValue.
    #
    # source://google-cloud-logging//lib/google/cloud/logging/convert.rb#32
    def array_to_list(array); end

    # @private Convert a Hash to a Google::Protobuf::Struct.
    #
    # source://google-cloud-logging//lib/google/cloud/logging/convert.rb#24
    def hash_to_struct(hash); end

    # @private Convert a Google::Protobuf::Map to a Hash
    #
    # source://google-cloud-logging//lib/google/cloud/logging/convert.rb#64
    def map_to_hash(map); end

    # @private Convert an Object to a Google::Protobuf::Value.
    #
    # source://google-cloud-logging//lib/google/cloud/logging/convert.rb#40
    def object_to_value(obj); end
  end
end

# # Credentials
#
# Represents the authentication and authorization used to connect to the
# Stackdriver Logging API.
#
# @example
#   require "google/cloud/logging"
#
#   keyfile = "/path/to/keyfile.json"
#   creds = Google::Cloud::Logging::Credentials.new keyfile
#
#   logging = Google::Cloud::Logging.new(
#   project_id: "my-project",
#   credentials: creds
#   )
#
#   logging.project_id #=> "my-project"
#
# source://google-cloud-logging//lib/google/cloud/logging/credentials.rb#40
class Google::Cloud::Logging::Credentials < ::Google::Cloud::Logging::V2::LoggingService::Credentials; end

# Default log name to be used for Stackdriver Logging
#
# source://google-cloud-logging//lib/google/cloud/logging/rails.rb#23
Google::Cloud::Logging::DEFAULT_LOG_NAME = T.let(T.unsafe(nil), String)

# # Entry
#
# An individual entry in a log.
#
# Each log entry is composed of metadata and a payload. The metadata
# includes standard information used by Stackdriver Logging, such as when
# the entry was created and where it came from. The payload is the event
# record. Traditionally this is a message string, but in Stackdriver
# Logging it can also be a JSON or protocol buffer object. A single log
# can have entries with different payload types.
#
# A log is a named collection of entries. Logs can be produced by Google
# Cloud Platform services, by third-party services, or by your
# applications. For example, the log `compute.googleapis.com/activity_log`
# is produced by Google Compute Engine. Logs are simply referenced by name
# in google-cloud. There is no `Log` type in google-cloud or `Log`
# resource in the Stackdriver Logging API.
#
# @example
#   require "google/cloud/logging"
#
#   logging = Google::Cloud::Logging.new
#
#   entry = logging.entry payload: "Job started.", log_name: "my_app_log"
#   entry.resource.type = "gae_app"
#   entry.resource.labels[:module_id] = "1"
#   entry.resource.labels[:version_id] = "20150925t173233"
#
#   logging.write_entries entry
# @example Provide a hash to write a JSON payload to the log:
#   require "google/cloud/logging"
#
#   logging = Google::Cloud::Logging.new
#
#   payload = { "stats" => { "a" => 8, "b" => 12.5} }
#   entry = logging.entry payload: payload, log_name: "my_app_log"
#   entry.resource.type = "gae_app"
#   entry.resource.labels[:module_id] = "1"
#   entry.resource.labels[:version_id] = "20150925t173233"
#
#   logging.write_entries entry
# @see https://cloud.google.com/logging/docs/view/logs_index List of Log
#   Types
#
# source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#19
class Google::Cloud::Logging::Entry
  # Create a new Entry instance. The {#resource} attribute is
  # pre-populated with a new {Google::Cloud::Logging::Resource} instance.
  # See also {Google::Cloud::Logging::Project#entry}.
  #
  # @return [Entry] a new instance of Entry
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#93
  def initialize; end

  # Sets the severity level to `:ALERT`.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   entry = logging.entry
  #   entry.severity #=> :DEFAULT
  #   entry.alert!
  #   entry.alert? #=> true
  #   entry.severity #=> :ALERT
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#323
  def alert!; end

  # Returns `true` if the severity level is `:ALERT`.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#305
  def alert?; end

  # object.
  #
  # @private Adds the payload data to a Google::Cloud::Logging::V2::LogEntry
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#499
  def append_payload(grpc); end

  # Sets the severity level to `:CRITICAL`.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   entry = logging.entry
  #   entry.severity #=> :DEFAULT
  #   entry.critical!
  #   entry.critical? #=> true
  #   entry.severity #=> :CRITICAL
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#299
  def critical!; end

  # Returns `true` if the severity level is `:CRITICAL`.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#281
  def critical?; end

  # Sets the severity level to `:DEBUG`.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   entry = logging.entry
  #   entry.severity #=> :DEFAULT
  #   entry.debug!
  #   entry.debug? #=> true
  #   entry.severity #=> :DEBUG
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#179
  def debug!; end

  # Returns `true` if the severity level is `:DEBUG`.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#161
  def debug?; end

  # Sets the severity level to `:DEFAULT`.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   entry = logging.entry
  #   entry.severity = :DEBUG
  #   entry.default!
  #   entry.default? #=> true
  #   entry.severity #=> :DEFAULT
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#155
  def default!; end

  # Returns `true` if the severity level is `:DEFAULT`.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#137
  def default?; end

  # Sets the severity level to `:EMERGENCY`.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   entry = logging.entry
  #   entry.severity #=> :DEFAULT
  #   entry.emergency!
  #   entry.emergency? #=> true
  #   entry.severity #=> :EMERGENCY
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#347
  def emergency!; end

  # Returns `true` if the severity level is `:EMERGENCY`.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#329
  def emergency?; end

  # @private Determines if the Entry has any data.
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#411
  def empty?; end

  # Sets the severity level to `:ERROR`.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   entry = logging.entry
  #   entry.severity #=> :DEFAULT
  #   entry.error!
  #   entry.error? #=> true
  #   entry.severity #=> :ERROR
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#275
  def error!; end

  # Returns `true` if the severity level is `:ERROR`.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#257
  def error?; end

  # Information about the HTTP request associated with this log entry, if
  # applicable.
  #
  # @return [Google::Cloud::Logging::Entry::HttpRequest]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#375
  def http_request; end

  # Sets the severity level to `:INFO`.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   entry = logging.entry
  #   entry.severity #=> :DEFAULT
  #   entry.info!
  #   entry.info? #=> true
  #   entry.severity #=> :INFO
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#203
  def info!; end

  # Returns `true` if the severity level is `:INFO`.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#185
  def info?; end

  # A unique ID for the log entry. If you provide this field, the logging
  # service considers other log entries in the same log with the same ID
  # as duplicates which can be removed. If omitted, Stackdriver Logging
  # will generate a unique ID for this log entry.
  #
  # @return [String]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#357
  def insert_id; end

  # A unique ID for the log entry. If you provide this field, the logging
  # service considers other log entries in the same log with the same ID
  # as duplicates which can be removed. If omitted, Stackdriver Logging
  # will generate a unique ID for this log entry.
  #
  # @return [String]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#357
  def insert_id=(_arg0); end

  # A set of user-defined data that provides additional information about
  # the log entry.
  #
  # @return [Hash]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#363
  def labels; end

  # A set of user-defined data that provides additional information about
  # the log entry.
  #
  # @return [Hash]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#363
  def labels=(_arg0); end

  # Google::Cloud::Logging::V2::LogEntry object.
  #
  # @private Formats the labels so they can be saved to a
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#487
  def labels_grpc; end

  # The resource name of the log to which this log entry belongs. The
  # format of the name is `projects/<project-id>/logs/<log-id>`. e.g.
  # `projects/my-projectid/logs/my_app_log` and
  # `projects/1234567890/logs/library.googleapis.com%2Fbook_log`
  #
  # The log ID part of resource name must be less than 512 characters long
  # and can only include the following characters: upper and lower case
  # alphanumeric characters: `[A-Za-z0-9]`; and punctuation characters:
  # forward-slash (`/`), underscore (`_`), hyphen (`-`), and period (`.`).
  # Forward-slash (`/`) characters in the log ID must be URL-encoded.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#114
  def log_name; end

  # The resource name of the log to which this log entry belongs. The
  # format of the name is `projects/<project-id>/logs/<log-id>`. e.g.
  # `projects/my-projectid/logs/my_app_log` and
  # `projects/1234567890/logs/library.googleapis.com%2Fbook_log`
  #
  # The log ID part of resource name must be less than 512 characters long
  # and can only include the following characters: upper and lower case
  # alphanumeric characters: `[A-Za-z0-9]`; and punctuation characters:
  # forward-slash (`/`), underscore (`_`), hyphen (`-`), and period (`.`).
  # Forward-slash (`/`) characters in the log ID must be URL-encoded.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#114
  def log_name=(_arg0); end

  # Sets the severity level to `:NOTICE`.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   entry = logging.entry
  #   entry.severity #=> :DEFAULT
  #   entry.notice!
  #   entry.notice? #=> true
  #   entry.severity #=> :NOTICE
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#227
  def notice!; end

  # Returns `true` if the severity level is `:NOTICE`.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#209
  def notice?; end

  # Information about an operation associated with the log entry, if
  # applicable.
  #
  # @return [Google::Cloud::Logging::Entry::Operation]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#381
  def operation; end

  # The log entry payload, represented as either a string, a hash (JSON),
  # or a hash (protocol buffer).
  #
  # @return [String, Hash]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#369
  def payload; end

  # The log entry payload, represented as either a string, a hash (JSON),
  # or a hash (protocol buffer).
  #
  # @return [String, Hash]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#369
  def payload=(_arg0); end

  # The monitored resource associated with this log entry. Example: a log
  # entry that reports a database error would be associated with the
  # monitored resource designating the particular database that reported
  # the error.
  #
  # @return [Google::Cloud::Logging::Resource]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#122
  def resource; end

  # The monitored resource associated with this log entry. Example: a log
  # entry that reports a database error would be associated with the
  # monitored resource designating the particular database that reported
  # the error.
  #
  # @return [Google::Cloud::Logging::Resource]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#122
  def resource=(_arg0); end

  # The severity level of the log entry. The default value is `:DEFAULT`.
  #
  # @return [Symbol]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#133
  def severity; end

  # The severity level of the log entry. The default value is `:DEFAULT`.
  #
  # @return [Symbol]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#133
  def severity=(_arg0); end

  # Source code location information associated with the log entry, if
  # any.
  #
  # @return [Google::Cloud::Logging::Entry::SourceLocation]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#396
  def source_location; end

  # The time the event described by the log entry occurred. If omitted,
  # Stackdriver Logging will use the time the log entry is written.
  #
  # @return [Time]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#128
  def timestamp; end

  # The time the event described by the log entry occurred. If omitted,
  # Stackdriver Logging will use the time the log entry is written.
  #
  # @return [Time]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#128
  def timestamp=(_arg0); end

  # object.
  #
  # @private Formats the timestamp as a Google::Protobuf::Timestamp
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#475
  def timestamp_grpc; end

  # @private Exports the Entry to a Google::Cloud::Logging::V2::LogEntry object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#426
  def to_grpc; end

  # Resource name of the trace associated with the log entry, if any. If
  # it contains a relative resource name, the name is assumed to be
  # relative to `//tracing.googleapis.com`. Example:
  # `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`
  # Optional.
  #
  # @return [String]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#390
  def trace; end

  # Resource name of the trace associated with the log entry, if any. If
  # it contains a relative resource name, the name is assumed to be
  # relative to `//tracing.googleapis.com`. Example:
  # `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`
  # Optional.
  #
  # @return [String]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#390
  def trace=(_arg0); end

  # The sampling decision of the trace associated with the log entry.
  # Optional. A `true` value means that the trace resource name in the
  # `trace` field was sampled for storage in a trace backend. A `false`
  # means that the trace was not sampled for storage when this log entry
  # was written, or the sampling decision was unknown at the time. A
  # non-sampled `trace` value is still useful as a request correlation
  # identifier. The default is `false`.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#407
  def trace_sampled; end

  # The sampling decision of the trace associated with the log entry.
  # Optional. A `true` value means that the trace resource name in the
  # `trace` field was sampled for storage in a trace backend. A `false`
  # means that the trace was not sampled for storage when this log entry
  # was written, or the sampling decision was unknown at the time. A
  # non-sampled `trace` value is still useful as a request correlation
  # identifier. The default is `false`.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#407
  def trace_sampled=(_arg0); end

  # Sets the severity level to `:WARNING`.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   entry = logging.entry
  #   entry.severity #=> :DEFAULT
  #   entry.warning!
  #   entry.warning? #=> true
  #   entry.severity #=> :WARNING
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#251
  def warning!; end

  # Returns `true` if the severity level is `:WARNING`.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#233
  def warning?; end

  class << self
    # @private Extract payload data from Google API Client object.
    #
    # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#515
    def extract_payload(grpc); end

    # @private Get a Time object from a Google::Protobuf::Timestamp object.
    #
    # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#521
    def extract_timestamp(grpc); end

    # @private New Entry from a Google::Cloud::Logging::V2::LogEntry object.
    #
    # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#448
    def from_grpc(grpc); end

    # Generate a pseudo-random, 16-character ID suitable for use as the log
    # entry's {#insert_id}.
    #
    # @example
    #   require "google/cloud/logging"
    #
    #   insert_id = Google::Cloud::Logging::Entry.insert_id
    # @return [String]
    #
    # source://google-cloud-logging//lib/google/cloud/logging/entry.rb#85
    def insert_id; end
  end
end

# # Http Request
#
# HTTP request data associated with a log entry.
#
# See also {Google::Cloud::Logging::Entry#http_request}.
#
# source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#27
class Google::Cloud::Logging::Entry::HttpRequest
  # @private Create an empty HttpRequest object.
  # @return [HttpRequest] a new instance of HttpRequest
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#30
  def initialize; end

  # Whether an entity was served from cache (with or without
  # validation). (Boolean)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#104
  def cache_hit; end

  # Whether an entity was served from cache (with or without
  # validation). (Boolean)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#104
  def cache_hit=(_arg0); end

  # @private Determines if the HttpRequest has any data.
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#114
  def empty?; end

  # @overload method
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#44
  def method(*args); end

  # @overload method
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#57
  def method=(new_request_method); end

  # The referer URL of the request, as defined in [HTTP/1.1 Header Field
  # Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
  # (String)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#99
  def referer; end

  # The referer URL of the request, as defined in [HTTP/1.1 Header Field
  # Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
  # (String)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#99
  def referer=(_arg0); end

  # The IP address (IPv4 or IPv6) of the client that issued the HTTP
  # request. Examples: `"192.168.1.1"`, `"FE80::0202:B3FF:FE1E:8329"`.
  # (String)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#93
  def remote_ip; end

  # The IP address (IPv4 or IPv6) of the client that issued the HTTP
  # request. Examples: `"192.168.1.1"`, `"FE80::0202:B3FF:FE1E:8329"`.
  # (String)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#93
  def remote_ip=(_arg0); end

  # The request method. Examples: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`.
  # (String)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#36
  def request_method; end

  # The request method. Examples: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`.
  # (String)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#36
  def request_method=(_arg0); end

  # The size of the HTTP response message sent back to the client, in
  # bytes, including the response headers and the response body.
  # (Integer)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#81
  def response_size; end

  # The size of the HTTP response message sent back to the client, in
  # bytes, including the response headers and the response body.
  # (Integer)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#81
  def response_size=(_arg0); end

  # The size of the HTTP request message in bytes, including the request
  # headers and the request body. (Integer)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#70
  def size; end

  # The size of the HTTP request message in bytes, including the request
  # headers and the request body. (Integer)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#70
  def size=(_arg0); end

  # The response code indicating the status of response. Examples:
  # `200`, `404`. (Integer)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#75
  def status; end

  # The response code indicating the status of response. Examples:
  # `200`, `404`. (Integer)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#75
  def status=(_arg0); end

  # Google::Cloud::Logging::Type::HttpRequest object.
  #
  # @private Exports the HttpRequest to a
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#130
  def to_grpc; end

  # The URL. The scheme (http, https), the host name, the path and the
  # query portion of the URL that was requested. Example:
  # `"http://example.com/some/info?color=red"`. (String)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#65
  def url; end

  # The URL. The scheme (http, https), the host name, the path and the
  # query portion of the URL that was requested. Example:
  # `"http://example.com/some/info?color=red"`. (String)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#65
  def url=(_arg0); end

  # The user agent sent by the client. Example: `"Mozilla/4.0
  # (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)"`.
  # (String)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#87
  def user_agent; end

  # The user agent sent by the client. Example: `"Mozilla/4.0
  # (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)"`.
  # (String)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#87
  def user_agent=(_arg0); end

  # Whether the response was validated with the origin server before
  # being served from cache. This field is only meaningful if
  # `cache_hit` is `true`. (Boolean)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#110
  def validated; end

  # Whether the response was validated with the origin server before
  # being served from cache. This field is only meaningful if
  # `cache_hit` is `true`. (Boolean)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#110
  def validated=(_arg0); end

  class << self
    # object.
    #
    # @private New HttpRequest from a Google::Cloud::Logging::Type::HttpRequest
    #
    # source://google-cloud-logging//lib/google/cloud/logging/entry/http_request.rb#149
    def from_grpc(grpc); end
  end
end

# Entry::List is a special case Array with additional values.
#
# source://google-cloud-logging//lib/google/cloud/logging/entry/list.rb#24
class Google::Cloud::Logging::Entry::List
  # @private Create a new Entry::List with an array of Entry instances.
  # @return [List] a new instance of List
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/list.rb#32
  def initialize(arr = T.unsafe(nil)); end

  # Retrieves remaining results by repeatedly invoking {#next} until
  # {#next?} returns `false`. Calls the given block once for each
  # result, which is passed as the argument to the block.
  #
  # An Enumerator is returned if no block is given.
  #
  # This method will make repeated API calls until all remaining results
  # are retrieved. (Unlike `#each`, for example, which merely iterates
  # over the results returned by a single API call.) Use with caution.
  #
  # @example Iterating each log entry by passing a block:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   entries = logging.entries order: "timestamp desc"
  #
  #   entries.all do |e|
  #   puts "[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}"
  #   end
  # @example Using the enumerator by not passing a block:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   entries = logging.entries order: "timestamp desc"
  #
  #   all_payloads = entries.all.map do |entry|
  #   entry.payload
  #   end
  # @example Limit the number of API calls made:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   entries = logging.entries order: "timestamp desc"
  #
  #   entries.all(request_limit: 10) do |e|
  #   puts "[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}"
  #   end
  # @param request_limit [Integer] The upper limit of API requests to
  #   make to load all log entries. Default is no limit.
  # @return [Enumerator]
  # @yield [entry] The block for accessing each log entry.
  # @yieldparam entry [Entry] The log entry object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/list.rb#129
  def all(request_limit: T.unsafe(nil), &block); end

  # Retrieve the next page of entries.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   entries = logging.entries
  #   if entries.next?
  #   next_entries = entries.next
  #   end
  # @return [Sink::List]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/list.rb#70
  def next; end

  # Whether there is a next page of entries.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   entries = logging.entries
  #   if entries.next?
  #   next_entries = entries.next
  #   end
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/list.rb#51
  def next?; end

  # If not empty, indicates that there are more records that match
  # the request and this value should be passed to continue.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/list.rb#28
  def token; end

  # If not empty, indicates that there are more records that match
  # the request and this value should be passed to continue.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/list.rb#28
  def token=(_arg0); end

  protected

  # is available.
  #
  # @private Raise an error unless an active connection to the service
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/list.rb#171
  def ensure_service!; end

  class << self
    # Google::Cloud::Logging::V2::ListLogEntryResponse object.
    #
    # @private New Entry::List from a
    #
    # source://google-cloud-logging//lib/google/cloud/logging/entry/list.rb#149
    def from_grpc(grpc_list, service, resources: T.unsafe(nil), filter: T.unsafe(nil), order: T.unsafe(nil), max: T.unsafe(nil), projects: T.unsafe(nil)); end
  end
end

# # Operation
#
# Additional information about a potentially long-running operation with
# which a log entry is associated.
#
# See also {Google::Cloud::Logging::Entry#operation}.
#
# source://google-cloud-logging//lib/google/cloud/logging/entry/operation.rb#28
class Google::Cloud::Logging::Entry::Operation
  # @private Create an empty Operation object.
  # @return [Operation] a new instance of Operation
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/operation.rb#31
  def initialize; end

  # @private Determines if the Operation has any data.
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/operation.rb#56
  def empty?; end

  # Set this to `true` if this is the first log entry in the operation.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/operation.rb#48
  def first; end

  # Set this to `true` if this is the first log entry in the operation.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/operation.rb#48
  def first=(_arg0); end

  # An arbitrary operation identifier. Log entries with the same
  # identifier are assumed to be part of the same operation.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/operation.rb#37
  def id; end

  # An arbitrary operation identifier. Log entries with the same
  # identifier are assumed to be part of the same operation.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/operation.rb#37
  def id=(_arg0); end

  # Set this to `true` if this is the last log entry in the operation.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/operation.rb#52
  def last; end

  # Set this to `true` if this is the last log entry in the operation.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/operation.rb#52
  def last=(_arg0); end

  # An arbitrary producer identifier. The combination of `id` and
  # `producer` must be globally unique. Examples for `producer`:
  # `"MyDivision.MyBigCompany.com"`,
  # `"github.com/MyProject/MyApplication"`.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/operation.rb#44
  def producer; end

  # An arbitrary producer identifier. The combination of `id` and
  # `producer` must be globally unique. Examples for `producer`:
  # `"MyDivision.MyBigCompany.com"`,
  # `"github.com/MyProject/MyApplication"`.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/operation.rb#44
  def producer=(_arg0); end

  # Google::Cloud::Logging::V2::LogEntryOperation object.
  #
  # @private Exports the Operation to a
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/operation.rb#66
  def to_grpc; end

  class << self
    # Google::Cloud::Logging::V2::LogEntryOperation object.
    #
    # @private New Google::Cloud::Logging::Entry::Operation from a
    #
    # source://google-cloud-logging//lib/google/cloud/logging/entry/operation.rb#79
    def from_grpc(grpc); end
  end
end

# # SourceLocation
#
# Additional information about the source code location that produced
# the log entry.
#
# See also {Google::Cloud::Logging::Entry#source_location}.
#
# source://google-cloud-logging//lib/google/cloud/logging/entry/source_location.rb#28
class Google::Cloud::Logging::Entry::SourceLocation
  # @private Create an empty SourceLocation object.
  # @return [SourceLocation] a new instance of SourceLocation
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/source_location.rb#31
  def initialize; end

  # @private Determines if the SourceLocation has any data.
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/source_location.rb#53
  def empty?; end

  # Source file name. Depending on the runtime environment, this might
  # be a simple name or a fully-qualified name. Optional.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/source_location.rb#37
  def file; end

  # Source file name. Depending on the runtime environment, this might
  # be a simple name or a fully-qualified name. Optional.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/source_location.rb#37
  def file=(_arg0); end

  # Human-readable name of the function or method being invoked, with
  # optional context such as the class or package name. This information
  # may be used in contexts such as the logs viewer, where a file and
  # line number are less meaningful. Optional.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/source_location.rb#49
  def function; end

  # Human-readable name of the function or method being invoked, with
  # optional context such as the class or package name. This information
  # may be used in contexts such as the logs viewer, where a file and
  # line number are less meaningful. Optional.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/source_location.rb#49
  def function=(_arg0); end

  # Line within the source file. 1-based; `0` indicates no line number
  # available. Optional.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/source_location.rb#42
  def line; end

  # Line within the source file. 1-based; `0` indicates no line number
  # available. Optional.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/source_location.rb#42
  def line=(_arg0); end

  # Google::Cloud::Logging::V2::LogEntrySourceLocation object.
  #
  # @private Exports the SourceLocation to a
  #
  # source://google-cloud-logging//lib/google/cloud/logging/entry/source_location.rb#62
  def to_grpc; end

  class << self
    # Google::Cloud::Logging::V2::LogEntrySourceLocation object.
    #
    # @private New Google::Cloud::Logging::Entry::SourceLocation from a
    #
    # source://google-cloud-logging//lib/google/cloud/logging/entry/source_location.rb#74
    def from_grpc(grpc); end
  end
end

# source://google-cloud-logging//lib/google/cloud/logging/log/list.rb#21
class Google::Cloud::Logging::Log; end

# Log::List is a special case Array with additional values.
#
# source://google-cloud-logging//lib/google/cloud/logging/log/list.rb#24
class Google::Cloud::Logging::Log::List
  # @private Create a new Log::List with an array of log names.
  # @return [List] a new instance of List
  #
  # source://google-cloud-logging//lib/google/cloud/logging/log/list.rb#32
  def initialize(arr = T.unsafe(nil)); end

  # Retrieves remaining results by repeatedly invoking {#next} until
  # {#next?} returns `false`. Calls the given block once for each
  # result, which is passed as the argument to the block.
  #
  # An Enumerator is returned if no block is given.
  #
  # This method will make repeated API calls until all remaining results
  # are retrieved. (Unlike `#each`, for example, which merely iterates
  # over the results returned by a single API call.) Use with caution.
  #
  # @example Iterating each log name by passing a block:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   logs = logging.logs
  #
  #   logs.all { |l| puts l }
  # @example Limit the number of API calls made:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   logs = logging.logs
  #
  #   logs.all(request_limit: 10) { |l| puts l }
  # @param request_limit [Integer] The upper limit of API requests to
  #   make to load all log names. Default is no limit.
  # @return [Enumerator]
  # @yield [log] The block for accessing each log name.
  # @yieldparam log [String] The log name.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/log/list.rb#113
  def all(request_limit: T.unsafe(nil), &block); end

  # Retrieve the next page of logs.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   logs = logging.logs
  #   if logs.next?
  #   next_logs = logs.next
  #   end
  # @return [Log::List]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/log/list.rb#70
  def next; end

  # Whether there is a next page of logs.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   logs = logging.logs
  #   if logs.next?
  #   next_logs = logs.next
  #   end
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/log/list.rb#51
  def next?; end

  # If not empty, indicates that there are more records that match
  # the request and this value should be passed to continue.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/log/list.rb#28
  def token; end

  # If not empty, indicates that there are more records that match
  # the request and this value should be passed to continue.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/log/list.rb#28
  def token=(_arg0); end

  protected

  # is available.
  #
  # @private Raise an error unless an active connection to the service
  #
  # source://google-cloud-logging//lib/google/cloud/logging/log/list.rb#149
  def ensure_service!; end

  class << self
    # Google::Cloud::Logging::V2::ListLogsResponse object.
    #
    # @private New Log::List from a
    #
    # source://google-cloud-logging//lib/google/cloud/logging/log/list.rb#133
    def from_grpc(grpc_list, service, resource: T.unsafe(nil), max: T.unsafe(nil)); end
  end
end

# # Logger
#
# An API-compatible replacement for ruby's Logger that logs to the
# Stackdriver Logging Service.
#
# @example
#   require "google/cloud/logging"
#
#   logging = Google::Cloud::Logging.new
#
#   resource = logging.resource "gae_app",
#   module_id: "1",
#   version_id: "20150925t173233"
#
#   logger = logging.logger "my_app_log", resource, env: :production
#   logger.info "Job started."
# @example Provide a hash to write a JSON payload to the log:
#   require "google/cloud/logging"
#
#   logging = Google::Cloud::Logging.new
#
#   resource = logging.resource "gae_app",
#   module_id: "1",
#   version_id: "20150925t173233"
#
#   logger = logging.logger "my_app_log", resource, env: :production
#
#   payload = { "stats" => { "a" => 8, "b" => 12.5} }
#   logger.info payload
#
# source://google-cloud-logging//lib/google/cloud/logging/logger.rb#54
class Google::Cloud::Logging::Logger
  # Create a new Logger instance.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   writer = logging.async_writer max_queue_size: 1000
  #
  #   resource = logging.resource "gae_app", labels: {
  #   "module_id" => "1",
  #   "version_id" => "20150925t173233"
  #   }
  #
  #   logger = Google::Cloud::Logging::Logger.new writer,
  #   "my_app_log",
  #   resource,
  #   env: :production
  #   logger.info "Job started."
  # @param writer [#write_entries] The object that will transmit log
  #   entries. Generally, to create a logger that blocks on transmitting
  #   log entries, pass the Project; otherwise, to create a logger that
  #   transmits log entries in the background, pass an AsyncWriter. You
  #   may also pass any other object that responds to `#write_entries`.
  # @param log_name [String] A log resource name to be associated with the
  #   written log entries.
  # @param resource [Google::Cloud::Logging::Resource] The monitored
  #   resource to be associated with written log entries.
  # @param labels [Hash] A set of user-defined data to be associated with
  #   written log entries.
  # @return [Google::Cloud::Logging::Logger] a Logger object that can be
  #   used in place of a ruby standard library logger object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#169
  def initialize(writer, log_name, resource, labels = T.unsafe(nil)); end

  # Logs the given message at UNKNOWN severity.
  #
  # @param msg [String] The log entry payload as a string.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#329
  def <<(msg); end

  # Log a message if the given severity is high enough. This is the
  # generic logging method. Users will be more inclined to use {#debug},
  # {#info}, {#warn}, {#error}, and {#fatal}.
  #
  # @param severity [Integer, String, Symbol] the integer code for or the
  #   name of the severity level
  # @param message [String, Hash] The log entry payload, represented as
  #   either a string, a hash (JSON), or a hash (protocol buffer).
  # @yield Evaluates to the message to log. This is not evaluated unless
  #   the logger's level is sufficient to log the message. This allows you
  #   to create potentially expensive logging messages that are only
  #   called when the logger is configured to show them.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#310
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil)); end

  # Associate request data with the current Thread. You may provide
  # either the individual pieces of data (trace ID, log name) or a
  # populated RequestInfo object.
  #
  # @param info [RequestInfo] Info about the current request. Optional.
  #   If not present, a new RequestInfo is created using the remaining
  #   parameters.
  # @param trace_id [String, nil] The trace ID, or `nil` if no trace ID
  #   should be logged.
  # @param log_name [String, nil] The log name to use, or nil to use
  #   this logger's default.
  # @param env [Hash, nil] The request's Rack environment or `nil` if not
  #   available.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#453
  def add_request_info(info: T.unsafe(nil), env: T.unsafe(nil), trace_id: T.unsafe(nil), log_name: T.unsafe(nil), trace_sampled: T.unsafe(nil)); end

  # Track a given trace_id by associating it with the current
  # Thread
  #
  # @deprecated Use add_request_info
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#434
  def add_trace_id(trace_id); end

  # Close the logging "device". This effectively disables logging from
  # this logger; any further log messages will be silently ignored. The
  # logger may be re-enabled by calling #reopen.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#411
  def close; end

  # This logger does not use a formatter, but it implements this
  # attribute for API compatibility with the standard Logger.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#104
  def datetime_format; end

  # This logger does not use a formatter, but it implements this
  # attribute for API compatibility with the standard Logger.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#104
  def datetime_format=(_arg0); end

  # Log a `DEBUG` entry.
  #
  # @param message [String, Hash] The log entry payload, represented as
  #   either a string, a hash (JSON), or a hash (protocol buffer).
  # @yield Evaluates to the message to log. This is not evaluated unless
  #   the logger's level is sufficient to log the message. This allows you
  #   to create potentially expensive logging messages that are only
  #   called when the logger is configured to show them.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#197
  def debug(message = T.unsafe(nil), &block); end

  # Returns `true` if the current severity level allows for sending
  # `DEBUG` messages.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#337
  def debug?; end

  # Untrack the RequestInfo that's associated with current Thread
  #
  # @return [RequestInfo] The info that's being deleted
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#477
  def delete_request_info; end

  # Untrack the RequestInfo that's associated with current Thread
  #
  # @deprecated Use delete_request_info
  # @return [RequestInfo] The info that's being deleted
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#477
  def delete_trace_id; end

  # Log an `ERROR` entry.
  #
  # @param message [String, Hash] The log entry payload, represented as
  #   either a string, a hash (JSON), or a hash (protocol buffer).
  # @yield Evaluates to the message to log. This is not evaluated unless
  #   the logger's level is sufficient to log the message. This allows you
  #   to create potentially expensive logging messages that are only
  #   called when the logger is configured to show them.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#251
  def error(message = T.unsafe(nil), &block); end

  # Returns `true` if the current severity level allows for sending
  # `ERROR` messages.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#358
  def error?; end

  # Log a `FATAL` entry.
  #
  # @param message [String, Hash] The log entry payload, represented as
  #   either a string, a hash (JSON), or a hash (protocol buffer).
  # @yield Evaluates to the message to log. This is not evaluated unless
  #   the logger's level is sufficient to log the message. This allows you
  #   to create potentially expensive logging messages that are only
  #   called when the logger is configured to show them.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#269
  def fatal(message = T.unsafe(nil), &block); end

  # Returns `true` if the current severity level allows for sending
  # `FATAL` messages.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#365
  def fatal?; end

  # No-op method. Created to match the spec of ActiveSupport::Logger#flush
  # method when used in Rails application.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#488
  def flush; end

  # This logger does not use a formatter, but it provides a default
  # Logger::Formatter for API compatibility with the standard Logger.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#99
  def formatter; end

  # This logger does not use a formatter, but it provides a default
  # Logger::Formatter for API compatibility with the standard Logger.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#99
  def formatter=(_arg0); end

  # Log an `INFO` entry.
  #
  # @param message [String, Hash] The log entry payload, represented as
  #   either a string, a hash (JSON), or a hash (protocol buffer).
  # @yield Evaluates to the message to log. This is not evaluated unless
  #   the logger's level is sufficient to log the message. This allows you
  #   to create potentially expensive logging messages that are only
  #   called when the logger is configured to show them.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#215
  def info(message = T.unsafe(nil), &block); end

  # Returns `true` if the current severity level allows for sending `INFO`
  # messages.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#344
  def info?; end

  # The Google Cloud labels to write the log entry with.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#83
  def labels; end

  # The logging severity threshold (e.g. `Logger::INFO`)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#87
  def level; end

  # Sets the logging severity level.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   resource = logging.resource "gae_app",
  #   module_id: "1",
  #   version_id: "20150925t173233"
  #
  #   logger = logging.logger "my_app_log", resource, env: :production
  #
  #   logger.level = "INFO"
  #   logger.debug "Job started." # No log entry written
  # @param severity [Integer, String, Symbol] the integer code for or the
  #   name of the severity level
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#396
  def level=(severity); end

  # The logging severity threshold (e.g. `Logger::INFO`)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#87
  def local_level; end

  # Sets the logging severity level.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   resource = logging.resource "gae_app",
  #   module_id: "1",
  #   version_id: "20150925t173233"
  #
  #   logger = logging.logger "my_app_log", resource, env: :production
  #
  #   logger.level = "INFO"
  #   logger.debug "Job started." # No log entry written
  # @param severity [Integer, String, Symbol] the integer code for or the
  #   name of the severity level
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#396
  def local_level=(severity); end

  # Log a message if the given severity is high enough. This is the
  # generic logging method. Users will be more inclined to use {#debug},
  # {#info}, {#warn}, {#error}, and {#fatal}.
  #
  # @param severity [Integer, String, Symbol] the integer code for or the
  #   name of the severity level
  # @param message [String, Hash] The log entry payload, represented as
  #   either a string, a hash (JSON), or a hash (protocol buffer).
  # @yield Evaluates to the message to log. This is not evaluated unless
  #   the logger's level is sufficient to log the message. This allows you
  #   to create potentially expensive logging messages that are only
  #   called when the logger is configured to show them.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#310
  def log(severity, message = T.unsafe(nil), progname = T.unsafe(nil)); end

  # The Google Cloud log_name to write the log entry with.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#74
  def log_name; end

  # The Google Cloud log_name to write the log entry with.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#74
  def progname; end

  # This logger treats progname as an alias for log_name.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#113
  def progname=(name); end

  # The project ID this logger is sending data to. If set, this value is
  # used to set the trace field of log entries.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#109
  def project; end

  # The project ID this logger is sending data to. If set, this value is
  # used to set the trace field of log entries.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#109
  def project=(_arg0); end

  # Re-enable logging if the logger has been closed.
  #
  # Note that this method accepts a "logdev" argument for compatibility
  # with the standard Ruby Logger class; however, this argument is
  # ignored because this logger does not use a log device.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#423
  def reopen(_logdev = T.unsafe(nil)); end

  # Get the request data for the current Thread
  #
  # @return [RequestInfo, nil] The request data for the current thread,
  #   or `nil` if there is no data set.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#468
  def request_info; end

  # The Google Cloud resource to write the log entry with.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#79
  def resource; end

  # The logging severity threshold (e.g. `Logger::INFO`)
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#87
  def sev_threshold; end

  # Sets the logging severity level.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   resource = logging.resource "gae_app",
  #   module_id: "1",
  #   version_id: "20150925t173233"
  #
  #   logger = logging.logger "my_app_log", resource, env: :production
  #
  #   logger.level = "INFO"
  #   logger.debug "Job started." # No log entry written
  # @param severity [Integer, String, Symbol] the integer code for or the
  #   name of the severity level
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#396
  def sev_threshold=(severity); end

  # Filter out low severity messages within block.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   resource = logging.resource "gae_app",
  #   module_id: "1",
  #   version_id: "20150925t173233"
  #
  #   logger = logging.logger "my_app_log", resource, env: :production
  #
  #   logger.silence do
  #   logger.info "Info message"   # No log entry written
  #   logger.error "Error message" # Log entry written
  #   end
  # @param temp_level [Integer] Severity threshold to filter within the
  #   block. Messages with lower severity will be blocked. Default
  #   ::Logger::ERROR
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#514
  def silence(temp_level = T.unsafe(nil)); end

  # Boolean flag that indicates whether this logger can be silenced or
  # not.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#94
  def silencer; end

  # Boolean flag that indicates whether this logger can be silenced or
  # not.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#94
  def silencer=(_arg0); end

  # A Hash of Thread IDs to Stackdriver request trace ID. The
  # Stackdriver trace ID is a shared request identifier across all
  # Stackdriver services.
  #
  # This method is deprecated and returns a Hash containing only the
  # current Thread ID/trace_id now.
  #
  # @deprecated Use request_info
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#127
  def trace_ids; end

  # Log an `UNKNOWN` entry. This will be printed no matter what the
  # logger's current severity level is.
  #
  # @param message [String, Hash] The log entry payload, represented as
  #   either a string, a hash (JSON), or a hash (protocol buffer).
  # @yield Evaluates to the message to log. This is not evaluated unless
  #   the logger's level is sufficient to log the message. This allows you
  #   to create potentially expensive logging messages that are only
  #   called when the logger is configured to show them.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#288
  def unknown(message = T.unsafe(nil), &block); end

  # Returns `true` if the current severity level allows for sending
  # `UNKNOWN` messages.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#372
  def unknown?; end

  # Log a `WARN` entry.
  #
  # @param message [String, Hash] The log entry payload, represented as
  #   either a string, a hash (JSON), or a hash (protocol buffer).
  # @yield Evaluates to the message to log. This is not evaluated unless
  #   the logger's level is sufficient to log the message. This allows you
  #   to create potentially expensive logging messages that are only
  #   called when the logger is configured to show them.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#233
  def warn(message = T.unsafe(nil), &block); end

  # Returns `true` if the current severity level allows for sending `WARN`
  # messages.
  #
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#351
  def warn?; end

  # The Google Cloud writer object that calls to `#write_entries` are made
  # on. Either an AsyncWriter or Project object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#70
  def writer; end

  protected

  # @private Get current thread id
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#598
  def current_thread_id; end

  # @private Get the logger level number from severity value object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#574
  def derive_severity(severity); end

  # @private generate the labels hash for a log entry.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#557
  def entry_labels(info); end

  # @private Get Google Cloud deverity from logger level number.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#590
  def gcloud_severity(severity_int); end

  # @private Write a log entry to the Stackdriver Logging service.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#533
  def write_entry(severity, message); end

  private

  # Value can be a Proc (function of the request env) or a static value.
  #
  # @private Compute individual label value.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#615
  def compute_label_value(request_env, value_or_proc); end

  # @private Compute values for labels
  #
  # source://google-cloud-logging//lib/google/cloud/logging/logger.rb#606
  def compute_labels(request_env); end
end

# A RequestInfo represents data about the request being handled by the
# current thread. It is used to configure logs coming from that thread.
#
# The trace_id is a String that controls the trace ID sent with the log
# entry. If it is nil, no trace ID is sent.
#
# The log_name is a String that controls the name of the Stackdriver
# log to write to. If it is nil, the default log_name for this Logger
# is used.
#
# source://google-cloud-logging//lib/google/cloud/logging/logger.rb#65
class Google::Cloud::Logging::Logger::RequestInfo < ::Struct
  # Returns the value of attribute env
  #
  # @return [Object] the current value of env
  def env; end

  # Sets the attribute env
  #
  # @param value [Object] the value to set the attribute env to.
  # @return [Object] the newly set value
  def env=(_); end

  # Returns the value of attribute log_name
  #
  # @return [Object] the current value of log_name
  def log_name; end

  # Sets the attribute log_name
  #
  # @param value [Object] the value to set the attribute log_name to.
  # @return [Object] the newly set value
  def log_name=(_); end

  # Returns the value of attribute trace_id
  #
  # @return [Object] the current value of trace_id
  def trace_id; end

  # Sets the attribute trace_id
  #
  # @param value [Object] the value to set the attribute trace_id to.
  # @return [Object] the newly set value
  def trace_id=(_); end

  # Returns the value of attribute trace_sampled
  #
  # @return [Object] the current value of trace_sampled
  def trace_sampled; end

  # Sets the attribute trace_sampled
  #
  # @param value [Object] the value to set the attribute trace_sampled to.
  # @return [Object] the newly set value
  def trace_sampled=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# # Metric
#
# A logs-based [Google Cloud
# Monitoring](https://cloud.google.com/monitoring/docs) metric. A metric
# is a measured value that can be used to assess a system. The basis of a
# logs-based metric is the collection of log entries that match a logs
# filter.
#
# @example
#   require "google/cloud/logging"
#
#   logging = Google::Cloud::Logging.new
#   metric = logging.create_metric "errors", "severity>=ERROR"
# @see https://cloud.google.com/logging/docs/view/logs_based_metrics Logs-based Metrics
# @see https://cloud.google.com/monitoring/docs Google Cloud Monitoring
#
# source://google-cloud-logging//lib/google/cloud/logging/metric/list.rb#21
class Google::Cloud::Logging::Metric
  # @private Create an empty Metric object.
  # @return [Metric] a new instance of Metric
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric.rb#51
  def initialize; end

  # Permanently deletes the logs-based metric.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metric = logging.metric "severe_errors"
  #   metric.delete
  # @return [Boolean] Returns `true` if the metric was deleted.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric.rb#142
  def delete; end

  # The description of this metric, which is used in documentation.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric.rb#68
  def description; end

  # Updates the description of this metric, which is used in
  # documentation.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric.rb#75
  def description=(description); end

  # An [advanced logs
  # filter](https://cloud.google.com/logging/docs/view/advanced_filters).
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric.rb#82
  def filter; end

  # Updates the [advanced logs
  # filter](https://cloud.google.com/logging/docs/view/advanced_filters).
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric.rb#89
  def filter=(filter); end

  # @private The gRPC Google::Cloud::Logging::V2::LogMetric object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric.rb#47
  def grpc; end

  # @private The gRPC Google::Cloud::Logging::V2::LogMetric object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric.rb#47
  def grpc=(_arg0); end

  # The client-assigned metric identifier. Metric identifiers are limited
  # to 1000 characters and can include only the following characters:
  # `A-Z`, `a-z`, `0-9`, and the special characters `_-.,+!*',()%/\`. The
  # forward-slash character (`/`) denotes a hierarchy of name pieces, and
  # it cannot be the first character of the name.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric.rb#62
  def name; end

  # Reloads the logs-based metric with current data from the Logging
  # service.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metric = logging.metric "severe_errors"
  #   metric.filter = "Unwanted value"
  #   metric.reload!
  #   metric.filter #=> "logName:syslog"
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric.rb#123
  def refresh!; end

  # Reloads the logs-based metric with current data from the Logging
  # service.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metric = logging.metric "severe_errors"
  #   metric.filter = "Unwanted value"
  #   metric.reload!
  #   metric.filter #=> "logName:syslog"
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric.rb#123
  def reload!; end

  # Updates the logs-based metric.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metric = logging.metric "severe_errors"
  #   metric.filter = "logName:syslog AND severity>=ERROR"
  #   metric.save
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric.rb#104
  def save; end

  # @private The gRPC Service object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric.rb#43
  def service; end

  # @private The gRPC Service object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric.rb#43
  def service=(_arg0); end

  protected

  # available.
  #
  # @private Raise an error unless an active connection to the service is
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric.rb#162
  def ensure_service!; end

  class << self
    # @private New Metric from a gRPC object.
    #
    # source://google-cloud-logging//lib/google/cloud/logging/metric.rb#150
    def from_grpc(grpc, service); end
  end
end

# Metric::List is a special case Array with additional values.
#
# source://google-cloud-logging//lib/google/cloud/logging/metric/list.rb#24
class Google::Cloud::Logging::Metric::List
  # instances.
  #
  # @private Create a new Metric::List with an array of Metric
  # @return [List] a new instance of List
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric/list.rb#33
  def initialize(arr = T.unsafe(nil)); end

  # Retrieves remaining results by repeatedly invoking {#next} until
  # {#next?} returns `false`. Calls the given block once for each
  # result, which is passed as the argument to the block.
  #
  # An Enumerator is returned if no block is given.
  #
  # This method will make repeated API calls until all remaining results
  # are retrieved. (Unlike `#each`, for example, which merely iterates
  # over the results returned by a single API call.) Use with caution.
  #
  # @example Iterating each metric by passing a block:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metrics = logging.metrics
  #
  #   metrics.all do |metric|
  #   puts "#{metric.name}: #{metric.filter}"
  #   end
  # @example Using the enumerator by not passing a block:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metrics = logging.metrics
  #
  #   all_names = metrics.all.map do |metric|
  #   metric.name
  #   end
  # @example Limit the number of API calls made:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metrics = logging.metrics
  #
  #   metrics.all(request_limit: 10) do |metric|
  #   puts "#{metric.name}: #{metric.filter}"
  #   end
  # @param request_limit [Integer] The upper limit of API requests to
  #   make to load all metrics. Default is no limit.
  # @return [Enumerator]
  # @yield [metric] The block for accessing each metric.
  # @yieldparam metric [Metric] The metric object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric/list.rb#126
  def all(request_limit: T.unsafe(nil), &block); end

  # Retrieve the next page of metrics.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   metrics = logging.metrics
  #   if metrics.next?
  #   next_metrics = metrics.next
  #   end
  # @return [Sink::List]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric/list.rb#71
  def next; end

  # Whether there is a next page of metrics.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   metrics = logging.metrics
  #   if metrics.next?
  #   next_metrics = metrics.next
  #   end
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric/list.rb#52
  def next?; end

  # If not empty, indicates that there are more records that match
  # the request and this value should be passed to continue.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric/list.rb#28
  def token; end

  # If not empty, indicates that there are more records that match
  # the request and this value should be passed to continue.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric/list.rb#28
  def token=(_arg0); end

  protected

  # is available.
  #
  # @private Raise an error unless an active connection to the service
  #
  # source://google-cloud-logging//lib/google/cloud/logging/metric/list.rb#163
  def ensure_service!; end

  class << self
    # Google::Cloud::Logging::V2::ListLogMetricsResponse object.
    #
    # @private New Metric::List from a
    #
    # source://google-cloud-logging//lib/google/cloud/logging/metric/list.rb#146
    def from_grpc(grpc_list, service, max = T.unsafe(nil)); end
  end
end

# source://google-cloud-logging//lib/google/cloud/logging/middleware.rb#21
class Google::Cloud::Logging::Middleware
  # Create a new AppEngine logging Middleware.
  #
  # @param app [Rack Application] Rack application
  # @param logger [Google::Cloud::Logging::Logger] A logger to be used by
  #   this middleware. The middleware will be interacting with the logger
  #   to track Stackdriver request trace ID. It also properly sets
  #   env["rack.logger"] to this assigned logger for accessing. If not
  #   specified, a default logger with be used.
  # @param on_init [Proc] A callback to be invoked when the middleware is
  #   initialized. The callback takes no arguments. Optional.
  # @param kwargs [Hash] Hash of configuration settings. Used for
  #   backward API compatibility. See the [Configuration
  #   Guide](https://googleapis.dev/ruby/stackdriver/latest/file.INSTRUMENTATION_CONFIGURATION.html)
  #   for the prefered way to set configuration parameters.
  # @return [Google::Cloud::Logging::Middleware] A new
  #   Google::Cloud::Logging::Middleware instance
  #
  # source://google-cloud-logging//lib/google/cloud/logging/middleware.rb#57
  def initialize(app, logger: T.unsafe(nil), on_init: T.unsafe(nil), **kwargs); end

  # Rack middleware entry point. In most Rack based frameworks, a request
  # is served by one thread. So entry point, we associate the GCP request
  # trace_id with the current thread's object_id in logger. All the logs
  # written by logger beyond this point will carry this request's
  # trace_id. Untrack the trace_id with this thread upon exiting.
  #
  # @param env [Hash] Rack environment hash
  # @return [Rack::Response] The response from downstream Rack app
  #
  # source://google-cloud-logging//lib/google/cloud/logging/middleware.rb#90
  def call(env); end

  # Determine the log name override for this request, if any.
  #
  # @param env [Hash] The Rack environment.
  # @private
  # @return [String, nil] The log name override, or `nil` if there is
  #   no override.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/middleware.rb#123
  def get_log_name(env); end

  # Determine the trace ID for this request.
  #
  # @param env [Hash] The Rack environment.
  # @private
  # @return [String] The trace ID.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/middleware.rb#110
  def get_trace_id(env); end

  # The Google::Cloud::Logging::Logger instance
  #
  # source://google-cloud-logging//lib/google/cloud/logging/middleware.rb#36
  def logger; end

  private

  # @private Get Google::Cloud::Logging.configure
  #
  # source://google-cloud-logging//lib/google/cloud/logging/middleware.rb#299
  def configuration; end

  # Fallback to default configuration values if not defined already
  #
  # source://google-cloud-logging//lib/google/cloud/logging/middleware.rb#290
  def init_default_config; end

  # Consolidate configurations from various sources. Also set
  # instrumentation config parameters to default values if not set
  # already.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/middleware.rb#275
  def load_config(**kwargs); end

  class << self
    # Construct a monitored resource based on the given type and label if
    # both are provided. Otherwise, construct a default monitored resource
    # based on the current environment.
    #
    # @example If both type and labels are provided, it returns resource:
    #   rc = Google::Cloud::Logging::Middleware.build_monitored_resource(
    #   "aws_ec2_instance",
    #   {
    #   instance_id: "ec2-id",
    #   aws_account: "aws-id"
    #   }
    #   )
    #   rc.type   #=> "aws_ec2_instance"
    #   rc.labels #=> { instance_id: "ec2-id", aws_account: "aws-id" }
    # @example If running from GAE, returns default resource:
    #   rc = Google::Cloud::Logging::Middleware.build_monitored_resource
    #   rc.type   #=> "gae_app"
    #   rc.labels # { module_id: [GAE module name],
    #   #   version_id: [GAE module version] }
    # @example If running from GKE, returns default resource:
    #   rc = Google::Cloud::Logging::Middleware.build_monitored_resource
    #   rc.type   #=> "container"
    #   rc.labels # { cluster_name: [GKE cluster name],
    #   #   namespace_id: [GKE namespace_id] }
    # @example If running from GCE, return default resource:
    #   rc = Google::Cloud::Logging::Middleware.build_monitored_resource
    #   rc.type   #=> "gce_instance"
    #   rc.labels # { instance_id: [GCE VM instance id],
    #   #   zone: [GCE vm group zone] }
    # @example Otherwise default to generic "global" type:
    #   rc = Google::Cloud::Logging::Middleware.build_monitored_resource
    #   rc.type   #=> "global"
    #   rc.labels #=> {}
    # @param type [String] Type of Google::Cloud::Logging::Resource
    # @param labels [Hash<String, String>] Metadata lebels of
    #   Google::Cloud::Logging::Resource
    # @return [Google::Cloud::Logging::Resource] An Resource object with
    #   type and labels
    # @see https://cloud.google.com/logging/docs/api/v2/resource-list Monitored Resources and Services
    #
    # source://google-cloud-logging//lib/google/cloud/logging/middleware.rb#183
    def build_monitored_resource(type = T.unsafe(nil), labels = T.unsafe(nil)); end

    # @private Global logger object
    #
    # source://google-cloud-logging//lib/google/cloud/logging/middleware.rb#197
    def logger; end

    # @private Global logger object
    #
    # source://google-cloud-logging//lib/google/cloud/logging/middleware.rb#197
    def logger=(_arg0); end

    private

    # the correct monitoring resource types and labels.
    #
    # @example If running from GAE, returns default resource:
    #   rc = Google::Cloud::Logging::Middleware.send \
    #   :default_monitored_resource
    #   rc.type   #=> "gae_app"
    #   rc.labels # { module_id: [GAE module name],
    #   #   version_id: [GAE module version] }
    # @example If running from GKE, returns default resource:
    #   rc = Google::Cloud::Logging::Middleware.send \
    #   :default_monitored_resource
    #   rc.type   #=> "container"
    #   rc.labels # { cluster_name: [GKE cluster name],
    #   #   namespace_id: [GKE namespace_id] }
    # @example If running from GCE, return default resource:
    #   rc = Google::Cloud::Logging::Middleware.send \
    #   :default_monitored_resource
    #   rc.type   #=> "gce_instance"
    #   rc.labels # { instance_id: [GCE VM instance id],
    #   #   zone: [GCE vm group zone] }
    # @example Otherwise default to generic "global" type:
    #   rc = Google::Cloud::Logging::Middleware.send \
    #   :default_monitored_resource
    #   rc.type   #=> "global"
    #   rc.labels #=> {}
    # @private Extract information from current environment and construct
    # @return [Google::Cloud::Logging::Resource] An Resource object with
    #   correct type and labels
    # @see https://cloud.google.com/logging/docs/api/v2/resource-list Monitored Resources and Services
    #
    # source://google-cloud-logging//lib/google/cloud/logging/middleware.rb#237
    def default_monitored_resource; end
  end
end

# The default log name used to instantiate the default logger if one
# isn't provided.
#
# source://google-cloud-logging//lib/google/cloud/logging/middleware.rb#25
Google::Cloud::Logging::Middleware::DEFAULT_LOG_NAME = T.let(T.unsafe(nil), String)

# A default value for the log_name_map argument. Directs health check
# logs to a separate log name so they don't spam the main log.
#
# source://google-cloud-logging//lib/google/cloud/logging/middleware.rb#30
Google::Cloud::Logging::Middleware::DEFAULT_LOG_NAME_MAP = T.let(T.unsafe(nil), Hash)

# # Project
#
# Projects are top-level containers in Google Cloud Platform. They store
# information about billing and authorized users, and they control access
# to Stackdriver Logging resources. Each project has a friendly name and a
# unique ID. Projects can be created only in the [Google Developers
# Console](https://console.developers.google.com). See
# {Google::Cloud#logging}.
#
# See Google::Cloud#logging
#
# @example
#   require "google/cloud/logging"
#
#   logging = Google::Cloud::Logging.new
#   entries = logging.entries
#
# source://google-cloud-logging//lib/google/cloud/logging/project.rb#48
class Google::Cloud::Logging::Project
  # @private Creates a new Connection instance.
  # @return [Project] a new instance of Project
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#55
  def initialize(service); end

  # Creates an object that buffers, batches, and transmits log entries
  # efficiently. Writing log entries to this object is asynchronous and
  # will not block.
  #
  # Batches that cannot be delivered immediately are queued. When the
  # queue is full new batch requests will raise errors that can be
  # consumed using the {AsyncWriter#on_error} callback. This provides back
  # pressure in case the writer cannot keep up with requests.
  #
  # This object is thread-safe; it may accept write requests from
  # multiple threads simultaneously, and will serialize them when
  # executing in the background thread.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   async = logging.async_writer
  #
  #   entry1 = logging.entry payload: "Job started."
  #   entry2 = logging.entry payload: "Job completed."
  #
  #   labels = { job_size: "large", job_code: "red" }
  #   resource = logging.resource "gae_app",
  #   "module_id" => "1",
  #   "version_id" => "20150925t173233"
  #
  #   async.write_entries [entry1, entry2],
  #   log_name: "my_app_log",
  #   resource: resource,
  #   labels: labels
  # @param max_batch_count [Integer] The maximum number of log entries
  #   that may be buffered and sent in a batch.
  # @param max_batch_bytes [Integer] The maximum byte size of log entries
  #   that may be buffered and sent in a batch.
  # @param max_queue_size [Integer] The maximum number of pending
  #   write_entries requests that may be queued.
  # @param threads [Integer] The number of threads used to make
  #   batched write_entries requests. Default is 10.
  # @param partial_success [Boolean] Whether valid entries should be
  #   written even if some other entries fail due to `INVALID_ARGUMENT` or
  #   `PERMISSION_DENIED` errors when communicating to the Stackdriver
  #   Logging API.
  # @param interval [Numeric] The number of seconds to buffer log entries
  #   before a batch is written. Default is 5.
  # @return [Google::Cloud::Logging::AsyncWriter] an AsyncWriter object
  #   that buffers, batches, and transmits log entries efficiently.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#360
  def async_writer(max_batch_count: T.unsafe(nil), max_batch_bytes: T.unsafe(nil), max_queue_size: T.unsafe(nil), interval: T.unsafe(nil), threads: T.unsafe(nil), partial_success: T.unsafe(nil)); end

  # Creates a new logs-based metric for Google Cloud Monitoring.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metric = logging.create_metric "errors", "severity>=ERROR"
  # @param name [String] The client-assigned metric identifier. Metric
  #   identifiers are limited to 1000 characters and can include only the
  #   following characters: `A-Z`, `a-z`, `0-9`, and the special
  #   characters `_-.,+!*',()%/\`. The forward-slash character (`/`)
  #   denotes a hierarchy of name pieces, and it cannot be the first
  #   character of the name.
  # @param filter [String] An [advanced logs
  #   filter](https://cloud.google.com/logging/docs/view/advanced_filters).
  # @param description [String, nil] A description of this metric, which
  #   is used in documentation.
  # @return [Google::Cloud::Logging::Metric]
  # @see https://cloud.google.com/logging/docs/view/logs_based_metrics Logs-based Metrics
  # @see https://cloud.google.com/monitoring/docs Google Cloud Monitoring
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#790
  def create_metric(name, filter, description: T.unsafe(nil)); end

  # Creates a new project sink. When you create a sink, only new log
  # entries that match the sink's filter are exported. Stackdriver Logging
  # does not send previously-ingested log entries to the sink's
  # destination.
  #
  # Before creating the sink, ensure that you have granted the sink's
  # _unique writer identity_ permission to write logs to the destination.
  # See [Destination
  # permissions](https://cloud.google.com/logging/docs/export/configure_export_v2#dest-auth).
  #
  # @example
  #   require "google/cloud/storage"
  #
  #   storage = Google::Cloud::Storage.new
  #
  #   bucket = storage.create_bucket "my-logs-bucket"
  #
  #   # Grant owner permission to Stackdriver Logging service
  #   email = "cloud-logs@google.com"
  #   bucket.acl.add_owner "group-#{email}"
  #
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   sink = logging.create_sink "my-sink",
  #   "storage.googleapis.com/#{bucket.id}"
  # @overload create_sink
  # @return [Google::Cloud::Logging::Sink] a project sink
  # @see https://cloud.google.com/logging/docs/export Overview of logs exports
  # @see https://cloud.google.com/logging/docs/reference/v2/rpc/google.logging.v2#configservicev2 ConfigService API which includes sink methods
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#676
  def create_sink(name, destination, filter: T.unsafe(nil), unique_writer_identity: T.unsafe(nil), start_at: T.unsafe(nil), end_at: T.unsafe(nil), version: T.unsafe(nil)); end

  # Deletes a log and all its log entries. The log will reappear if it
  # receives new entries.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   logging.delete_log "my_app_log"
  # @param name [String] The name of the log, which may be the full path
  #   including the project ID (`projects/<project-id>/logs/<log-id>`), or
  #   just the short name (`<log-id>`), in which case the beginning of the
  #   path will be automatically prepended, using the ID of the current
  #   project.
  # @return [Boolean] Returns `true` if the log and all its log entries
  #   were deleted.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#508
  def delete_log(name); end

  # Lists log entries. Use this method to retrieve log entries from Cloud
  # Logging.
  #
  # @example You can also order the results by timestamp.
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   entries = logging.entries order: "timestamp desc"
  #   entries.each do |e|
  #   puts "[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}"
  #   end
  # @example Retrieve all log entries: (See {Entry::List#all})
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   entries = logging.entries
  #
  #   entries.all do |e|
  #   puts "[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}"
  #   end
  # @example You can use a filter to narrow results to a single log.
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   entries = logging.entries filter: "logName:syslog"
  #   entries.each do |e|
  #   puts "[#{e.timestamp}] #{e.payload.inspect}"
  #   end
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   entries = logging.entries
  #   entries.each do |e|
  #   puts "[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}"
  #   end
  # @param max [Integer] Maximum number of entries to return.
  # @param projects [String, Array<String>] One or more project IDs or
  #   project numbers from which to retrieve log entries. Each value will
  #   be formatted as a project resource name and added to any values
  #   passed to `resources`. If both `resources` and `projects` are `nil`,
  #   the ID of the receiving project instance will be used. This is
  #   deprecated in favor of `resources`.
  # @param filter [String] An [advanced logs
  #   filter](https://cloud.google.com/logging/docs/view/advanced_filters).
  #   The filter is compared against all log entries in the projects
  #   specified by `projects`. Only entries that match the filter are
  #   retrieved. An empty filter matches all log entries.
  # @param resources [String, Array<String>] One or more cloud resources
  #   from which to retrieve log entries. If both `resources` and
  #   `projects` are `nil`, the ID of the receiving project instance will
  #   be used. Examples: `"projects/my-project-1A"`,
  #   `"projects/1234567890"`.
  # @param order [String] How the results should be sorted. Presently, the
  #   only permitted values are "timestamp" (default) and "timestamp
  #   desc".
  # @param token [String] A previously-returned page token representing
  #   part of the larger set of results to view.
  # @return [Array<Google::Cloud::Logging::Entry>] (See
  #   {Google::Cloud::Logging::Entry::List})
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#146
  def entries(resources: T.unsafe(nil), filter: T.unsafe(nil), order: T.unsafe(nil), token: T.unsafe(nil), max: T.unsafe(nil), projects: T.unsafe(nil)); end

  # Creates an new Entry instance that may be populated and written to the
  # Stackdriver Logging service. The {Entry#resource} attribute is
  # pre-populated with a new {Google::Cloud::Logging::Resource} instance.
  # Equivalent to calling `Google::Cloud::Logging::Entry.new`.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   entry = logging.entry severity: :INFO, payload: "Job started."
  #
  #   logging.write_entries entry
  # @example Provide a hash to write a JSON payload to the log:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   payload = { "stats" => { "a" => 8, "b" => 12.5} }
  #   entry = logging.entry severity: :INFO, payload: payload
  #
  #   logging.write_entries entry
  # @param resource [Resource] The monitored resource associated with this
  #   log entry. See also {Entry#resource}.
  # @param timestamp [Time] The time the event described by the log entry
  #   occurred. If omitted, Stackdriver Logging will use the time the log
  #   entry is written. See also {Entry#timestamp}.
  # @param insert_id [String] A unique ID for the log entry. If you
  #   provide this field, the logging service considers other log entries
  #   in the same log with the same ID as duplicates which can be removed.
  #   If omitted, Stackdriver Logging will generate a unique ID for this
  #   log entry. See also {Entry#insert_id}.
  # @param labels [Hash{Symbol,String => String}] A hash of user-defined
  #   `key:value` pairs that provide additional information about the log
  #   entry. See also {Entry#labels=}.
  # @param payload [String, Hash] The log entry payload, represented as
  #   either a string, a hash (JSON), or a hash (protocol buffer). See
  #   also {Entry#payload}.
  # @param severity [Symbol] The severity level of the log entry. The
  #   default value is `DEFAULT`. See also {Entry#severity}.
  # @param log_name [String] The resource name of the log to which this
  #   log entry belongs. See also {Entry#log_name=}.
  # @return [Google::Cloud::Logging::Entry] a new Entry instance
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#207
  def entry(log_name: T.unsafe(nil), resource: T.unsafe(nil), timestamp: T.unsafe(nil), severity: T.unsafe(nil), insert_id: T.unsafe(nil), labels: T.unsafe(nil), payload: T.unsafe(nil)); end

  # Lists log entries. Use this method to retrieve log entries from Cloud
  # Logging.
  #
  # @example You can also order the results by timestamp.
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   entries = logging.entries order: "timestamp desc"
  #   entries.each do |e|
  #   puts "[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}"
  #   end
  # @example Retrieve all log entries: (See {Entry::List#all})
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   entries = logging.entries
  #
  #   entries.all do |e|
  #   puts "[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}"
  #   end
  # @example You can use a filter to narrow results to a single log.
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   entries = logging.entries filter: "logName:syslog"
  #   entries.each do |e|
  #   puts "[#{e.timestamp}] #{e.payload.inspect}"
  #   end
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   entries = logging.entries
  #   entries.each do |e|
  #   puts "[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}"
  #   end
  # @param max [Integer] Maximum number of entries to return.
  # @param projects [String, Array<String>] One or more project IDs or
  #   project numbers from which to retrieve log entries. Each value will
  #   be formatted as a project resource name and added to any values
  #   passed to `resources`. If both `resources` and `projects` are `nil`,
  #   the ID of the receiving project instance will be used. This is
  #   deprecated in favor of `resources`.
  # @param filter [String] An [advanced logs
  #   filter](https://cloud.google.com/logging/docs/view/advanced_filters).
  #   The filter is compared against all log entries in the projects
  #   specified by `projects`. Only entries that match the filter are
  #   retrieved. An empty filter matches all log entries.
  # @param resources [String, Array<String>] One or more cloud resources
  #   from which to retrieve log entries. If both `resources` and
  #   `projects` are `nil`, the ID of the receiving project instance will
  #   be used. Examples: `"projects/my-project-1A"`,
  #   `"projects/1234567890"`.
  # @param order [String] How the results should be sorted. Presently, the
  #   only permitted values are "timestamp" (default) and "timestamp
  #   desc".
  # @param token [String] A previously-returned page token representing
  #   part of the larger set of results to view.
  # @return [Array<Google::Cloud::Logging::Entry>] (See
  #   {Google::Cloud::Logging::Entry::List})
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#146
  def find_entries(resources: T.unsafe(nil), filter: T.unsafe(nil), order: T.unsafe(nil), token: T.unsafe(nil), max: T.unsafe(nil), projects: T.unsafe(nil)); end

  # Lists log names. Use this method to retrieve log names from Cloud
  # Logging.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   logs = logging.logs
  #   logs.each { |l| puts l }
  # @example Retrieve all log names: (See {Log::List#all})
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   logs = logging.logs
  #
  #   logs.all { |l| puts l }
  # @param resource [String] The cloud resource from which to retrieve log
  #   names. Optional. If `nil`, the ID of the receiving project instance
  #   will be used. Examples: `"projects/my-project-1A"`,
  #   `"projects/1234567890"`.
  # @param token [String] A previously-returned page token representing
  #   part of the larger set of results to view.
  # @param max [Integer] Maximum number of log names to return.
  # @return [Array<String>] A list of log names. For example,
  #   `projects/my-project/syslog` or
  #   `organizations/123/cloudresourcemanager.googleapis.com%2Factivity`.
  #   (See {Google::Cloud::Logging::Log::List})
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#479
  def find_log_names(resource: T.unsafe(nil), token: T.unsafe(nil), max: T.unsafe(nil)); end

  # Lists log names. Use this method to retrieve log names from Cloud
  # Logging.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   logs = logging.logs
  #   logs.each { |l| puts l }
  # @example Retrieve all log names: (See {Log::List#all})
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   logs = logging.logs
  #
  #   logs.all { |l| puts l }
  # @param resource [String] The cloud resource from which to retrieve log
  #   names. Optional. If `nil`, the ID of the receiving project instance
  #   will be used. Examples: `"projects/my-project-1A"`,
  #   `"projects/1234567890"`.
  # @param token [String] A previously-returned page token representing
  #   part of the larger set of results to view.
  # @param max [Integer] Maximum number of log names to return.
  # @return [Array<String>] A list of log names. For example,
  #   `projects/my-project/syslog` or
  #   `organizations/123/cloudresourcemanager.googleapis.com%2Factivity`.
  #   (See {Google::Cloud::Logging::Log::List})
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#479
  def find_logs(resource: T.unsafe(nil), token: T.unsafe(nil), max: T.unsafe(nil)); end

  # Retrieves metric by name.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metric = logging.metric "existing_metric"
  # @example By default `nil` will be returned if metric does not exist.
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metric = logging.metric "non_existing_metric" # nil
  # @param name [String] Name of a metric.
  # @return [Google::Cloud::Logging::Metric, nil] Returns `nil` if metric
  #   does not exist.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#817
  def find_metric(name); end

  # Retrieves the list of metrics belonging to the project.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metrics = logging.metrics
  #   metrics.each do |m|
  #   puts "#{m.name}: #{m.filter}"
  #   end
  # @example Retrieve all metrics: (See {Metric::List#all})
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metrics = logging.metrics
  #
  #   metrics.all do |m|
  #   puts "#{m.name}: #{m.filter}"
  #   end
  # @param token [String] A previously-returned page token representing
  #   part of the larger set of results to view.
  # @param max [Integer] Maximum number of metrics to return.
  # @return [Array<Google::Cloud::Logging::Metric>] (See
  #   {Google::Cloud::Logging::Metric::List})
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#757
  def find_metrics(token: T.unsafe(nil), max: T.unsafe(nil)); end

  # Retrieves the list of monitored resource descriptors that are used by
  # Stackdriver Logging.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   resource_descriptors = logging.resource_descriptors
  #   resource_descriptors.each do |rd|
  #   label_keys = rd.labels.map(&:key).join(", ")
  #   puts "#{rd.type} (#{label_keys})"
  #   end
  # @example Pagination:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   resource_descriptors = logging.resource_descriptors
  #
  #   resource_descriptors.all do |rd|
  #   puts rd.type
  #   end
  # @param token [String] A previously-returned page token representing
  #   part of the larger set of results to view.
  # @param max [Integer] Maximum number of resource descriptors to return.
  # @return [Array<Google::Cloud::Logging::ResourceDescriptor>] (See
  #   {Google::Cloud::Logging::ResourceDescriptor::List})
  # @see https://cloud.google.com/logging/docs/api/v2/resource-list Monitored Resources
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#548
  def find_resource_descriptors(token: T.unsafe(nil), max: T.unsafe(nil)); end

  # Retrieves a sink by name.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   sink = logging.sink "existing-sink"
  # @example By default `nil` will be returned if the sink does not exist.
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   sink = logging.sink "non-existing-sink" # nil
  # @param sink_name [String] Name of a sink.
  # @return [Google::Cloud::Logging::Sink, nil] Returns `nil` if the sink
  #   does not exist.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#718
  def find_sink(sink_name); end

  # Retrieves the list of sinks belonging to the project.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   sinks = logging.sinks
  #   sinks.each do |s|
  #   puts "#{s.name}: #{s.filter} -> #{s.destination}"
  #   end
  # @example Retrieve all sinks: (See {Sink::List#all})
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   sinks = logging.sinks
  #
  #   sinks.all do |s|
  #   puts "#{s.name}: #{s.filter} -> #{s.destination}"
  #   end
  # @param token [String] A previously-returned page token representing
  #   part of the larger set of results to view.
  # @param max [Integer] Maximum number of sinks to return.
  # @return [Array<Google::Cloud::Logging::Sink>] (See
  #   {Google::Cloud::Logging::Sink::List})
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#611
  def find_sinks(token: T.unsafe(nil), max: T.unsafe(nil)); end

  # Retrieves metric by name.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metric = logging.metric "existing_metric"
  # @example By default `nil` will be returned if metric does not exist.
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metric = logging.metric "non_existing_metric" # nil
  # @param name [String] Name of a metric.
  # @return [Google::Cloud::Logging::Metric, nil] Returns `nil` if metric
  #   does not exist.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#817
  def get_metric(name); end

  # Retrieves a sink by name.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   sink = logging.sink "existing-sink"
  # @example By default `nil` will be returned if the sink does not exist.
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   sink = logging.sink "non-existing-sink" # nil
  # @param sink_name [String] Name of a sink.
  # @return [Google::Cloud::Logging::Sink, nil] Returns `nil` if the sink
  #   does not exist.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#718
  def get_sink(sink_name); end

  # Lists log names. Use this method to retrieve log names from Cloud
  # Logging.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   logs = logging.logs
  #   logs.each { |l| puts l }
  # @example Retrieve all log names: (See {Log::List#all})
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   logs = logging.logs
  #
  #   logs.all { |l| puts l }
  # @param resource [String] The cloud resource from which to retrieve log
  #   names. Optional. If `nil`, the ID of the receiving project instance
  #   will be used. Examples: `"projects/my-project-1A"`,
  #   `"projects/1234567890"`.
  # @param token [String] A previously-returned page token representing
  #   part of the larger set of results to view.
  # @param max [Integer] Maximum number of log names to return.
  # @return [Array<String>] A list of log names. For example,
  #   `projects/my-project/syslog` or
  #   `organizations/123/cloudresourcemanager.googleapis.com%2Factivity`.
  #   (See {Google::Cloud::Logging::Log::List})
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#479
  def log_names(resource: T.unsafe(nil), token: T.unsafe(nil), max: T.unsafe(nil)); end

  # Creates a logger instance that is API-compatible with Ruby's standard
  # library [Logger](http://ruby-doc.org/stdlib/libdoc/logger/rdoc).
  #
  # The logger will create a new AsyncWriter object to transmit log
  # entries on a background thread.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   resource = logging.resource "gae_app",
  #   module_id: "1",
  #   version_id: "20150925t173233"
  #
  #   logger = logging.logger "my_app_log", resource, env: :production
  #   logger.info "Job started."
  # @example Provide a hash to write a JSON payload to the log:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   resource = logging.resource "gae_app",
  #   module_id: "1",
  #   version_id: "20150925t173233"
  #
  #   logger = logging.logger "my_app_log", resource, env: :production
  #
  #   payload = { "stats" => { "a" => 8, "b" => 12.5} }
  #   logger.info payload
  # @param log_name [String] A log resource name to be associated with the
  #   written log entries.
  # @param resource [Google::Cloud::Logging::Resource] The monitored
  #   resource to be associated with written log entries.
  # @param labels [Hash] A set of user-defined data to be associated with
  #   written log entries. Values can be strings or Procs which are
  #   functions of the request environment.
  # @return [Google::Cloud::Logging::Logger] a Logger object that can be
  #   used in place of a ruby standard library logger object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#443
  def logger(log_name, resource, labels = T.unsafe(nil)); end

  # Lists log names. Use this method to retrieve log names from Cloud
  # Logging.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   logs = logging.logs
  #   logs.each { |l| puts l }
  # @example Retrieve all log names: (See {Log::List#all})
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   logs = logging.logs
  #
  #   logs.all { |l| puts l }
  # @param resource [String] The cloud resource from which to retrieve log
  #   names. Optional. If `nil`, the ID of the receiving project instance
  #   will be used. Examples: `"projects/my-project-1A"`,
  #   `"projects/1234567890"`.
  # @param token [String] A previously-returned page token representing
  #   part of the larger set of results to view.
  # @param max [Integer] Maximum number of log names to return.
  # @return [Array<String>] A list of log names. For example,
  #   `projects/my-project/syslog` or
  #   `organizations/123/cloudresourcemanager.googleapis.com%2Factivity`.
  #   (See {Google::Cloud::Logging::Log::List})
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#479
  def logs(resource: T.unsafe(nil), token: T.unsafe(nil), max: T.unsafe(nil)); end

  # Retrieves metric by name.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metric = logging.metric "existing_metric"
  # @example By default `nil` will be returned if metric does not exist.
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metric = logging.metric "non_existing_metric" # nil
  # @param name [String] Name of a metric.
  # @return [Google::Cloud::Logging::Metric, nil] Returns `nil` if metric
  #   does not exist.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#817
  def metric(name); end

  # Retrieves the list of metrics belonging to the project.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metrics = logging.metrics
  #   metrics.each do |m|
  #   puts "#{m.name}: #{m.filter}"
  #   end
  # @example Retrieve all metrics: (See {Metric::List#all})
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metrics = logging.metrics
  #
  #   metrics.all do |m|
  #   puts "#{m.name}: #{m.filter}"
  #   end
  # @param token [String] A previously-returned page token representing
  #   part of the larger set of results to view.
  # @param max [Integer] Maximum number of metrics to return.
  # @return [Array<Google::Cloud::Logging::Metric>] (See
  #   {Google::Cloud::Logging::Metric::List})
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#757
  def metrics(token: T.unsafe(nil), max: T.unsafe(nil)); end

  # Creates an new Entry instance that may be populated and written to the
  # Stackdriver Logging service. The {Entry#resource} attribute is
  # pre-populated with a new {Google::Cloud::Logging::Resource} instance.
  # Equivalent to calling `Google::Cloud::Logging::Entry.new`.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   entry = logging.entry severity: :INFO, payload: "Job started."
  #
  #   logging.write_entries entry
  # @example Provide a hash to write a JSON payload to the log:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   payload = { "stats" => { "a" => 8, "b" => 12.5} }
  #   entry = logging.entry severity: :INFO, payload: payload
  #
  #   logging.write_entries entry
  # @param resource [Resource] The monitored resource associated with this
  #   log entry. See also {Entry#resource}.
  # @param timestamp [Time] The time the event described by the log entry
  #   occurred. If omitted, Stackdriver Logging will use the time the log
  #   entry is written. See also {Entry#timestamp}.
  # @param insert_id [String] A unique ID for the log entry. If you
  #   provide this field, the logging service considers other log entries
  #   in the same log with the same ID as duplicates which can be removed.
  #   If omitted, Stackdriver Logging will generate a unique ID for this
  #   log entry. See also {Entry#insert_id}.
  # @param labels [Hash{Symbol,String => String}] A hash of user-defined
  #   `key:value` pairs that provide additional information about the log
  #   entry. See also {Entry#labels=}.
  # @param payload [String, Hash] The log entry payload, represented as
  #   either a string, a hash (JSON), or a hash (protocol buffer). See
  #   also {Entry#payload}.
  # @param severity [Symbol] The severity level of the log entry. The
  #   default value is `DEFAULT`. See also {Entry#severity}.
  # @param log_name [String] The resource name of the log to which this
  #   log entry belongs. See also {Entry#log_name=}.
  # @return [Google::Cloud::Logging::Entry] a new Entry instance
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#207
  def new_entry(log_name: T.unsafe(nil), resource: T.unsafe(nil), timestamp: T.unsafe(nil), severity: T.unsafe(nil), insert_id: T.unsafe(nil), labels: T.unsafe(nil), payload: T.unsafe(nil)); end

  # Creates a new logs-based metric for Google Cloud Monitoring.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   metric = logging.create_metric "errors", "severity>=ERROR"
  # @param name [String] The client-assigned metric identifier. Metric
  #   identifiers are limited to 1000 characters and can include only the
  #   following characters: `A-Z`, `a-z`, `0-9`, and the special
  #   characters `_-.,+!*',()%/\`. The forward-slash character (`/`)
  #   denotes a hierarchy of name pieces, and it cannot be the first
  #   character of the name.
  # @param filter [String] An [advanced logs
  #   filter](https://cloud.google.com/logging/docs/view/advanced_filters).
  # @param description [String, nil] A description of this metric, which
  #   is used in documentation.
  # @return [Google::Cloud::Logging::Metric]
  # @see https://cloud.google.com/logging/docs/view/logs_based_metrics Logs-based Metrics
  # @see https://cloud.google.com/monitoring/docs Google Cloud Monitoring
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#790
  def new_metric(name, filter, description: T.unsafe(nil)); end

  # Creates a new monitored resource instance.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   resource = logging.resource "gae_app",
  #   "module_id" => "1",
  #   "version_id" => "20150925t173233"
  # @param type [String] The type of resource, as represented by a
  #   {ResourceDescriptor}.
  # @param labels [Hash] A set of labels that can be used to describe
  #   instances of this monitored resource type.
  # @return [Google::Cloud::Logging::Resource]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#574
  def new_resource(type, labels = T.unsafe(nil)); end

  # Creates a new project sink. When you create a sink, only new log
  # entries that match the sink's filter are exported. Stackdriver Logging
  # does not send previously-ingested log entries to the sink's
  # destination.
  #
  # Before creating the sink, ensure that you have granted the sink's
  # _unique writer identity_ permission to write logs to the destination.
  # See [Destination
  # permissions](https://cloud.google.com/logging/docs/export/configure_export_v2#dest-auth).
  #
  # @example
  #   require "google/cloud/storage"
  #
  #   storage = Google::Cloud::Storage.new
  #
  #   bucket = storage.create_bucket "my-logs-bucket"
  #
  #   # Grant owner permission to Stackdriver Logging service
  #   email = "cloud-logs@google.com"
  #   bucket.acl.add_owner "group-#{email}"
  #
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   sink = logging.create_sink "my-sink",
  #   "storage.googleapis.com/#{bucket.id}"
  # @overload create_sink
  # @return [Google::Cloud::Logging::Sink] a project sink
  # @see https://cloud.google.com/logging/docs/export Overview of logs exports
  # @see https://cloud.google.com/logging/docs/reference/v2/rpc/google.logging.v2#configservicev2 ConfigService API which includes sink methods
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#676
  def new_sink(name, destination, filter: T.unsafe(nil), unique_writer_identity: T.unsafe(nil), start_at: T.unsafe(nil), end_at: T.unsafe(nil), version: T.unsafe(nil)); end

  # The ID of the current project.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new(
  #   project_id: "my-project",
  #   credentials: "/path/to/keyfile.json"
  #   )
  #
  #   logging.project_id #=> "my-project"
  # @return [String] the Google Cloud project ID
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#74
  def project; end

  # The ID of the current project.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new(
  #   project_id: "my-project",
  #   credentials: "/path/to/keyfile.json"
  #   )
  #
  #   logging.project_id #=> "my-project"
  # @return [String] the Google Cloud project ID
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#74
  def project_id; end

  # Creates a new monitored resource instance.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   resource = logging.resource "gae_app",
  #   "module_id" => "1",
  #   "version_id" => "20150925t173233"
  # @param type [String] The type of resource, as represented by a
  #   {ResourceDescriptor}.
  # @param labels [Hash] A set of labels that can be used to describe
  #   instances of this monitored resource type.
  # @return [Google::Cloud::Logging::Resource]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#574
  def resource(type, labels = T.unsafe(nil)); end

  # Retrieves the list of monitored resource descriptors that are used by
  # Stackdriver Logging.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   resource_descriptors = logging.resource_descriptors
  #   resource_descriptors.each do |rd|
  #   label_keys = rd.labels.map(&:key).join(", ")
  #   puts "#{rd.type} (#{label_keys})"
  #   end
  # @example Pagination:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   resource_descriptors = logging.resource_descriptors
  #
  #   resource_descriptors.all do |rd|
  #   puts rd.type
  #   end
  # @param token [String] A previously-returned page token representing
  #   part of the larger set of results to view.
  # @param max [Integer] Maximum number of resource descriptors to return.
  # @return [Array<Google::Cloud::Logging::ResourceDescriptor>] (See
  #   {Google::Cloud::Logging::ResourceDescriptor::List})
  # @see https://cloud.google.com/logging/docs/api/v2/resource-list Monitored Resources
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#548
  def resource_descriptors(token: T.unsafe(nil), max: T.unsafe(nil)); end

  # @private The gRPC Service object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#51
  def service; end

  # @private The gRPC Service object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#51
  def service=(_arg0); end

  # Returns a shared AsyncWriter for this Project. If this method is
  # called multiple times, it will return the same object.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   async = logging.shared_async_writer
  #
  #   entry1 = logging.entry payload: "Job started."
  #   entry2 = logging.entry payload: "Job completed."
  #
  #   labels = { job_size: "large", job_code: "red" }
  #   resource = logging.resource "gae_app",
  #   "module_id" => "1",
  #   "version_id" => "20150925t173233"
  #
  #   async.write_entries [entry1, entry2],
  #   log_name: "my_app_log",
  #   resource: resource,
  #   labels: labels
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#395
  def shared_async_writer; end

  # Retrieves a sink by name.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   sink = logging.sink "existing-sink"
  # @example By default `nil` will be returned if the sink does not exist.
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   sink = logging.sink "non-existing-sink" # nil
  # @param sink_name [String] Name of a sink.
  # @return [Google::Cloud::Logging::Sink, nil] Returns `nil` if the sink
  #   does not exist.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#718
  def sink(sink_name); end

  # Retrieves the list of sinks belonging to the project.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   sinks = logging.sinks
  #   sinks.each do |s|
  #   puts "#{s.name}: #{s.filter} -> #{s.destination}"
  #   end
  # @example Retrieve all sinks: (See {Sink::List#all})
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   sinks = logging.sinks
  #
  #   sinks.all do |s|
  #   puts "#{s.name}: #{s.filter} -> #{s.destination}"
  #   end
  # @param token [String] A previously-returned page token representing
  #   part of the larger set of results to view.
  # @param max [Integer] Maximum number of sinks to return.
  # @return [Array<Google::Cloud::Logging::Sink>] (See
  #   {Google::Cloud::Logging::Sink::List})
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#611
  def sinks(token: T.unsafe(nil), max: T.unsafe(nil)); end

  # Writes log entries to the Stackdriver Logging service.
  #
  # If you write a collection of log entries, you can provide the log
  # name, resource, and/or labels hash to be used for all of the entries,
  # and omit these values from the individual entries.
  #
  # @example Optionally pass log name, resource, and labels for entries.
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   entry1 = logging.entry payload: "Job started."
  #   entry2 = logging.entry payload: "Job completed."
  #
  #   labels = { job_size: "large", job_code: "red" }
  #   resource = logging.resource "gae_app",
  #   "module_id" => "1",
  #   "version_id" => "20150925t173233"
  #
  #   logging.write_entries [entry1, entry2],
  #   log_name: "my_app_log",
  #   resource: resource,
  #   labels: labels,
  #   partial_success: true
  # @example Provide a hash to write a JSON payload to the log:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   payload = { "stats" => { "a" => 8, "b" => 12.5} }
  #
  #   entry = logging.entry payload: payload,
  #   log_name: "my_app_log"
  #   entry.resource.type = "gae_app"
  #   entry.resource.labels[:module_id] = "1"
  #   entry.resource.labels[:version_id] = "20150925t173233"
  #
  #   logging.write_entries entry
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   entry = logging.entry payload: "Job started.",
  #   log_name: "my_app_log"
  #   entry.resource.type = "gae_app"
  #   entry.resource.labels[:module_id] = "1"
  #   entry.resource.labels[:version_id] = "20150925t173233"
  #
  #   logging.write_entries entry
  # @param labels [Hash{Symbol,String => String}] User-defined `key:value`
  #   items that are added to the `labels` field of each log entry in
  #   `entries`, except when a log entry specifies its own `key:value`
  #   item with the same key. See also {Entry#labels=}.
  # @param partial_success [Boolean] Whether valid entries should be
  #   written even if some other entries fail due to `INVALID_ARGUMENT` or
  #   `PERMISSION_DENIED` errors when communicating to the Stackdriver
  #   Logging API.
  # @param log_name [String] A default log ID for those log entries in
  #   `entries` that do not specify their own `log_name`. See also
  #   {Entry#log_name=}.
  # @param entries [Google::Cloud::Logging::Entry, Array<Google::Cloud::Logging::Entry>] One or more entry
  #   objects to write. The log entries must have values for all required
  #   fields.
  # @param resource [Resource] A default monitored resource for those log
  #   entries in entries that do not specify their own resource. See also
  #   {Entry#resource}.
  # @return [Boolean] Returns `true` if the entries were written.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#299
  def write_entries(entries, log_name: T.unsafe(nil), resource: T.unsafe(nil), labels: T.unsafe(nil), partial_success: T.unsafe(nil)); end

  protected

  # available.
  #
  # @private Raise an error unless an active connection to the service is
  #
  # source://google-cloud-logging//lib/google/cloud/logging/project.rb#832
  def ensure_service!; end
end

# Railtie
#
# Adds the {Google::Cloud::Logging::Middleware} to Rack in a Rails
# environment. The middleware will set `env['rack.logger']` to a
# {Google::Cloud::Logging::Logger} instance to be used by the Rails
# application.
#
# The middleware is loaded only when certain conditions are met. These
# conditions are when the configuration
# `Google::Cloud.configure.use_logging` (also available as
# `Rails.application.config.google_cloud.use_logging` for a Rails
# application) is set to `true`, or, if the configuration is left unset
# but `Rails.env.production?` is `true`.
#
# When loaded, the {Google::Cloud::Logging::Middleware} will be inserted
# before the `Rails::Rack::Logger Middleware`, which allows it to set the
# `env['rack.logger']` in place of Rails's default logger.
# See the [Configuration
# Guide](https://googleapis.dev/ruby/stackdriver/latest/file.INSTRUMENTATION_CONFIGURATION.html)
# on how to configure the Railtie and Middleware.
#
# source://google-cloud-logging//lib/google/cloud/logging/rails.rb#47
class Google::Cloud::Logging::Railtie < ::Rails::Railtie
  class << self
    # configuration. Also consolidate the `use_logging` setting by verifying
    # credentials and Rails environment. The `use_logging` setting will be
    # true if credentials are valid, and the setting is manually set to true
    # or Rails is in production environment.
    #
    # @param config [Rails::Railtie::Configuration] The
    #   Rails.application.config
    # @private Consolidate Rails configuration into Logging instrumentation
    #
    # source://google-cloud-logging//lib/google/cloud/logging/rails.rb#138
    def consolidate_rails_config(config); end

    # insert the Middleware.
    #
    # @private Init Logging integration for Rails. Setup configuration and
    #
    # source://google-cloud-logging//lib/google/cloud/logging/rails.rb#65
    def init_middleware(app); end

    # This should be called once the application determines that it is safe
    # to start background threads and open gRPC connections. It informs the
    # middleware system that it is safe to use Google Cloud Logging. This is
    # called during Rails initialization when the
    # `set_default_logger_on_rails_init` configuration is set.
    #
    # Generally, this matters if the application forks worker processes;
    # this method should be called only after workers are forked, since
    # threads and network connections interact badly with fork. For example,
    # when running Puma in [clustered
    # mode](https://github.com/puma/puma#clustered-mode), this method should
    # be called in an `on_worker_boot` block.
    #
    # If the application does no forking, this method can be called any time
    # early in the application initialization process. Or by setting the
    # `set_default_logger_on_rails_init` configuration.
    #
    # If the `set_default_logger_on_rails_init` configuration is not set,
    # and {Railtie.set_default_logger} is not called in a post-fork hook,
    # the default Rails logger object will not be set to use the Google
    # Cloud Logging Logger object. For best results, an application should
    # call this method at the appropriate time, such as a post-fork hook.
    #
    # source://google-cloud-logging//lib/google/cloud/logging/rails.rb#115
    def set_default_logger; end

    private

    # Fallback to default config values if config parameters not provided.
    #
    # source://google-cloud-logging//lib/google/cloud/logging/rails.rb#188
    def init_default_config; end

    # configuration.
    #
    # @private Merge Rails configuration into Logging instrumentation
    #
    # source://google-cloud-logging//lib/google/cloud/logging/rails.rb#161
    def merge_rails_config(rails_config); end

    # @private Verify credentials
    # @return [Boolean]
    #
    # source://google-cloud-logging//lib/google/cloud/logging/rails.rb#195
    def valid_credentials?(project_id, credentials); end
  end
end

# # Resource
#
# A monitored resource is an abstraction used to characterize many kinds
# of objects in your cloud infrastructure, including Google Cloud SQL
# databases, Google App Engine apps, Google Compute Engine virtual machine
# instances, and so forth. Each of those kinds of objects is described by
# an instance of {ResourceDescriptor}.
#
# For use with {Google::Cloud::Logging::Entry#resource},
# {Google::Cloud::Logging::Project#resource}, and
# {Google::Cloud::Logging::Project#write_entries}.
#
# @example
#   require "google/cloud/logging"
#
#   logging = Google::Cloud::Logging.new
#   resource = logging.resource "gae_app",
#   "module_id" => "1",
#   "version_id" => "20150925t173233"
#
# source://google-cloud-logging//lib/google/cloud/logging/resource.rb#40
class Google::Cloud::Logging::Resource
  # Create an empty Resource object.
  #
  # @return [Resource] a new instance of Resource
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource.rb#43
  def initialize; end

  # @private Determines if the Resource has any data.
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource.rb#58
  def empty?; end

  # A set of labels that can be used to describe instances of this
  # monitored resource type.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource.rb#54
  def labels; end

  # A set of labels that can be used to describe instances of this
  # monitored resource type.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource.rb#54
  def labels=(_arg0); end

  # object.
  #
  # @private Exports the Resource to a Google::Api::MonitoredResource
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource.rb#65
  def to_grpc; end

  # The type of resource, as represented by a {ResourceDescriptor}.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource.rb#49
  def type; end

  # The type of resource, as represented by a {ResourceDescriptor}.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource.rb#49
  def type=(_arg0); end

  class << self
    # @private New Resource from a Google::Api::MonitoredResource object.
    #
    # source://google-cloud-logging//lib/google/cloud/logging/resource.rb#75
    def from_grpc(grpc); end
  end
end

# # ResourceDescriptor
#
# Describes a type of monitored resource supported by Stackdriver Logging.
# Each ResourceDescriptor has a type name, such as `cloudsql_database`,
# `gae_app`, or `gce_instance`. It also specifies a set of labels that
# must all be given values in a {Resource} instance to represent an actual
# instance of the type.
#
# ResourceDescriptor instances are read-only. You cannot create your own
# instances, but you can list them with {Project#resource_descriptors}.
#
# @example
#   require "google/cloud/logging"
#
#   logging = Google::Cloud::Logging.new
#   resource_descriptor = logging.resource_descriptors.first
#   resource_descriptor.type #=> "cloudsql_database"
#   resource_descriptor.name #=> "Cloud SQL Database"
#   resource_descriptor.labels.map &:key #=> ["database_id", "zone"]
#
# source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor/list.rb#21
class Google::Cloud::Logging::ResourceDescriptor
  # @private New ResourceDescriptor from a Google API Client object.
  # @return [ResourceDescriptor] a new instance of ResourceDescriptor
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor.rb#45
  def initialize; end

  # A detailed description of the monitored resource type, which is used
  # in documentation.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor.rb#61
  def description; end

  # A set of definitions of the labels that can be used to describe
  # instances of this monitored resource type. For example, Cloud SQL
  # databases must be labeled with their `database_id` and their `region`.
  #
  # @return [Array<LabelDescriptor>]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor.rb#70
  def labels; end

  # A display name for the monitored resource type. For example,
  # `Cloud SQL Database`.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor.rb#56
  def name; end

  # The monitored resource type. For example, `cloudsql_database`.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor.rb#51
  def type; end

  class << self
    # Google::Api::MonitoredResourceDescriptor object.
    #
    # @private New ResourceDescriptor from a
    #
    # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor.rb#75
    def from_grpc(grpc); end
  end
end

# # LabelDescriptor
#
# A definition of a label that can be used to describe instances of a
# {Resource}. For example, Cloud SQL databases must be labeled with
# their `database_id`. See {ResourceDescriptor#labels}.
#
# @example
#   require "google/cloud/logging"
#
#   logging = Google::Cloud::Logging.new
#   resource_descriptor = logging.resource_descriptors.first
#   label_descriptor = resource_descriptor.labels.first
#   label_descriptor.key #=> "database_id"
#   label_descriptor.description #=> "The ID of the database."
#
# source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor.rb#103
class Google::Cloud::Logging::ResourceDescriptor::LabelDescriptor
  # A human-readable description for the label.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor.rb#118
  def description; end

  # The key (name) of the label.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor.rb#106
  def key; end

  # The type of data that can be assigned to the label.
  #
  # @return [Symbol, nil] Returns `:string`, `:boolean`, `:integer`, or
  #   `nil` if there is no type.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor.rb#114
  def type; end

  class << self
    # object.
    #
    # @private New LabelDescriptor from a Google::Api::LabelDescriptor
    #
    # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor.rb#123
    def from_grpc(grpc); end
  end
end

# ResourceDescriptor::List is a special case Array with additional
# values.
#
# source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor/list.rb#25
class Google::Cloud::Logging::ResourceDescriptor::List
  # ResourceDescriptor instances.
  #
  # @private Create a new ResourceDescriptor::List with an array of
  # @return [List] a new instance of List
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor/list.rb#34
  def initialize(arr = T.unsafe(nil)); end

  # Retrieves remaining results by repeatedly invoking {#next} until
  # {#next?} returns `false`. Calls the given block once for each
  # result, which is passed as the argument to the block.
  #
  # An Enumerator is returned if no block is given.
  #
  # This method will make repeated API calls until all remaining results
  # are retrieved. (Unlike `#each`, for example, which merely iterates
  # over the results returned by a single API call.) Use with caution.
  #
  # @example Iterating each resource descriptor by passing a block:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   resource_descriptors = logging.resource_descriptors
  #
  #   resource_descriptors.all do |rd|
  #   puts rd.type
  #   end
  # @example Using the enumerator by not passing a block:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   resource_descriptors = logging.resource_descriptors
  #
  #   all_types = resource_descriptors.all.map do |rd|
  #   rd.type
  #   end
  # @example Limit the number of API calls made:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   resource_descriptors = logging.resource_descriptors
  #
  #   resource_descriptors.all(request_limit: 10) do |rd|
  #   puts rd.type
  #   end
  # @param request_limit [Integer] The upper limit of API requests to
  #   make to load all resource descriptors. Default is no limit.
  # @return [Enumerator]
  # @yield [resource_descriptor] The block for accessing each resource
  #   descriptor.
  # @yieldparam resource_descriptor [ResourceDescriptor] The resource
  #   descriptor object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor/list.rb#131
  def all(request_limit: T.unsafe(nil), &block); end

  # Retrieve the next page of resource descriptors.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   resource_descriptors = logging.resource_descriptors
  #   if resource_descriptors.next?
  #   next_resource_descriptors = resource_descriptors.next
  #   end
  # @return [Sink::List]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor/list.rb#72
  def next; end

  # Whether there is a next page of resource descriptors.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   resource_descriptors = logging.resource_descriptors
  #   if resource_descriptors.next?
  #   next_resource_descriptors = resource_descriptors.next
  #   end
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor/list.rb#53
  def next?; end

  # If not empty, indicates that there are more records that match
  # the request and this value should be passed to continue.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor/list.rb#29
  def token; end

  # If not empty, indicates that there are more records that match
  # the request and this value should be passed to continue.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor/list.rb#29
  def token=(_arg0); end

  protected

  # Raise an error unless an active service is available.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor/list.rb#168
  def ensure_service!; end

  class << self
    # Google::Cloud::Logging::V2::ListMonitoredResourceDescriptorsResponse
    # object.
    #
    # @private New ResourceDescriptor::List from a
    #
    # source://google-cloud-logging//lib/google/cloud/logging/resource_descriptor/list.rb#152
    def from_grpc(grpc_list, service, max = T.unsafe(nil)); end
  end
end

# methods.
#
# @private Represents the gRPC Logging service, including all the API
#
# source://google-cloud-logging//lib/google/cloud/logging/service.rb#27
class Google::Cloud::Logging::Service
  # Creates a new Service instance.
  #
  # @return [Service] a new instance of Service
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#35
  def initialize(project, credentials, timeout: T.unsafe(nil), host: T.unsafe(nil)); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#171
  def create_metric(name, filter, description); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#134
  def create_sink(name, destination, filter, unique_writer_identity: T.unsafe(nil)); end

  # Returns the value of attribute credentials.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#29
  def credentials; end

  # Sets the attribute credentials
  #
  # @param value the value to set the attribute credentials to.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#29
  def credentials=(_arg0); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#120
  def delete_log(name); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#191
  def delete_metric(name); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#160
  def delete_sink(name); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#179
  def get_metric(name); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#145
  def get_sink(name); end

  # Returns the value of attribute host.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#31
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#31
  def host=(_arg0); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#202
  def inspect; end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#84
  def list_entries(resources: T.unsafe(nil), filter: T.unsafe(nil), order: T.unsafe(nil), token: T.unsafe(nil), max: T.unsafe(nil), projects: T.unsafe(nil)); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#113
  def list_logs(resource: T.unsafe(nil), token: T.unsafe(nil), max: T.unsafe(nil)); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#164
  def list_metrics(token: T.unsafe(nil), max: T.unsafe(nil)); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#124
  def list_resource_descriptors(token: T.unsafe(nil), max: T.unsafe(nil)); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#129
  def list_sinks(token: T.unsafe(nil), max: T.unsafe(nil)); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#195
  def log_path(log_name); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#42
  def logging; end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#70
  def metrics; end

  # Returns the value of attribute mocked_logging.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#54
  def mocked_logging; end

  # Sets the attribute mocked_logging
  #
  # @param value the value to set the attribute mocked_logging to.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#54
  def mocked_logging=(_arg0); end

  # Returns the value of attribute mocked_metrics.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#82
  def mocked_metrics; end

  # Sets the attribute mocked_metrics
  #
  # @param value the value to set the attribute mocked_metrics to.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#82
  def mocked_metrics=(_arg0); end

  # Returns the value of attribute mocked_sinks.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#68
  def mocked_sinks; end

  # Sets the attribute mocked_sinks
  #
  # @param value the value to set the attribute mocked_sinks to.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#68
  def mocked_sinks=(_arg0); end

  # Returns the value of attribute project.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#28
  def project; end

  # Sets the attribute project
  #
  # @param value the value to set the attribute project to.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#28
  def project=(_arg0); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#56
  def sinks; end

  # Returns the value of attribute timeout.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#30
  def timeout; end

  # Sets the attribute timeout
  #
  # @param value the value to set the attribute timeout to.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#30
  def timeout=(_arg0); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#183
  def update_metric(name, description, filter); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#149
  def update_sink(name, destination, filter, unique_writer_identity: T.unsafe(nil)); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#98
  def write_entries(entries, log_name: T.unsafe(nil), resource: T.unsafe(nil), labels: T.unsafe(nil), partial_success: T.unsafe(nil)); end

  protected

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#217
  def metric_path(metric_name); end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#208
  def project_path; end

  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#212
  def sink_path(sink_name); end

  # @private Get a Google::Protobuf::Timestamp object from a Time object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#224
  def time_to_timestamp(time); end

  # @private Get a Time object from a Google::Protobuf::Timestamp object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/service.rb#234
  def timestamp_to_time(timestamp); end
end

# # Sink
#
# Used to export log entries outside Stackdriver Logging. When you create
# a sink, new log entries are exported. Stackdriver Logging does not send
# previously-ingested log entries to the sink's destination.
#
# A logs filter controls which log entries are exported.
#
# Before creating the sink, ensure that you have granted the sink's
# _unique writer identity_ permission to write logs to the destination.
# See [Destination
# permissions](https://cloud.google.com/logging/docs/export/configure_export_v2#dest-auth).
#
# You can retrieve an existing sink with {Project#sink}.
#
# @example
#   require "google/cloud/storage"
#
#   storage = Google::Cloud::Storage.new
#   bucket = storage.create_bucket "my-logs-bucket"
#
#   # Grant owner permission to Stackdriver Logging service
#   email = "cloud-logs@google.com"
#   bucket.acl.add_owner "group-#{email}"
#
#   require "google/cloud/logging"
#
#   logging = Google::Cloud::Logging.new
#   sink = logging.create_sink "my-sink",
#   "storage.googleapis.com/#{bucket.id}"
# @see https://cloud.google.com/logging/docs/export Overview of logs exports
# @see https://cloud.google.com/logging/docs/reference/v2/rpc/google.logging.v2#configservicev2 ConfigService API which includes sink methods
#
# source://google-cloud-logging//lib/google/cloud/logging/sink/list.rb#21
class Google::Cloud::Logging::Sink
  # @private Create an empty Sink object.
  # @return [Sink] a new instance of Sink
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#69
  def initialize; end

  # Permanently deletes the logs-based sink.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   sink = logging.sink "severe_errors"
  #   sink.delete
  # @return [Boolean] Returns `true` if the sink was deleted.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#271
  def delete; end

  # The export destination. See [Properties of
  # Sinks](https://cloud.google.com/logging/docs/export#sink-terms).
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#85
  def destination; end

  # Updates the export destination. See [Properties of
  # Sinks](https://cloud.google.com/logging/docs/export#sink-terms).
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#92
  def destination=(destination); end

  # **Deprecated.** Time at which this sink will stop exporting log
  # entries. If this value is present, then log entries are exported only
  # if the log entry's timestamp is less than `end_at`. Optional.
  #
  # @deprecated This field is ignored when creating or updating sinks.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#198
  def end_at; end

  # **Deprecated.** Sets the time at which this sink will stop exporting
  # log entries. If this value is present, then log entries are exported
  # only if the log entry's timestamp is less than `end_at`. Optional.
  #
  # @deprecated This field is ignored when creating or updating sinks.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#210
  def end_at=(_new_end_at); end

  # **Deprecated.** Time at which this sink will stop exporting log
  # entries. If this value is present, then log entries are exported only
  # if the log entry's timestamp is less than `end_at`. Optional.
  #
  # @deprecated This field is ignored when creating or updating sinks.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#198
  def end_time; end

  # **Deprecated.** Sets the time at which this sink will stop exporting
  # log entries. If this value is present, then log entries are exported
  # only if the log entry's timestamp is less than `end_at`. Optional.
  #
  # @deprecated This field is ignored when creating or updating sinks.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#210
  def end_time=(_new_end_at); end

  # An [advanced logs
  # filter](https://cloud.google.com/logging/docs/view/advanced-queries)
  # that defines the log entries to be exported. The filter must be
  # consistent with the log entry format designed by the `version`
  # parameter, regardless of the format of the log entry that was
  # originally written to Stackdriver Logging.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#103
  def filter; end

  # Updates the [advanced logs
  # filter](https://cloud.google.com/logging/docs/view/advanced-queries)
  # that defines the log entries to be exported. The filter must be
  # consistent with the log entry format designed by the `version`
  # parameter, regardless of the format of the log entry that was
  # originally written to Stackdriver Logging.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#114
  def filter=(filter); end

  # @private The Google API Client object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#65
  def grpc; end

  # @private The Google API Client object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#65
  def grpc=(_arg0); end

  # The client-assigned sink identifier. Sink identifiers are limited to
  # 1000 characters and can include only the following characters: `A-Z`,
  # `a-z`, `0-9`, and the special characters `_-.`.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#78
  def name; end

  # Reloads the logs-based sink with current data from the Logging
  # service.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#253
  def refresh!; end

  # Reloads the logs-based sink with current data from the Logging
  # service.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#253
  def reload!; end

  # Updates the logs-based sink.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   sink = logging.sink "severe_errors"
  #   sink.filter = "logName:syslog AND severity>=ERROR"
  #   sink.save
  # @param unique_writer_identity [Boolean] Whether the sink will have a
  #   dedicated service account returned in the sink's `writer_identity`.
  #   Set this field to be true to export logs from one project to a
  #   different project. This field is ignored for non-project sinks
  #   (e.g. organization sinks) because those sinks are required to have
  #   dedicated service accounts. Optional.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#243
  def save(unique_writer_identity: T.unsafe(nil)); end

  # @private The gRPC Service object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#61
  def service; end

  # @private The gRPC Service object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#61
  def service=(_arg0); end

  # **Deprecated.** The time at which this sink will begin exporting log
  # entries. If this value is present, then log entries are exported only
  # if `start_at` is less than the log entry's timestamp. Optional.
  #
  # @deprecated This field is ignored when creating or updating sinks.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#175
  def start_at; end

  # **Deprecated.** Sets the time at which this sink will begin exporting
  # log entries. If this value is present, then log entries are exported
  # only if `start_at` is less than the log entry's timestamp. Optional.
  #
  # @deprecated This field is ignored when creating or updating sinks.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#187
  def start_at=(_new_start_at); end

  # **Deprecated.** The time at which this sink will begin exporting log
  # entries. If this value is present, then log entries are exported only
  # if `start_at` is less than the log entry's timestamp. Optional.
  #
  # @deprecated This field is ignored when creating or updating sinks.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#175
  def start_time; end

  # **Deprecated.** Sets the time at which this sink will begin exporting
  # log entries. If this value is present, then log entries are exported
  # only if `start_at` is less than the log entry's timestamp. Optional.
  #
  # @deprecated This field is ignored when creating or updating sinks.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#187
  def start_time=(_new_start_at); end

  # Helper to determine if the sink's version is
  # `VERSION_FORMAT_UNSPECIFIED`.
  #
  # @deprecated The v2 format is used by default and cannot be changed.
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#146
  def unspecified?; end

  # Helper to determine if the sink's version is `V1`.
  #
  # @deprecated The v2 format is used by default and cannot be changed.
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#164
  def v1?; end

  # Helper to determine if the sink's version is `V2`.
  #
  # @deprecated The v2 format is used by default and cannot be changed.
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#155
  def v2?; end

  # **Deprecated.** The log entry version used when exporting log entries
  # from this sink. This version does not have to correspond to the
  # version of the log entry when it was written to Stackdriver Logging.
  #
  # @deprecated The v2 format is used by default and cannot be changed.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#124
  def version; end

  # **Deprecated.** Updates the log entry version used when exporting log
  # entries from this sink. This version does not have to correspond to
  # the version of the log entry when it was written to Stackdriver
  # Logging. Accepted values are `:VERSION_FORMAT_UNSPECIFIED`, `:V2`, and
  # `:V1`.
  #
  # @deprecated The v2 format is used by default and cannot be changed.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#137
  def version=(_version); end

  # An IAM identity (a service account or group) that will write exported
  # log entries to the destination on behalf of Stackdriver Logging. You
  # must grant this identity write-access to the destination. Consult the
  # destination service's documentation to determine the exact role that
  # must be granted.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#221
  def writer_identity; end

  protected

  # available.
  #
  # @private Raise an error unless an active connection to the service is
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#291
  def ensure_service!; end

  # @private Get a Google::Protobuf::Timestamp object from a Time object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#297
  def time_to_timestamp(time); end

  # @private Get a Time object from a Google::Protobuf::Timestamp object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#307
  def timestamp_to_time(timestamp); end

  class << self
    # @private New Sink from a Google::Cloud::Logging::V2::LogSink object.
    #
    # source://google-cloud-logging//lib/google/cloud/logging/sink.rb#279
    def from_grpc(grpc, service); end
  end
end

# Sink::List is a special case Array with additional values.
#
# source://google-cloud-logging//lib/google/cloud/logging/sink/list.rb#24
class Google::Cloud::Logging::Sink::List
  # @private Create a new Sink::List with an array of Sink instances.
  # @return [List] a new instance of List
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink/list.rb#32
  def initialize(arr = T.unsafe(nil)); end

  # Retrieves remaining results by repeatedly invoking {#next} until
  # {#next?} returns `false`. Calls the given block once for each
  # result, which is passed as the argument to the block.
  #
  # An Enumerator is returned if no block is given.
  #
  # This method will make repeated API calls until all remaining results
  # are retrieved. (Unlike `#each`, for example, which merely iterates
  # over the results returned by a single API call.) Use with caution.
  #
  # @example Iterating each sink by passing a block:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   sinks = logging.sinks
  #
  #   sinks.all do |sink|
  #   puts "#{sink.name}: #{sink.filter} -> #{sink.destination}"
  #   end
  # @example Using the enumerator by not passing a block:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   sinks = logging.sinks
  #
  #   all_names = sinks.all.map do |sink|
  #   sink.name
  #   end
  # @example Limit the number of API calls made:
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #   sinks = logging.sinks
  #
  #   sinks.all(request_limit: 10) do |sink|
  #   puts "#{sink.name}: #{sink.filter} -> #{sink.destination}"
  #   end
  # @param request_limit [Integer] The upper limit of API requests to
  #   make to load all sinks. Default is no limit.
  # @return [Enumerator]
  # @yield [sink] The block for accessing each sink.
  # @yieldparam sink [Sink] The sink object.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink/list.rb#125
  def all(request_limit: T.unsafe(nil), &block); end

  # Retrieve the next page of sinks.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   sinks = logging.sinks
  #   if sinks.next?
  #   next_sinks = sinks.next
  #   end
  # @return [Sink::List]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink/list.rb#70
  def next; end

  # Whether there is a next page of sinks.
  #
  # @example
  #   require "google/cloud/logging"
  #
  #   logging = Google::Cloud::Logging.new
  #
  #   sinks = logging.sinks
  #   if sinks.next?
  #   next_sinks = sinks.next
  #   end
  # @return [Boolean]
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink/list.rb#51
  def next?; end

  # If not empty, indicates that there are more records that match
  # the request and this value should be passed to continue.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink/list.rb#28
  def token; end

  # If not empty, indicates that there are more records that match
  # the request and this value should be passed to continue.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink/list.rb#28
  def token=(_arg0); end

  protected

  # Raise an error unless an active service is available.
  #
  # source://google-cloud-logging//lib/google/cloud/logging/sink/list.rb#161
  def ensure_service!; end

  class << self
    # Google::Cloud::Logging::V2::ListSinksResponse object.
    #
    # @private New Sink::List from a
    #
    # source://google-cloud-logging//lib/google/cloud/logging/sink/list.rb#145
    def from_grpc(grpc_list, service, max = T.unsafe(nil)); end
  end
end

# source://google-cloud-logging//lib/google/cloud/logging/version.rb#19
Google::Cloud::Logging::VERSION = T.let(T.unsafe(nil), String)
