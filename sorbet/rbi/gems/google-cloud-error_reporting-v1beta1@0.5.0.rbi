# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-cloud-error_reporting-v1beta1` gem.
# Please instead update this file by running `bin/tapioca gem google-cloud-error_reporting-v1beta1`.

# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/version.rb#20
module Google; end

# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/version.rb#21
module Google::Cloud
  # source://google-cloud-error_reporting/0.42.2/lib/google-cloud-error_reporting.rb#60
  def error_reporting(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # source://google-cloud-logging/2.3.2/lib/google-cloud-logging.rb#67
  def logging(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # source://google-cloud-storage/1.44.0/lib/google-cloud-storage.rb#76
  def storage(scope: T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil), open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), send_timeout: T.unsafe(nil), max_elapsed_time: T.unsafe(nil), base_interval: T.unsafe(nil), max_interval: T.unsafe(nil), multiplier: T.unsafe(nil)); end

  # source://google-cloud-trace/0.42.1/lib/google-cloud-trace.rb#60
  def trace(scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

  class << self
    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#158
    def auto_load_files; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#128
    def auto_load_gems; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#91
    def configure; end

    # source://google-cloud-env/1.6.0/lib/google/cloud/env.rb#490
    def env; end

    # source://google-cloud-error_reporting/0.42.2/lib/google-cloud-error_reporting.rb#105
    def error_reporting(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#103
    def init_configuration; end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#142
    def loaded_files; end

    # source://google-cloud-logging/2.3.2/lib/google-cloud-logging.rb#109
    def logging(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-core/1.6.0/lib/google/cloud.rb#62
    def new(project_id = T.unsafe(nil), credentials = T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # source://google-cloud-storage/1.44.0/lib/google-cloud-storage.rb#135
    def storage(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil), open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), send_timeout: T.unsafe(nil), max_elapsed_time: T.unsafe(nil), base_interval: T.unsafe(nil), max_interval: T.unsafe(nil), multiplier: T.unsafe(nil)); end

    # source://google-cloud-trace/0.42.1/lib/google-cloud-trace.rb#101
    def trace(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil)); end
  end
end

# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/version.rb#22
module Google::Cloud::ErrorReporting
  class << self
    # source://google-cloud-error_reporting/0.42.2/lib/google/cloud/error_reporting.rb#160
    def configure; end

    # source://google-cloud-error_reporting/0.42.2/lib/google/cloud/error_reporting.rb#266
    def default_reporter(&block); end

    # source://google-cloud-error_reporting/0.42.2/lib/google/cloud/error_reporting.rb#79
    def new(project_id: T.unsafe(nil), credentials: T.unsafe(nil), scope: T.unsafe(nil), timeout: T.unsafe(nil), endpoint: T.unsafe(nil), project: T.unsafe(nil), keyfile: T.unsafe(nil)); end

    # source://google-cloud-error_reporting/0.42.2/lib/google/cloud/error_reporting.rb#211
    def report(exception, service_name: T.unsafe(nil), service_version: T.unsafe(nil)); end

    private

    # source://google-cloud-error_reporting/0.42.2/lib/google/cloud/error_reporting.rb#284
    def default_credentials(scope: T.unsafe(nil)); end

    # source://google-cloud-error_reporting/0.42.2/lib/google/cloud/error_reporting.rb#232
    def resolve_credentials(credentials, scope); end

    # source://google-cloud-error_reporting/0.42.2/lib/google/cloud/error_reporting.rb#244
    def resolve_project_id(project_id, credentials); end
  end
end

# To load this package, including all its services, and instantiate a client:
#
# @example
#
#   require "google/cloud/error_reporting/v1beta1"
#   client = ::Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client.new
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/version.rb#23
module Google::Cloud::ErrorReporting::V1beta1; end

class Google::Cloud::ErrorReporting::V1beta1::DeleteEventsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::ErrorReporting::V1beta1::DeleteEventsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::ErrorReporting::V1beta1::ErrorContext
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::ErrorReporting::V1beta1::ErrorEvent
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::ErrorReporting::V1beta1::ErrorGroup
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module Google::Cloud::ErrorReporting::V1beta1::ErrorGroupOrder
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/error_stats_service_pb.rb#114
Google::Cloud::ErrorReporting::V1beta1::ErrorGroupOrder::AFFECTED_USERS_DESC = T.let(T.unsafe(nil), Integer)

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/error_stats_service_pb.rb#114
Google::Cloud::ErrorReporting::V1beta1::ErrorGroupOrder::COUNT_DESC = T.let(T.unsafe(nil), Integer)

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/error_stats_service_pb.rb#114
Google::Cloud::ErrorReporting::V1beta1::ErrorGroupOrder::CREATED_DESC = T.let(T.unsafe(nil), Integer)

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/error_stats_service_pb.rb#114
Google::Cloud::ErrorReporting::V1beta1::ErrorGroupOrder::GROUP_ORDER_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/error_stats_service_pb.rb#114
Google::Cloud::ErrorReporting::V1beta1::ErrorGroupOrder::LAST_SEEN_DESC = T.let(T.unsafe(nil), Integer)

# Service for retrieving and updating individual error groups.
#
# To load this service and instantiate a client:
#
#     require "google/cloud/error_reporting/v1beta1/error_group_service"
#     client = ::Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client.new
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/credentials.rb#25
module Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService; end

# Client for the ErrorGroupService service.
#
# Service for retrieving and updating individual error groups.
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/client.rb#32
class Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client
  include ::Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Paths

  # Create a new ErrorGroupService client object.
  #
  # @example
  #
  #   # Create a client using the default configuration
  #   client = ::Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client.new
  #
  #   # Create a client using a custom configuration
  #   client = ::Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client.new do |config|
  #   config.timeout = 10.0
  #   end
  # @return [Client] a new instance of Client
  # @yield [config] Configure the ErrorGroupService client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/client.rb#114
  def initialize; end

  # Configure the ErrorGroupService Client instance.
  #
  # The configuration is set to the derived mode, meaning that values can be changed,
  # but structural changes (adding new fields, etc.) are not allowed. Structural changes
  # should be made on {Client.configure}.
  #
  # See {::Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client::Configuration}
  # for a description of the configuration fields.
  #
  # @return [Client::Configuration]
  # @yield [config] Configure the Client client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/client.rb#93
  def configure; end

  # @private
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/client.rb#36
  def error_group_service_stub; end

  # Get the specified group.
  #
  # @example Basic example
  #   require "google/cloud/error_reporting/v1beta1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::ErrorReporting::V1beta1::GetGroupRequest.new
  #
  #   # Call the get_group method.
  #   result = client.get_group request
  #
  #   # The returned object is of type Google::Cloud::ErrorReporting::V1beta1::ErrorGroup.
  #   p result
  # @overload get_group
  # @overload get_group
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::ErrorReporting::V1beta1::ErrorGroup]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::ErrorReporting::V1beta1::ErrorGroup]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/client.rb#201
  def get_group(request, options = T.unsafe(nil)); end

  # Replace the data for the specified group.
  # Fails if the group does not exist.
  #
  # @example Basic example
  #   require "google/cloud/error_reporting/v1beta1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::ErrorReporting::V1beta1::UpdateGroupRequest.new
  #
  #   # Call the update_group method.
  #   result = client.update_group request
  #
  #   # The returned object is of type Google::Cloud::ErrorReporting::V1beta1::ErrorGroup.
  #   p result
  # @overload update_group
  # @overload update_group
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::ErrorReporting::V1beta1::ErrorGroup]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::ErrorReporting::V1beta1::ErrorGroup]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/client.rb#287
  def update_group(request, options = T.unsafe(nil)); end

  class << self
    # Configure the ErrorGroupService Client class.
    #
    # See {::Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client::Configuration}
    # for a description of the configuration fields.
    #
    # @example
    #
    #   # Modify the configuration for all ErrorGroupService clients
    #   ::Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client.configure do |config|
    #   config.timeout = 10.0
    #   end
    # @return [Client::Configuration]
    # @yield [config] Configure the Client client.
    # @yieldparam config [Client::Configuration]
    #
    # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/client.rb#56
    def configure; end
  end
end

# Configuration class for the ErrorGroupService API.
#
# This class represents the configuration for ErrorGroupService,
# providing control over timeouts, retry behavior, logging, transport
# parameters, and other low-level controls. Certain parameters can also be
# applied individually to specific RPCs. See
# {::Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client::Configuration::Rpcs}
# for a list of RPCs that can be configured independently.
#
# Configuration can be applied globally to all clients, or to a single client
# on construction.
#
# @example
#
#   # Modify the global config, setting the timeout for
#   # get_group to 20 seconds,
#   # and all remaining timeouts to 10 seconds.
#   ::Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client.configure do |config|
#   config.timeout = 10.0
#   config.rpcs.get_group.timeout = 20.0
#   end
#
#   # Apply the above configuration only to a new client.
#   client = ::Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client.new do |config|
#   config.timeout = 10.0
#   config.rpcs.get_group.timeout = 20.0
#   end
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/client.rb#407
class Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client::Configuration
  extend ::Gapic::Config

  # @private
  # @return [Configuration] a new instance of Configuration
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client::Configuration] the object that the method was called on
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/client.rb#427
  def initialize(parent_config = T.unsafe(nil)); end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def channel_args; end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def channel_args=(new_value); end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def credentials; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def credentials=(new_value); end

  # The hostname or hostname:port of the service endpoint.
  # Defaults to `"clouderrorreporting.googleapis.com"`.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def endpoint; end

  # The hostname or hostname:port of the service endpoint.
  # Defaults to `"clouderrorreporting.googleapis.com"`.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def endpoint=(new_value); end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def interceptors; end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def interceptors=(new_value); end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def lib_name; end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def lib_name=(new_value); end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def lib_version; end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def lib_version=(new_value); end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def metadata; end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def metadata=(new_value); end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def quota_project; end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def quota_project=(new_value); end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def retry_policy; end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def retry_policy=(new_value); end

  # Configurations for individual RPCs
  #
  # @return [Rpcs]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/client.rb#437
  def rpcs; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def scope; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def scope=(new_value); end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def timeout; end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def timeout=(new_value); end
end

# Configuration RPC class for the ErrorGroupService API.
#
# Includes fields providing the configuration for each RPC in this service.
# Each configuration object is of type `Gapic::Config::Method` and includes
# the following configuration fields:
#
#  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
#  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
#  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
#     include the following keys:
#      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
#      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
#      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
#      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
#         trigger a retry.
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/client.rb#462
class Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client::Configuration::Rpcs
  # @private
  # @return [Rpcs] a new instance of Rpcs
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client::Configuration::Rpcs] the object that the method was called on
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/client.rb#475
  def initialize(parent_rpcs = T.unsafe(nil)); end

  # RPC-specific configuration for `get_group`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/client.rb#467
  def get_group; end

  # RPC-specific configuration for `update_group`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/client.rb#472
  def update_group; end
end

# Credentials for the ErrorGroupService API.
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/credentials.rb#27
class Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Credentials < ::Google::Auth::Credentials; end

# Path helper methods for the ErrorGroupService API.
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/paths.rb#26
module Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Paths
  extend ::Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Paths

  # Create a fully-qualified ErrorGroup resource string.
  #
  # The resource will be in the following format:
  #
  # `projects/{project}/groups/{group}`
  #
  # @param project [String]
  # @param group [String]
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_group_service/paths.rb#38
  def error_group_path(project:, group:); end
end

class Google::Cloud::ErrorReporting::V1beta1::ErrorGroupStats
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

# An API for retrieving and managing error statistics as well as data for
# individual events.
#
# To load this service and instantiate a client:
#
#     require "google/cloud/error_reporting/v1beta1/error_stats_service"
#     client = ::Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client.new
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/credentials.rb#25
module Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService; end

# Client for the ErrorStatsService service.
#
# An API for retrieving and managing error statistics as well as data for
# individual events.
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/client.rb#33
class Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client
  include ::Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Paths

  # Create a new ErrorStatsService client object.
  #
  # @example
  #
  #   # Create a client using the default configuration
  #   client = ::Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client.new
  #
  #   # Create a client using a custom configuration
  #   client = ::Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client.new do |config|
  #   config.timeout = 10.0
  #   end
  # @return [Client] a new instance of Client
  # @yield [config] Configure the ErrorStatsService client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/client.rb#115
  def initialize; end

  # Configure the ErrorStatsService Client instance.
  #
  # The configuration is set to the derived mode, meaning that values can be changed,
  # but structural changes (adding new fields, etc.) are not allowed. Structural changes
  # should be made on {Client.configure}.
  #
  # See {::Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client::Configuration}
  # for a description of the configuration fields.
  #
  # @return [Client::Configuration]
  # @yield [config] Configure the Client client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/client.rb#94
  def configure; end

  # Deletes all error events of a given project.
  #
  # @example Basic example
  #   require "google/cloud/error_reporting/v1beta1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::ErrorReporting::V1beta1::DeleteEventsRequest.new
  #
  #   # Call the delete_events method.
  #   result = client.delete_events request
  #
  #   # The returned object is of type Google::Cloud::ErrorReporting::V1beta1::DeleteEventsResponse.
  #   p result
  # @overload delete_events
  # @overload delete_events
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::ErrorReporting::V1beta1::DeleteEventsResponse]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::ErrorReporting::V1beta1::DeleteEventsResponse]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/client.rb#444
  def delete_events(request, options = T.unsafe(nil)); end

  # @private
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/client.rb#37
  def error_stats_service_stub; end

  # Lists the specified events.
  #
  # @example Basic example
  #   require "google/cloud/error_reporting/v1beta1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::ErrorReporting::V1beta1::ListEventsRequest.new
  #
  #   # Call the list_events method.
  #   result = client.list_events request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can
  #   # iterate over all elements by calling #each, and the enumerable
  #   # will lazily make API calls to fetch subsequent pages. Other
  #   # methods are also available for managing paging directly.
  #   result.each do |response|
  #   # Each element is of type ::Google::Cloud::ErrorReporting::V1beta1::ErrorEvent.
  #   p response
  #   end
  # @overload list_events
  # @overload list_events
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::PagedEnumerable<::Google::Cloud::ErrorReporting::V1beta1::ErrorEvent>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::ErrorReporting::V1beta1::ErrorEvent>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/client.rb#353
  def list_events(request, options = T.unsafe(nil)); end

  # Lists the specified groups.
  #
  # @example Basic example
  #   require "google/cloud/error_reporting/v1beta1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::ErrorReporting::V1beta1::ListGroupStatsRequest.new
  #
  #   # Call the list_group_stats method.
  #   result = client.list_group_stats request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can
  #   # iterate over all elements by calling #each, and the enumerable
  #   # will lazily make API calls to fetch subsequent pages. Other
  #   # methods are also available for managing paging directly.
  #   result.each do |response|
  #   # Each element is of type ::Google::Cloud::ErrorReporting::V1beta1::ErrorGroupStats.
  #   p response
  #   end
  # @overload list_group_stats
  # @overload list_group_stats
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::PagedEnumerable<::Google::Cloud::ErrorReporting::V1beta1::ErrorGroupStats>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::ErrorReporting::V1beta1::ErrorGroupStats>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/client.rb#242
  def list_group_stats(request, options = T.unsafe(nil)); end

  class << self
    # Configure the ErrorStatsService Client class.
    #
    # See {::Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client::Configuration}
    # for a description of the configuration fields.
    #
    # @example
    #
    #   # Modify the configuration for all ErrorStatsService clients
    #   ::Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client.configure do |config|
    #   config.timeout = 10.0
    #   end
    # @return [Client::Configuration]
    # @yield [config] Configure the Client client.
    # @yieldparam config [Client::Configuration]
    #
    # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/client.rb#57
    def configure; end
  end
end

# Configuration class for the ErrorStatsService API.
#
# This class represents the configuration for ErrorStatsService,
# providing control over timeouts, retry behavior, logging, transport
# parameters, and other low-level controls. Certain parameters can also be
# applied individually to specific RPCs. See
# {::Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client::Configuration::Rpcs}
# for a list of RPCs that can be configured independently.
#
# Configuration can be applied globally to all clients, or to a single client
# on construction.
#
# @example
#
#   # Modify the global config, setting the timeout for
#   # list_group_stats to 20 seconds,
#   # and all remaining timeouts to 10 seconds.
#   ::Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client.configure do |config|
#   config.timeout = 10.0
#   config.rpcs.list_group_stats.timeout = 20.0
#   end
#
#   # Apply the above configuration only to a new client.
#   client = ::Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client.new do |config|
#   config.timeout = 10.0
#   config.rpcs.list_group_stats.timeout = 20.0
#   end
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/client.rb#564
class Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client::Configuration
  extend ::Gapic::Config

  # @private
  # @return [Configuration] a new instance of Configuration
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client::Configuration] the object that the method was called on
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/client.rb#584
  def initialize(parent_config = T.unsafe(nil)); end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def channel_args; end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def channel_args=(new_value); end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def credentials; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def credentials=(new_value); end

  # The hostname or hostname:port of the service endpoint.
  # Defaults to `"clouderrorreporting.googleapis.com"`.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def endpoint; end

  # The hostname or hostname:port of the service endpoint.
  # Defaults to `"clouderrorreporting.googleapis.com"`.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def endpoint=(new_value); end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def interceptors; end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def interceptors=(new_value); end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def lib_name; end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def lib_name=(new_value); end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def lib_version; end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def lib_version=(new_value); end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def metadata; end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def metadata=(new_value); end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def quota_project; end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def quota_project=(new_value); end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def retry_policy; end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def retry_policy=(new_value); end

  # Configurations for individual RPCs
  #
  # @return [Rpcs]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/client.rb#594
  def rpcs; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def scope; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def scope=(new_value); end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def timeout; end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def timeout=(new_value); end
end

# Configuration RPC class for the ErrorStatsService API.
#
# Includes fields providing the configuration for each RPC in this service.
# Each configuration object is of type `Gapic::Config::Method` and includes
# the following configuration fields:
#
#  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
#  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
#  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
#     include the following keys:
#      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
#      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
#      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
#      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
#         trigger a retry.
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/client.rb#619
class Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client::Configuration::Rpcs
  # @private
  # @return [Rpcs] a new instance of Rpcs
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client::Configuration::Rpcs] the object that the method was called on
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/client.rb#637
  def initialize(parent_rpcs = T.unsafe(nil)); end

  # RPC-specific configuration for `delete_events`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/client.rb#634
  def delete_events; end

  # RPC-specific configuration for `list_events`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/client.rb#629
  def list_events; end

  # RPC-specific configuration for `list_group_stats`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/client.rb#624
  def list_group_stats; end
end

# Credentials for the ErrorStatsService API.
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/credentials.rb#27
class Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Credentials < ::Google::Auth::Credentials; end

# Path helper methods for the ErrorStatsService API.
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/paths.rb#26
module Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Paths
  extend ::Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Paths

  # Create a fully-qualified Project resource string.
  #
  # The resource will be in the following format:
  #
  # `projects/{project}`
  #
  # @param project [String]
  # @return [::String]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/error_stats_service/paths.rb#37
  def project_path(project:); end
end

class Google::Cloud::ErrorReporting::V1beta1::GetGroupRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::ErrorReporting::V1beta1::HttpRequestContext
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::ErrorReporting::V1beta1::ListEventsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::ErrorReporting::V1beta1::ListEventsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::ErrorReporting::V1beta1::ListGroupStatsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::ErrorReporting::V1beta1::ListGroupStatsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::ErrorReporting::V1beta1::QueryTimeRange
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module Google::Cloud::ErrorReporting::V1beta1::QueryTimeRange::Period
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/error_stats_service_pb.rb#109
Google::Cloud::ErrorReporting::V1beta1::QueryTimeRange::Period::PERIOD_1_DAY = T.let(T.unsafe(nil), Integer)

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/error_stats_service_pb.rb#109
Google::Cloud::ErrorReporting::V1beta1::QueryTimeRange::Period::PERIOD_1_HOUR = T.let(T.unsafe(nil), Integer)

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/error_stats_service_pb.rb#109
Google::Cloud::ErrorReporting::V1beta1::QueryTimeRange::Period::PERIOD_1_WEEK = T.let(T.unsafe(nil), Integer)

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/error_stats_service_pb.rb#109
Google::Cloud::ErrorReporting::V1beta1::QueryTimeRange::Period::PERIOD_30_DAYS = T.let(T.unsafe(nil), Integer)

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/error_stats_service_pb.rb#109
Google::Cloud::ErrorReporting::V1beta1::QueryTimeRange::Period::PERIOD_6_HOURS = T.let(T.unsafe(nil), Integer)

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/error_stats_service_pb.rb#109
Google::Cloud::ErrorReporting::V1beta1::QueryTimeRange::Period::PERIOD_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Google::Cloud::ErrorReporting::V1beta1::ReportErrorEventRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::ErrorReporting::V1beta1::ReportErrorEventResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

# An API for reporting error events.
#
# To load this service and instantiate a client:
#
#     require "google/cloud/error_reporting/v1beta1/report_errors_service"
#     client = ::Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client.new
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/report_errors_service/credentials.rb#25
module Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService; end

# Client for the ReportErrorsService service.
#
# An API for reporting error events.
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/report_errors_service/client.rb#32
class Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client
  include ::Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Paths

  # Create a new ReportErrorsService client object.
  #
  # @example
  #
  #   # Create a client using the default configuration
  #   client = ::Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client.new
  #
  #   # Create a client using a custom configuration
  #   client = ::Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client.new do |config|
  #   config.timeout = 10.0
  #   end
  # @return [Client] a new instance of Client
  # @yield [config] Configure the ReportErrorsService client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/report_errors_service/client.rb#111
  def initialize; end

  # Configure the ReportErrorsService Client instance.
  #
  # The configuration is set to the derived mode, meaning that values can be changed,
  # but structural changes (adding new fields, etc.) are not allowed. Structural changes
  # should be made on {Client.configure}.
  #
  # See {::Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client::Configuration}
  # for a description of the configuration fields.
  #
  # @return [Client::Configuration]
  # @yield [config] Configure the Client client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/report_errors_service/client.rb#90
  def configure; end

  # Report an individual error event and record the event to a log.
  #
  # This endpoint accepts **either** an OAuth token,
  # **or** an [API key](https://support.google.com/cloud/answer/6158862)
  # for authentication. To use an API key, append it to the URL as the value of
  # a `key` parameter. For example:
  #
  # `POST
  # https://clouderrorreporting.googleapis.com/v1beta1/\\{projectName}/events:report?key=123ABC456`
  #
  # **Note:** [Error Reporting](/error-reporting) is a global service built
  # on Cloud Logging and doesn't analyze logs stored
  # in regional log buckets or logs routed to other Google Cloud projects.
  #
  # For more information, see
  # [Using Error Reporting with regionalized
  # logs](/error-reporting/docs/regionalization).
  #
  # @example Basic example
  #   require "google/cloud/error_reporting/v1beta1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::ErrorReporting::V1beta1::ReportErrorEventRequest.new
  #
  #   # Call the report_error_event method.
  #   result = client.report_error_event request
  #
  #   # The returned object is of type Google::Cloud::ErrorReporting::V1beta1::ReportErrorEventResponse.
  #   p result
  # @overload report_error_event
  # @overload report_error_event
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::ErrorReporting::V1beta1::ReportErrorEventResponse]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::ErrorReporting::V1beta1::ReportErrorEventResponse]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/report_errors_service/client.rb#216
  def report_error_event(request, options = T.unsafe(nil)); end

  # @private
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/report_errors_service/client.rb#36
  def report_errors_service_stub; end

  class << self
    # Configure the ReportErrorsService Client class.
    #
    # See {::Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client::Configuration}
    # for a description of the configuration fields.
    #
    # @example
    #
    #   # Modify the configuration for all ReportErrorsService clients
    #   ::Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client.configure do |config|
    #   config.timeout = 10.0
    #   end
    # @return [Client::Configuration]
    # @yield [config] Configure the Client client.
    # @yieldparam config [Client::Configuration]
    #
    # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/report_errors_service/client.rb#56
    def configure; end
  end
end

# Configuration class for the ReportErrorsService API.
#
# This class represents the configuration for ReportErrorsService,
# providing control over timeouts, retry behavior, logging, transport
# parameters, and other low-level controls. Certain parameters can also be
# applied individually to specific RPCs. See
# {::Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client::Configuration::Rpcs}
# for a list of RPCs that can be configured independently.
#
# Configuration can be applied globally to all clients, or to a single client
# on construction.
#
# @example
#
#   # Modify the global config, setting the timeout for
#   # report_error_event to 20 seconds,
#   # and all remaining timeouts to 10 seconds.
#   ::Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client.configure do |config|
#   config.timeout = 10.0
#   config.rpcs.report_error_event.timeout = 20.0
#   end
#
#   # Apply the above configuration only to a new client.
#   client = ::Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client.new do |config|
#   config.timeout = 10.0
#   config.rpcs.report_error_event.timeout = 20.0
#   end
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/report_errors_service/client.rb#336
class Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client::Configuration
  extend ::Gapic::Config

  # @private
  # @return [Configuration] a new instance of Configuration
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client::Configuration] the object that the method was called on
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/report_errors_service/client.rb#356
  def initialize(parent_config = T.unsafe(nil)); end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def channel_args; end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def channel_args=(new_value); end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def credentials; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def credentials=(new_value); end

  # The hostname or hostname:port of the service endpoint.
  # Defaults to `"clouderrorreporting.googleapis.com"`.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def endpoint; end

  # The hostname or hostname:port of the service endpoint.
  # Defaults to `"clouderrorreporting.googleapis.com"`.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def endpoint=(new_value); end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def interceptors; end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def interceptors=(new_value); end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def lib_name; end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def lib_name=(new_value); end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def lib_version; end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def lib_version=(new_value); end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def metadata; end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def metadata=(new_value); end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def quota_project; end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def quota_project=(new_value); end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def retry_policy; end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def retry_policy=(new_value); end

  # Configurations for individual RPCs
  #
  # @return [Rpcs]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/report_errors_service/client.rb#366
  def rpcs; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def scope; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def scope=(new_value); end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#70
  def timeout; end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.16.0/lib/gapic/config.rb#83
  def timeout=(new_value); end
end

# Configuration RPC class for the ReportErrorsService API.
#
# Includes fields providing the configuration for each RPC in this service.
# Each configuration object is of type `Gapic::Config::Method` and includes
# the following configuration fields:
#
#  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
#  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
#  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
#     include the following keys:
#      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
#      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
#      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
#      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
#         trigger a retry.
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/report_errors_service/client.rb#391
class Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client::Configuration::Rpcs
  # @private
  # @return [Rpcs] a new instance of Rpcs
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client::Configuration::Rpcs] the object that the method was called on
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/report_errors_service/client.rb#399
  def initialize(parent_rpcs = T.unsafe(nil)); end

  # RPC-specific configuration for `report_error_event`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/report_errors_service/client.rb#396
  def report_error_event; end
end

# Credentials for the ReportErrorsService API.
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/report_errors_service/credentials.rb#27
class Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Credentials < ::Google::Auth::Credentials; end

# Path helper methods for the ReportErrorsService API.
#
# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/report_errors_service/paths.rb#26
module Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Paths
  extend ::Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Paths

  # Create a fully-qualified Project resource string.
  #
  # The resource will be in the following format:
  #
  # `projects/{project}`
  #
  # @param project [String]
  # @return [::String]
  #
  # source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/report_errors_service/paths.rb#37
  def project_path(project:); end
end

class Google::Cloud::ErrorReporting::V1beta1::ReportedErrorEvent
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module Google::Cloud::ErrorReporting::V1beta1::ResolutionStatus
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/common_pb.rb#71
Google::Cloud::ErrorReporting::V1beta1::ResolutionStatus::ACKNOWLEDGED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/common_pb.rb#71
Google::Cloud::ErrorReporting::V1beta1::ResolutionStatus::MUTED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/common_pb.rb#71
Google::Cloud::ErrorReporting::V1beta1::ResolutionStatus::OPEN = T.let(T.unsafe(nil), Integer)

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/common_pb.rb#71
Google::Cloud::ErrorReporting::V1beta1::ResolutionStatus::RESOLUTION_STATUS_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/common_pb.rb#71
Google::Cloud::ErrorReporting::V1beta1::ResolutionStatus::RESOLVED = T.let(T.unsafe(nil), Integer)

class Google::Cloud::ErrorReporting::V1beta1::ServiceContext
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::ErrorReporting::V1beta1::ServiceContextFilter
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::ErrorReporting::V1beta1::SourceLocation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::ErrorReporting::V1beta1::TimedCount
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module Google::Cloud::ErrorReporting::V1beta1::TimedCountAlignment
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/error_stats_service_pb.rb#113
Google::Cloud::ErrorReporting::V1beta1::TimedCountAlignment::ALIGNMENT_EQUAL_AT_END = T.let(T.unsafe(nil), Integer)

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/error_stats_service_pb.rb#113
Google::Cloud::ErrorReporting::V1beta1::TimedCountAlignment::ALIGNMENT_EQUAL_ROUNDED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-error_reporting-v1beta1//lib/google/devtools/clouderrorreporting/v1beta1/error_stats_service_pb.rb#113
Google::Cloud::ErrorReporting::V1beta1::TimedCountAlignment::ERROR_COUNT_ALIGNMENT_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Google::Cloud::ErrorReporting::V1beta1::TrackingIssue
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class Google::Cloud::ErrorReporting::V1beta1::UpdateGroupRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://google-cloud-error_reporting-v1beta1//lib/google/cloud/error_reporting/v1beta1/version.rb#24
Google::Cloud::ErrorReporting::V1beta1::VERSION = T.let(T.unsafe(nil), String)

# source://google-cloud-error_reporting/0.42.2/lib/google/cloud/error_reporting/version.rb#19
Google::Cloud::ErrorReporting::VERSION = T.let(T.unsafe(nil), String)
